(* ::Package:: *)

(* ::Title:: *)
(*Track droplets*)


(* ::Section::Closed:: *)
(*notebook options*)


$HistoryLength=0;


(* ::Chapter:: *)
(*functions*)


(* ::Section::Closed:: *)
(*calculateTemporalFreqSpectrum*)


(* ::Text:: *)
(*FFT with windowing*)
(*see: https://en.wikipedia.org/wiki/Window_function#Blackman_window*)
(**)
(*f = [0,0.5*nSamples]/(dt*nSamples)*)


(* ::Subsubsection::Closed:: *)
(*test: frequency identification of n full periods*)


(* ::Input:: *)
(*{windowingQ,nPadding}={True,Length[sData2]};*)
(*f=0.1;*)
(*times=Range[0,10000]dt;*)
(*sData2=Table[Sin[2\[Pi] f dt t]+Sin[2\[Pi] 1.1f dt t],{t,0,10000,1}];*)
(*ps=ListLinePlot[{times,sData2}\[Transpose],(*Evaluate[ops],*)Frame->True,FrameLabel->{"time t (s)","state s"}]*)
(*psdIdeal=calculateTemporalFreqSpectrum[dt,sData2,windowingQ,nPadding][[{1,2}]]\[Transpose](*\[LeftDoubleBracket];;100\[RightDoubleBracket]*);*)
(*ListPlot[psdIdeal,FrameLabel->{"frequency f (Hz)","PSD(s)"},PlotRange->{{0,0.2},{0,0.4}(*All*)},Joined->True,ImageSize->400,Frame->True,FrameStyle->Directive[Black,20],PlotRange->All,Mesh->All]*)
(**)
(*{windowingQ,nPadding}={True,10Length[sData2]};*)
(*f=0.1;*)
(*times=Range[0,10000]dt;*)
(*sData2=Table[Sin[2\[Pi] f dt t]+Sin[2\[Pi] 1.1f dt t],{t,0,10000,1}];*)
(*ps=ListLinePlot[{times,sData2}\[Transpose],(*Evaluate[ops],*)Frame->True,FrameLabel->{"time t (s)","state s"}]*)
(*psdIdeal=calculateTemporalFreqSpectrum[dt,sData2,windowingQ,nPadding][[{1,2}]]\[Transpose](*\[LeftDoubleBracket];;100\[RightDoubleBracket]*);*)
(*ListPlot[psdIdeal,FrameLabel->{"frequency f (Hz)","PSD(s)"},PlotRange->{{0,0.2},{0,0.4}(*All*)},Joined->True,ImageSize->400,Frame->True,FrameStyle->Directive[Black,20],PlotRange->All,Mesh->All]*)


(* ::Subsubsection::Closed:: *)
(*test: frequency identification of q partial periods*)


(* ::Input:: *)
(*f=0.1;*)
(*dt=0.01;*)
(*nSamples=9700;*)
(*times=Range[0,nSamples]dt;*)
(*sData2=Table[Sin[2\[Pi] f dt t],{t,0,nSamples,1}];*)
(*ps=ListLinePlot[{times,sData2}\[Transpose],(*Evaluate[ops],*)FrameLabel->{"time t (s)","state s"}]*)
(*psdNaive=calculateTemporalFreqSpectrum[dt,sData2,False][[{1,2}]]\[Transpose][[;;600]];*)
(*psdCorrected=calculateTemporalFreqSpectrum[dt,sData2,True][[{1,2}]]\[Transpose][[;;600]];*)
(*ListLogPlot[{psdIdeal,psdNaive,psdCorrected},FrameLabel->{"frequency f (Hz)","PSD(s)"},PlotRange->{{0,0.2},All},Joined->True,ImageSize->400,Frame->True,FrameStyle->Directive[Black,20]]*)


(* ::Subsubsection::Closed:: *)
(*test: memory preallocation*)


(* ::Input:: *)
(*data=Table[Sin[x],{x,Subdivide[0,2\[Pi],1000]}];*)


(* ::Input:: *)
(*memoryPad=ConstantArray[0.0,3000];*)


(* ::Input:: *)
(*AbsoluteTiming[*)
(*Do[*)
(*dataPad=PadRight[data,3000];*)
(*,{i,100}];*)
(*]*)


(* ::Input:: *)
(*AbsoluteTiming[*)
(*Do[*)
(*memoryPad2=memoryPad;*)
(*memoryPad2[[;;Length[data]]]=data;*)
(*,{i,100}];*)
(*]*)


(* ::Input:: *)
(*(** check memory leak **)*)


(* ::Input:: *)
(*dt=0.1;*)
(*signal=Table[Sin[i dt],{i,Subdivide[0,2\[Pi],1/dt]}];*)
(*nPaddedSamples=2000;*)
(*paddedMemory=ConstantArray[0.0,nPaddedSamples];*)
(*ListPlot[paddedMemory]*)
(*calculateTemporalFreqSpectrum[dt,signal,True,nPaddedSamples,paddedMemory];*)
(*ListPlot[paddedMemory]*)


(* ::Subsubsection::Closed:: *)
(*test: base frequency widening*)


(* ::Input:: *)
(*dt=1.0/30;*)
(*windowingQ=True;*)
(*pthout=FileNameJoin[{NotebookDirectory[],"output_2maxLength_frames"}];*)
(*dayIndex=1;*)
(*intensityParts=Import[FileNameJoin[{pthout,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}]];*)
(*signal=intensityParts[[1]];*)
(*nPaddedSamples=2Length[signal];*)
(*paddedMemory=ConstantArray[0.0,nPaddedSamples];*)


(* ::Input:: *)
(*powerSpectralDensitiesNoPadding=calculateTemporalFreqSpectrum[dt,#,windowingQ,0][[{1,2}]]\[Transpose]&@signal;*)
(*freqsNoPad=powerSpectralDensitiesNoPadding[[All,1]];*)
(*spectrumNoPad=powerSpectralDensitiesNoPadding[[All,2]];*)
(**)
(*powerSpectralDensities=calculateTemporalFreqSpectrum[dt,#,windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose]&@signal;*)
(*freqs=powerSpectralDensities[[All,1]];*)
(*spectrum=powerSpectralDensities[[All,2]];*)


(* ::Input:: *)
(*Length[signal]*)
(*powerSpectralDensities//Dimensions*)
(*powerSpectralDensitiesNoPadding//Dimensions*)


(* ::Input:: *)
(*ListPlot[signal]*)
(*ListPlot[signal0,PlotLabel->Mean[signal0]];*)
(*ListPlot[signal1,PlotLabel->Mean[signal1],PlotRange->All]*)
(*ListPlot[signal2,PlotLabel->Mean[signal2],PlotRange->All]*)
(*ListPlot[signal3,PlotLabel->Mean[signal3],PlotRange->All]*)
(*ListLinePlot[{{freqs,spectrum}\[Transpose](*,{freqsNoPad,spectrumNoPad+0.01}\[Transpose]*)},PlotRange->{{0,1},All}]*)
(*ListLinePlot[{{freqs,spectrum}\[Transpose],{freqsNoPad,0.5spectrumNoPad+0.05}\[Transpose]},PlotRange->{{0,1},All}]*)


(* ::Subsubsection::Closed:: *)
(*ftFrequencyIdentification (deprecated)*)


(* ::Code:: *)
(*ftFrequencyIdentification[timeseries_,timeseriesDuration_]:=Module[{nSamples,dt,spectrumLength,powerSpectralDensity,freqs,peakThreshold,foundFrequency},nSamples=Length@timeseries;*)
(*dt=timeseriesDuration/nSamples;*)
(*Print["sampling frequency/rate = ",1.0/dt,"\nNyquist freq: ",(1.0/dt-1)*0.5];*)
(*spectrumLength=Floor[0.5 nSamples];*)
(*powerSpectralDensity=Abs[Fourier[timeseries][[;;spectrumLength]]]^2;*)
(*freqs=Range[0,spectrumLength-1]/(dt*nSamples);*)
(*peakThreshold=0.1;*)
(*foundFrequency=freqs[[#]]&/@Round[FindPeaks[powerSpectralDensity,0.0,0,peakThreshold][[All,1]]];*)
(*Print["found frequency: ",foundFrequency];*)
(*{foundFrequency,freqs,powerSpectralDensity}]*)


(* ::Subsubsection::Closed:: *)
(*debug*)


(* ::Input:: *)
(*Range[0,0.5 20000-1]/(dt 20000)//Max*)


(* ::Input:: *)
(*windowingQ=True;*)
(**)
(*(** original **)*)
(*signal=intensity;*)
(*nSamples=Length[signal];*)
(*psd1=Abs[Fourier[signal][[;;Floor[0.5nSamples]]]]^2;*)
(*psd1[[1]]*)
(*p1=ListLinePlot[signal,Frame->True];*)
(*p2=ListLogPlot[psd1,PlotRange->All,Joined->True,Frame->True];*)
(*Grid[{{p1,p2}}]*)
(**)
(*(** blackman original **)*)
(*signal1=If[windowingQ,*)
(*	a=0.16;*)
(*	windowFunctionBlackman=Table[(1-a)/2-1/2 Cos[2\[Pi] n/(nSamples-1)]+a/2 Cos[4\[Pi] n/(nSamples-1)],{n,0,nSamples-1}];*)
(*	signal windowFunctionBlackman,*)
(*	signal*)
(*];*)
(*ListPlot[windowFunctionBlackman];*)
(*psd2=Abs[Fourier[signal1][[;;Floor[0.5nSamples]]]]^2;*)
(*psd2[[1]]*)
(*p1=ListLinePlot[signal1,Frame->True];*)
(*p2=ListLogPlot[psd2,PlotRange->All,Joined->True,Frame->True];*)
(*Grid[{{p1,p2}}]*)
(**)
(*(** blackman zero-offset original **)*)
(*signal1b=signal-Mean[signal];*)
(*signal1c=If[windowingQ,*)
(*	a=0.16;*)
(*	windowFunctionBlackman=Table[(1-a)/2-1/2 Cos[2\[Pi] n/(nSamples-1)]+a/2 Cos[4\[Pi] n/(nSamples-1)],{n,0,nSamples-1}];*)
(*	signal1b windowFunctionBlackman,*)
(*	signal1b*)
(*];*)
(*psd2c=Abs[Fourier[signal1c][[;;Floor[0.5nSamples]]]]^2;*)
(*psd2c[[1]]*)
(*p1=ListLinePlot[signal1c,Frame->True];*)
(*p2=ListLogPlot[psd2c,PlotRange->All,Joined->True,Frame->True];*)
(*Grid[{{p1,p2}}]*)
(**)
(*(** zero-offset blackman original **)*)
(*signal2=signal1-Mean[signal1];*)
(*psd3=Abs[Fourier[signal2][[;;Floor[0.5nSamples]]]]^2;*)
(*psd3[[1]]*)
(*p1=ListLinePlot[signal2,Frame->True];*)
(*p2=ListLogPlot[psd3,PlotRange->All,Joined->True,Frame->True];*)
(*Grid[{{p1,p2}}]*)
(**)
(*(** zero-offset blackman zero-offset original **)*)
(*signal2b=signal1c-Mean[signal1c];*)
(*psd3b=Abs[Fourier[signal2b][[;;Floor[0.5nSamples]]]]^2;*)
(*psd3b[[1]]*)
(*p1=ListLinePlot[signal2b,Frame->True];*)
(*p2=ListLogPlot[psd3b,PlotRange->All,Joined->True,Frame->True];*)
(*Grid[{{p1,p2}}]*)


(* ::Input:: *)
(*ListLogPlot[Abs@(psd2-psd2c)[[2;;]],Joined->True,PlotRange->All];*)


(* ::Input:: *)
(*{iStart,iEnd}={2,100};*)
(*ListLogPlot[{psd1[[iStart;;iEnd]],psd2[[iStart;;iEnd]],psd2c[[iStart;;iEnd]],psd3[[iStart;;iEnd]],psd3b[[iStart;;iEnd]]},Joined->True,PlotLegends->{"f","window @ f","window @ mean @ f","mean @ window @ f","mean @ window @ mean @ f"},Frame->True,AspectRatio->1]*)


(* ::Subsubsection:: *)
(*code*)


calculateTemporalFreqSpectrum[dt_,signal_,windowingQ_:False,nPaddedSamples_:0,paddedMemory_:{}]:=Module[
{nSamples,signal0,signal1,signal2,signal3,a,windowFunctionBlackman,spectrumLength,powerSpectralDensity,freqs,ft,phases},
nSamples=Length[signal];

(** remove offset to avoid major peak at zeroth wavenumber; TOOD: why? the one at the end should be sufficient! **)
signal0=signal-Mean[signal];

(** window function since signal is usually non-periodic at boundaries **)
signal1=If[windowingQ,
	a=0.16;
	windowFunctionBlackman=Table[(1-a)/2-1/2 Cos[2\[Pi] n/(nSamples-1)]+a/2 Cos[4\[Pi] n/(nSamples-1)],{n,0,nSamples-1}];
	signal0 windowFunctionBlackman,
	signal0
];

(** remove offset to avoid major peak at zeroth wavenumber **)
(*signal2=signal1-Mean[signal1];*)   (** this moves the entire spectrum up -> gives contribution to zeroth wavenumber **)
signal2=signal1;

(** padding for better resolution **)
If[nPaddedSamples>Length[signal],
	(*nPaddedSamples=3nSamples;*)
	signal3=paddedMemory;
	signal3[[;;Length[signal2]]]=signal2;  (** fast alternative to native padding function **)
	(*signal2=PadRight[signal1,nPaddedSamples];*) (** pad signal with zeros, so that it has total length of nPaddedSamples; slow! **)
	nSamples=Length[signal3];,
	signal3=signal2;
];

(*signal3=signal3-Mean[signal3];*)

(** fourier transform **)
spectrumLength=Floor[0.5nSamples];
ft=Fourier[signal3][[;;spectrumLength]];
phases=Arg[ft];
powerSpectralDensity=Abs[ft]^2;
freqs=Range[0,spectrumLength-1]/(dt nSamples);

(** output **)
{freqs,powerSpectralDensity,phases}
]


(* ::Section:: *)
(*defectTracker*)


(* ::Input:: *)
(*AbsoluteTiming[*)
(*{x,y}=defectTracker[defects,{nx,ny}];*)
(*][[1]]*)


(* ::Subsection::Closed:: *)
(*debug - defect lifetimes*)


(* ::Input:: *)
(*MatrixPlot[xDefects[[;;,;;]],PlotRangePadding->None,AspectRatio->1]*)


(* ::Subsection::Closed:: *)
(*debug - are all defects detected?*)


(* ::Input:: *)
(*defects=positions[[;;865]];*)
(*Manipulate[*)
(**)
(*d1=defects[[t]];*)
(*d2=defects[[t+1]];*)
(*plot1=ListPlot[{d1,d2},AspectRatio->1,Frame->True,PlotRange->{{1,nx},{1,ny}},PlotMarkers->{Graphics[Circle[]],Medium},ImageSize->400];*)
(**)
(*(*d1=Select[{xDefects\[LeftDoubleBracket]t\[RightDoubleBracket],yDefects\[LeftDoubleBracket]t\[RightDoubleBracket]}\[Transpose],#\[NotEqual]{-1,-1}&];*)
(*d2=Select[{xDefects\[LeftDoubleBracket]t+1\[RightDoubleBracket],yDefects\[LeftDoubleBracket]t+1\[RightDoubleBracket]}\[Transpose],#\[NotEqual]{-1,-1}&];*)
(*plot2=ListPlot[{d1,d2},AspectRatio\[Rule]1,Frame\[Rule]True,PlotRange\[Rule]{{0,300},{0,300}},PlotMarkers\[Rule]{Graphics[Circle[]],Medium},ImageSize\[Rule]400];*)
(**)*)
(*Grid[{{plot1(*,plot2*)}}]*)
(*,{t,1,Length[defects]-1,1,Appearance->"Open",AnimationRate->10},TrackedSymbols:>{t}]*)


(* ::Subsection::Closed:: *)
(*debug - where does the code fail?*)


(* ::Input:: *)
(*{distanceThresh,pairThresh}={40,80};*)
(*tEnd=Length[defects];*)
(**)
(*defectsPlus=Select[#,(Positive[#[[3]]]&)][[All,{1,2}]]&/@defects;*)
(*defectsMinus=Select[#,(Negative[#[[3]]]&)][[All,{1,2}]]&/@defects;*)
(**)
(*(** allocate arrays and initialize first step t=1 **)*)
(*nTimes=Length[defectsPlus];*)
(*nTrajectoriesMax0=500;*)
(*{counterPlus,xPlus,yPlus,nTrajectoriesMaxPlus}=initTracker[defectsPlus[[1]],nTimes,nTrajectoriesMax0];*)
(*{counterMinus,xMinus,yMinus,nTrajectoriesMaxMinus}=initTracker[defectsMinus[[1]],nTimes,nTrajectoriesMax0];*)
(**)
(*(** analyze for t>1 **)*)
(*Do[*)
(*	(** which points are active? TODO: Keep list of active indices, so no need to recompute **)*)
(*	{lastTrajectoryPositionsPlus,trajectoryIndicesPlus}=If[#!={},#[[1]]\[Transpose],{{},{}}]&@Reap[Do[If[xPlus[[t-1,i]]!=-1,Sow[{{xPlus[[t-1,i]],yPlus[[t-1,i]]},i}];];,{i,nTrajectoriesMaxPlus}]][[2]];*)
(*	currentDefectsPlus=defectsPlus[[t]];*)
(*	{nLastPlus,nCurrentPlus}=Length/@{lastTrajectoryPositionsPlus,currentDefectsPlus};*)
(*	*)
(*	{lastTrajectoryPositionsMinus,trajectoryIndicesMinus}=If[#!={},#[[1]]\[Transpose],{{},{}}]&@Reap[Do[If[xMinus[[t-1,i]]!=-1,Sow[{{xMinus[[t-1,i]],yMinus[[t-1,i]]},i}];];,{i,nTrajectoriesMaxMinus}]][[2]];*)
(*	currentDefectsMinus=defectsMinus[[t]];*)
(*	{nLastMinus,nCurrentMinus}=Length/@{lastTrajectoryPositionsMinus,currentDefectsMinus};*)
(**)
(*	(** connect current defects to nearby existing trajectories **)*)
(*	{closeMatchAssignmentsPlus,missingMatchIndicesTrajPlus,missingMatchIndicesDefectPlus}=*)
(*connectCloseDefects[nLastPlus,nCurrentPlus,If[t>2,xPlus[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],If[t>2,yPlus[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],trajectoryIndicesPlus,lastTrajectoryPositionsPlus,currentDefectsPlus,distanceThresh,{nx,ny}];*)
(*	{closeMatchAssignmentsMinus,missingMatchIndicesTrajMinus,missingMatchIndicesDefectMinus}=connectCloseDefects[nLastMinus,nCurrentMinus,If[t>2,xMinus[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],If[t>2,yMinus[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],trajectoryIndicesMinus,lastTrajectoryPositionsMinus,currentDefectsMinus,distanceThresh,{nx,ny}];*)
(*(*Print[1];*)*)
(**)
(*	(** sort out trajectories that ended via annihilation, boundary collision **)*)
(*{missingMatchIndicesTrajPlus,missingMatchIndicesTrajMinus}=*)
(*confirmTrajectoryEnd[missingMatchIndicesTrajPlus,lastTrajectoryPositionsPlus,missingMatchIndicesTrajMinus,lastTrajectoryPositionsMinus,pairThresh,{nx,ny}];*)
(*(*Print[2];*)	*)
(*	(** sort out defects that started via creation **)*)
(*	{missingMatchIndicesDefectPlus,newIndicesPlus,missingMatchIndicesDefectMinus,newIndicesMinus}=*)
(*confirmTrajectoryStart[missingMatchIndicesDefectPlus,missingMatchIndicesDefectMinus,currentDefectsPlus,currentDefectsMinus,pairThresh,{nx,ny}];*)
(*(*Print[3];*)*)
(*	(** care about boundary interactions **)*)
(*	{missingMatchIndicesTrajPlus2,missingMatchIndicesTrajMinus2,missingMatchIndicesDefectPlus2,newIndicesPlus2,missingMatchIndicesDefectMinus2,newIndicesMinus2}=*)
(*	neumannBoundaryChecker[missingMatchIndicesTrajPlus,missingMatchIndicesTrajMinus,lastTrajectoryPositionsPlus,lastTrajectoryPositionsMinus,missingMatchIndicesDefectPlus,missingMatchIndicesDefectMinus,currentDefectsPlus,currentDefectsMinus,newIndicesPlus,newIndicesMinus,periodicQ,{nx,ny}];*)
(*(*Print[4];*)*)
(*(*If[t\[GreaterEqual]tEnd-1,Print[(*missingMatchIndicesTrajPlus*)missingMatchIndicesDefectPlus," ",currentDefectsPlus," ",missingMatchIndicesDefectMinus," ",currentDefectsMinus];];*)*)
(**)
(*	(** connect remaining fast moving defects: Hungarian algorithm **)*)
(*	leftOverAssignmentsPlus=connectLeftOverDefects[missingMatchIndicesTrajPlus2,missingMatchIndicesDefectPlus2,lastTrajectoryPositionsPlus,currentDefectsPlus];*)
(*	leftOverAssignmentsMinus=connectLeftOverDefects[missingMatchIndicesTrajMinus2,missingMatchIndicesDefectMinus2,lastTrajectoryPositionsMinus,currentDefectsMinus];*)
(**)
(*	(** connect old trajectories to new defects **)*)
(*	{xPlus,yPlus}=assignDefectsToTrajectory[t,xPlus,yPlus,trajectoryIndicesPlus,currentDefectsPlus,closeMatchAssignmentsPlus,missingMatchIndicesTrajPlus2,missingMatchIndicesDefectPlus2,leftOverAssignmentsPlus];*)
(*	{xMinus,yMinus}=assignDefectsToTrajectory[t,xMinus,yMinus,trajectoryIndicesMinus,currentDefectsMinus,closeMatchAssignmentsMinus,missingMatchIndicesTrajMinus2,missingMatchIndicesDefectMinus2,leftOverAssignmentsMinus];*)
(*	*)
(*	(** start new trajectories with new defects **)*)
(*	{counterPlus,xPlus,yPlus,nTrajectoriesMaxPlus}=startNewTrajectory[newIndicesPlus2,counterPlus,nTrajectoriesMaxPlus,xPlus,yPlus,t,currentDefectsPlus,nTrajectoriesMax0,nTimes];*)
(*	{counterMinus,xMinus,yMinus,nTrajectoriesMaxMinus}=startNewTrajectory[newIndicesMinus2,counterMinus,nTrajectoriesMaxMinus,xMinus,yMinus,t,currentDefectsMinus,nTrajectoriesMax0,nTimes];*)
(**)
(*If[t>=tEnd-1,*)
(*Print[Riffle[{t,*)
(*nLastPlus,nCurrentPlus,Length/@{*)
(*lastTrajectoryPositionsPlus,currentDefectsPlus,closeMatchAssignmentsPlus,*)
(*missingMatchIndicesTrajPlus2,missingMatchIndicesDefectPlus2,*)
(*newIndicesPlus2,leftOverAssignmentsPlus},*)
(*nLastMinus,nCurrentMinus,Length/@{*)
(*lastTrajectoryPositionsMinus,currentDefectsMinus,closeMatchAssignmentsMinus,*)
(*missingMatchIndicesTrajMinus2,missingMatchIndicesDefectMinus2,*)
(*newIndicesMinus2,leftOverAssignmentsMinus}*)
(*}," "]];*)
(*];*)
(**)
(*,{t,2,tEnd}];*)
(**)
(*(** remove empty rows **)*)
(*xPlus=xPlus[[All,;;counterPlus]];*)
(*yPlus=yPlus[[All,;;counterPlus]];*)
(*xMinus=xMinus[[All,;;counterMinus]];*)
(*yMinus=yMinus[[All,;;counterMinus]];*)
(**)


(* ::Input:: *)
(*Manipulate[*)
(*Show[*)
(*ListPlot[{lastTrajectoryPositionsPlus[[closeMatchAssignmentsPlus[[i,1]]]]},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}}],*)
(*ListPlot[{currentDefectsPlus[[closeMatchAssignmentsPlus[[i,2]]]]},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}},PlotMarkers->{Graphics[Circle[]],Medium}]*)
(*]*)
(*,{i,1,Length[closeMatchAssignmentsPlus],1,Appearance->"Open"}]*)


(* ::Input:: *)
(*Manipulate[*)
(*Show[*)
(*ListPlot[{lastTrajectoryPositionsMinus[[closeMatchAssignmentsMinus[[i,1]]]]},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}}],*)
(*ListPlot[{currentDefectsMinus[[closeMatchAssignmentsMinus[[i,2]]]]},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}},PlotMarkers->{Graphics[Circle[]],Medium}]*)
(*]*)
(*,{i,1,Length[closeMatchAssignmentsMinus],1,Appearance->"Open"}]*)


(* ::Input:: *)
(*Grid[{{*)
(*ListPlot[{lastTrajectoryPositionsPlus,lastTrajectoryPositionsMinus},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}}],*)
(*ListPlot[{currentDefectsPlus,currentDefectsMinus},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}}]*)
(*}}]*)
(**)
(*Grid[{{*)
(*ListPlot[{lastTrajectoryPositionsPlus[[missingMatchIndicesTrajPlus2]],lastTrajectoryPositionsMinus[[missingMatchIndicesTrajMinus2]]},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}}],*)
(*ListPlot[{currentDefectsPlus[[missingMatchIndicesDefectPlus2]],currentDefectsMinus[[missingMatchIndicesDefectMinus2]]},AspectRatio->1,Frame->True,PlotRange->{{0,300},{0,300}}]*)
(*}}]*)


(* ::Input:: *)
(*Grid[{{*)
(*MatrixPlot[xPlus[[;;tEnd ,;;]],PlotRangePadding->None,AspectRatio->1,PlotLabel->Style["+",ColorData[97,2]]],*)
(*MatrixPlot[xMinus[[;;tEnd ,;;]],PlotRangePadding->None,AspectRatio->1,PlotLabel->Style["-",ColorData[97,4]]]*)
(*}}]*)


(* ::Subsection::Closed:: *)
(*initTracker*)


(* ::Text:: *)
(*x[[t,defectIndices]] = x-position*)
(*counter = counts defect number*)


initTracker[defects_,nTimes_,nTrajectoriesMax0_]:=Module[{x,y,counter,nTrajectoriesMax},

nTrajectoriesMax=nTrajectoriesMax0;
x=ConstantArray[-1,{nTimes,nTrajectoriesMax0}];
y=ConstantArray[-1,{nTimes,nTrajectoriesMax0}];

counter=Length[defects];
If[counter>0,
	{x[[1,;;counter]],y[[1,;;counter]]}=defects\[Transpose];
];

{counter,x,y,nTrajectoriesMax}
]


(* ::Subsection::Closed:: *)
(*minPosition2d*)


idx1To2[i_,ni_]:={Quotient[i-1,ni]+1,Mod[i-ni,ni,1]};
minPosition2d[field_]:=idx1To2[#,Dimensions[field][[2]]]&@Ordering[Flatten[field],1][[1]];


(* ::Subsection::Closed:: *)
(*connectCloseDefectsSingleStep*)


connectCloseDefectsSingleStep[nLast_,nCurrent_,xPast_,yPast_,trajIndices_,lastTrajectoryPositions_,currentDefects_,distanceThresh_,{nx_,ny_}]:=Module[
{dij,maxDomainSize,minpos,distance,vPast,vCurrent,consistentQ,lastIndices,currentIndices,closeMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect},

(** assign trajectories, find new/gone defects **)
If[nLast*nCurrent>0,

	(** find closest distances between trajectory points and defects to get unambiguous mapping **)
	dij=DistanceMatrix[lastTrajectoryPositions,currentDefects];
	maxDomainSize=Max[nx,ny];
	closeMatchAssignments=Pick@@Transpose[Table[
		minpos=minPosition2d[dij];
		distance=Extract[dij,minpos];
		(** check velocity consistency of matched assignments: direction must point in same half as previous velocity vector **)
		consistentQ=Which[
			(** immediately accept defect that moved very little **)
			distance<0.2distanceThresh,True,
			(** only accept defect that moved much, if velocity direction is similar to past ones **)
			0.2distanceThresh<distance<distanceThresh,
			(** if past value exists use it for the test, otherwise trajectory is new and thus test true by default **)
			If[xPast[[trajIndices[[minpos[[1]]]]]]!=-1,
				vPast=lastTrajectoryPositions[[minpos[[1]]]]-{xPast[[trajIndices[[minpos[[1]]]]]],yPast[[trajIndices[[minpos[[1]]]]]]};
				vCurrent=currentDefects[[minpos[[2]]]]-lastTrajectoryPositions[[minpos[[1]]]];
				vPast.vCurrent>0.0,
				True
			],
			(** (default case) if distance is too large, reject match **)
			True,False
		];
		dij[[minpos[[1]],All]]=2maxDomainSize;
		dij[[All,minpos[[2]]]]=2maxDomainSize;
		{minpos,consistentQ}
	,{i,Min[nLast,nCurrent]}]];
	
	(** preparation to find annihilated/created defects **)
	{lastIndices,currentIndices}=Range/@{nLast,nCurrent};                       (** indices in distance matrix dij **)
	
	(** went dark or boundary **)
	missingMatchIndicesTraj=Complement[lastIndices,closeMatchAssignments[[All,1]]];
	
	(** became bright or boundary **)
	missingMatchIndicesDefect=Complement[currentIndices,closeMatchAssignments[[All,2]]];
,
	(** either no trajs or no defects **)
	closeMatchAssignments={};
	{missingMatchIndicesTraj,missingMatchIndicesDefect}=If[nLast>0,{Range[nLast],{}},{{},Range[nCurrent]}];
];

{closeMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect}
]


(* ::Subsection::Closed:: *)
(*connectCloseDefectsHistory*)


(* ::Input:: *)
(*{historyMatchAssignments0,missingMatchIndicesTraj0,missingMatchIndicesDefect0}=connectCloseDefectsHistory[nPast,Length[missingMatchIndicesDefect],If[t>2,x[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],If[t>2,y[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],pastTrajectoryIndices,missingMatchIndicesDefect,pastTrajectoryPositions,currentDefects,2distanceThresh,{nx,ny}]*)


(* ::Subsubsection:: *)
(*debug*)


(* ::Subsubsection::Closed:: *)
(*code*)


connectCloseDefectsHistory[nLast_,nCurrent_,xPast_,yPast_,trajIndices_,defectIndices_,pastTrajectoryPositions_,currentDefects_,distanceThresh_,{nx_,ny_}]:=Module[
{dij,maxDomainSize,minpos,distance,vPast,vCurrent,consistentQ,lastIndices,currentIndices,closeMatchAssignments,
missingMatchIndicesTraj,missingMatchIndicesDefect},

(** assign trajectories **)
If[nLast*nCurrent>0,

	(** find closest distances between trajectory points and defects to get unambiguous mapping **)
	dij=DistanceMatrix[pastTrajectoryPositions,currentDefects[[defectIndices]]];
	maxDomainSize=Max[nx,ny];
	closeMatchAssignments=Pick@@Transpose[Table[
		minpos=minPosition2d[dij];
		distance=Extract[dij,minpos];
		(** check velocity consistency of matched assignments: direction must point in same half as previous velocity vector **)
		consistentQ=Which[
			(** immediately accept defect that moved very little **)
			distance<0.2distanceThresh,True,
			(** only accept defect that moved much, if velocity direction is similar to past ones **)
			(*0.2distanceThresh<distance<distanceThresh,
			(** if past value exists use it for the test, otherwise trajectory is new and thus test true by default **)
			(** TODO: this needs to be changed or removed! **)
			If[xPast\[LeftDoubleBracket]trajIndices\[LeftDoubleBracket]minpos\[LeftDoubleBracket]1\[RightDoubleBracket]\[RightDoubleBracket]\[RightDoubleBracket]\[NotEqual]-1,
				vPast=pastTrajectoryPositions\[LeftDoubleBracket]minpos\[LeftDoubleBracket]1\[RightDoubleBracket]\[RightDoubleBracket]-{xPast\[LeftDoubleBracket]trajIndices\[LeftDoubleBracket]minpos\[LeftDoubleBracket]1\[RightDoubleBracket]\[RightDoubleBracket]\[RightDoubleBracket],yPast\[LeftDoubleBracket]trajIndices\[LeftDoubleBracket]minpos\[LeftDoubleBracket]1\[RightDoubleBracket]\[RightDoubleBracket]\[RightDoubleBracket]};
				vCurrent=currentDefects\[LeftDoubleBracket]minpos\[LeftDoubleBracket]2\[RightDoubleBracket]\[RightDoubleBracket]-pastTrajectoryPositions\[LeftDoubleBracket]minpos\[LeftDoubleBracket]1\[RightDoubleBracket]\[RightDoubleBracket];
				vPast.vCurrent>0,
				True
			],*)
			(** (default case) if distance is too large, reject match **)
			True,False
		];
		dij[[minpos[[1]],All]]=2maxDomainSize;
		dij[[All,minpos[[2]]]]=2maxDomainSize;
		{minpos,consistentQ}
	,{i,Min[nLast,nCurrent]}]];
	
	(** appeared again: dark -> bright **)
	missingMatchIndicesDefect=Complement[defectIndices,defectIndices[[closeMatchAssignments[[All,2]]]]]; (** reduce number of missing defects **)
	closeMatchAssignments[[All,2]]=defectIndices[[closeMatchAssignments[[All,2]]]];                        (** update assignment map from missingDefectIndices to defectIndices **)
,
	(** either no trajs or no defects **)
	closeMatchAssignments={};
	missingMatchIndicesDefect=defectIndices;
];

{closeMatchAssignments,missingMatchIndicesDefect}
]


(* ::Input:: *)
(*Delete*)


(* ::Subsection::Closed:: *)
(*neumannBoundaryChecker*)


neumannBoundaryChecker[missingMatchIndicesTrajInput_,lastTrajectoryPositions_,missingMatchIndicesDefectInput_,currentDefects_,creationIndicesInput_,{nx_,ny_},fraction_:0.05]:=
Module[{notBoundaryList,missingMatchIndicesTraj=missingMatchIndicesTrajInput,missingMatchIndicesDefect=missingMatchIndicesDefectInput,creationIndices=creationIndicesInput},

(** check if non-matched trajectories died at the boundary **)
If[Length[missingMatchIndicesTraj]>0\[And]Length[missingMatchIndicesTraj]!=Length[missingMatchIndicesDefect],
	notBoundaryList=(!(#[[1]]<fraction nx\[Or]#[[1]]>(1-fraction)nx\[Or]#[[2]]<fraction ny\[Or]#[[2]]>(1-fraction)ny))&/@lastTrajectoryPositions[[missingMatchIndicesTraj]];
	missingMatchIndicesTraj=Pick[missingMatchIndicesTraj,notBoundaryList];
];

(** check if non-matched defects got created at the boundary **)
If[Length[missingMatchIndicesDefect]>0\[And]Length[missingMatchIndicesTraj]!=Length[missingMatchIndicesDefect],
	notBoundaryList=(!(#[[1]]<fraction nx\[Or]#[[1]]>(1-fraction)nx\[Or]#[[2]]<fraction ny\[Or]#[[2]]>(1-fraction)ny))&/@currentDefects[[missingMatchIndicesDefect]];
	creationIndices=Join[creationIndices,Pick[missingMatchIndicesDefect,Not/@notBoundaryList]];
	missingMatchIndicesDefect=Pick[missingMatchIndicesDefect,notBoundaryList];
];

{missingMatchIndicesTraj,missingMatchIndicesDefect,creationIndices}
]


(* ::Subsection::Closed:: *)
(*connectLeftOverDefects*)


connectLeftOverDefects[missingMatchIndicesTraj_,missingMatchIndicesDefect_,lastTrajectoryPositions_,currentDefects_,newDefectIndicesInput_]:=Module[
{dijRemains,g,assignments={},newDefectIndices=newDefectIndicesInput},
If[Length[missingMatchIndicesTraj]>0\[Or]Length[missingMatchIndicesDefect]>0,
	If[Length[missingMatchIndicesTraj]==Length[missingMatchIndicesDefect],
		dijRemains=DistanceMatrix[lastTrajectoryPositions[[missingMatchIndicesTraj]],currentDefects[[missingMatchIndicesDefect]]];
		g=CompleteGraph[{Length[missingMatchIndicesTraj],Length[missingMatchIndicesDefect]},EdgeWeight->-Flatten[dijRemains]];
		assignments=List@@@FindIndependentEdgeSet[g];
		assignments[[All,2]]=assignments[[All,2]]-Length[missingMatchIndicesTraj];
	,
		Print[Style["Warning: Non-matching number of trajs and defects!",Red]];
		newDefectIndices=missingMatchIndicesDefect;
	];
];

{assignments,newDefectIndices}
]


(* ::Subsection::Closed:: *)
(*assignDefectsToTrajectory*)


(* ::Input:: *)
(*{x0,y0}=assignDefectsToTrajectory[t,x,y,trajectoryIndices,pastTrajectoryIndices,pastTrajectoryPositions,currentDefects,closeMatchAssignments,historyMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect];*)


(* ::Subsubsection:: *)
(*debug*)


(* ::Input:: *)
(*historyMatchAssignments*)
(*blinkingDefectsIndices*)


(* ::Input:: *)
(*t=418;*)
(*trajectoryIndices*)
(*pastTrajectoryIndices*)
(*pastTrajectoryPositions*)
(*closeMatchAssignments*)
(*currentDefects*)
(**)
(*historyMatchAssignments*)
(*currentDefects[[historyMatchAssignments[[All,2]]]]*)
(*{x0,y0}=assignDefectsToTrajectory[t,x,y,trajectoryIndices,pastTrajectoryIndices,pastTrajectoryPositions,currentDefects,closeMatchAssignments,historyMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect];*)


(* ::Input:: *)
(*Map[( *)
(*{iTraj,iDefect}=#;*)
(*	iTrajPast=pastTrajectoryIndices[[iTraj]];*)
(*{xNow,yNow}=currentDefects[[iDefect]];*)
(*{x0[[t,iTrajPast]],y0[[t,iTrajPast]]}={xNow,yNow};*)
(*	*)
(*	(** linear interpolation of trajectory during black-outs **)*)
(*	*)
(*	(** 1. find out how many values are -1 between current and past point **)*)
(*	nMisses=FirstPosition[Reverse[x[[;;t-1,iTrajPast]]],x_/;x>0][[1]];*)
(*Print[nMisses];*)
(*	*)
(*	(** 2. get last xy-values that were not {-1,-1} **)*)
(*	{xPast,yPast}=pastTrajectoryPositions[[iTraj]];*)
(*Print[{xPast,yPast}];*)
(*	*)
(*	(** 3. linearly interpolate xy-positions **)*)
(*	{x0[[t-nMisses;;t-1,iTrajPast]],y0[[t-nMisses;;t-1,iTrajPast]]}=Table[({xNow,yNow}-{xPast,yPast})i/nMisses + {xPast,yPast},{i,0,nMisses}][[1;;-2]]\[Transpose];*)
(*Print[Table[i ({xNow,yNow}-{xPast,yPast})/nMisses + {xPast,yPast},{i,nMisses}][[1;;-2]]\[Transpose]];*)
(*	*)
(*)&,historyMatchAssignments];*)


(* ::Input:: *)
(*x[[t-nMisses;;t-1,iTrajPast]]*)


(* ::Input:: *)
(*{x0[[t-nMisses;;t-1,iTrajPast]],y0[[t-nMisses;;t-1,iTrajPast]]}=Table[i ({xNow,yNow}-{xPast,yPast})/nMisses + {xPast,yPast},{i,0,nMisses}][[1;;-2]]\[Transpose]*)


(* ::Input:: *)
(*x[[;;t,9]]*)
(*x0[[;;t,9]]*)


(* ::Subsubsection:: *)
(*code*)


assignDefectsToTrajectory[t_,xInput_,yInput_,trajectoryIndices_,pastTrajectoryIndices_,pastTrajectoryPositions_,
currentDefects_,closeMatchAssignments_,historyMatchAssignments_,missingMatchIndicesTraj_,missingMatchIndicesDefect_]:=Module[
{x=xInput,y=yInput,iTraj,iDefect,iTrajLast,iTrajPast,xNow,yNow,nMisses,xPast,yPast},

(** short spatial distances **)
Map[(
	{iTraj,iDefect}=#;
	iTrajLast=trajectoryIndices[[iTraj]];
	{x[[t,iTrajLast]],y[[t,iTrajLast]]}=currentDefects[[iDefect]];
)&,closeMatchAssignments];

(** history distances **)
Map[(
	{iTraj,iDefect}=#;
	iTrajPast=pastTrajectoryIndices[[iTraj]];
	{xNow,yNow}=currentDefects[[iDefect]];
	{x[[t,iTrajPast]],y[[t,iTrajPast]]}={xNow,yNow};
	
	(** linear interpolation of trajectory during black-outs **)
	
	(** 1. find out how many values are -1 between current and past point **)
	nMisses=FirstPosition[Reverse[x[[;;t-1,iTrajPast]]],x_/;x>0][[1]]-1;
	
	(** 2. get last xy-values that were not {-1,-1} **)
	{xPast,yPast}=pastTrajectoryPositions[[iTraj]];
	
	(** 3. linearly interpolate xy-positions **)
	{x[[t-nMisses;;t-1,iTrajPast]],y[[t-nMisses;;t-1,iTrajPast]]}=Table[({xNow,yNow}-{xPast,yPast})i/nMisses + {xPast,yPast},{i,0,nMisses}][[1;;-2]]\[Transpose];
	
)&,historyMatchAssignments];

(** suddenly droplet goes dark or merges \[Rule] keep old position of trajectory -> does not become inactive **)
(*Map[(
	iTraj=#;
	{x\[LeftDoubleBracket]t,trajectoryIndices\[LeftDoubleBracket]iTraj\[RightDoubleBracket]\[RightDoubleBracket],y\[LeftDoubleBracket]t,trajectoryIndices\[LeftDoubleBracket]iTraj\[RightDoubleBracket]\[RightDoubleBracket]}={x\[LeftDoubleBracket]t-1,trajectoryIndices\[LeftDoubleBracket]iTraj\[RightDoubleBracket]\[RightDoubleBracket],y\[LeftDoubleBracket]t-1,trajectoryIndices\[LeftDoubleBracket]iTraj\[RightDoubleBracket]\[RightDoubleBracket]};
)&,missingMatchIndicesTraj];*)

(** long distances **)
(*Map[(
	{iTraj,iDefect}=#;
	{x\[LeftDoubleBracket]t,trajectoryIndices\[LeftDoubleBracket]missingMatchIndicesTraj\[LeftDoubleBracket]iTraj\[RightDoubleBracket]\[RightDoubleBracket]\[RightDoubleBracket],y\[LeftDoubleBracket]t,trajectoryIndices\[LeftDoubleBracket]missingMatchIndicesTraj\[LeftDoubleBracket]iTraj\[RightDoubleBracket]\[RightDoubleBracket]\[RightDoubleBracket]}=currentDefects\[LeftDoubleBracket]missingMatchIndicesDefect\[LeftDoubleBracket]iDefect\[RightDoubleBracket]\[RightDoubleBracket];
)&,leftOverAssignments];*)

{x,y}
]


(* ::Subsection::Closed:: *)
(*startNewTrajectory*)


startNewTrajectory[newIndices_,counterInput_,nTrajectoriesMaxInput_,xInput_,yInput_,t_,currentDefects_,nTrajectoriesMax0_,nTimes_]:=Module[
{counter=counterInput,x=xInput,y=yInput,nTrajectoriesMax=nTrajectoriesMaxInput},

If[Length[newIndices]>0,
	Do[
		counter++;
		(** increase memory if running full **)
		If[counter>nTrajectoriesMax,
			nTrajectoriesMax+=nTrajectoriesMax0;
			x=Join[x,ConstantArray[-1,{nTimes,nTrajectoriesMax0}],2];
			y=Join[y,ConstantArray[-1,{nTimes,nTrajectoriesMax0}],2];
		];
	
		{x[[t,counter]],y[[t,counter]]}=currentDefects[[n]];
	,{n,newIndices}];
];

{counter,x,y,nTrajectoriesMax}
]


(* ::Subsection:: *)
(*defectTracker*)


(* ::Input:: *)
(*{xDefects,yDefects,goodTrajsQ}=defectTracker[positions[[1;;1000(*865*)]],ImageDimensions[images[[1]]],distanceThresh];*)


(* ::Subsubsection::Closed:: *)
(*debug*)


(* ::Input:: *)
(*defects=positions;*)


(* ::Input:: *)
(*distanceThresh=40;*)
(*nTimes=Length[defects];*)
(*nTrajectoriesMax0=50;*)
(*{counter,x,y,nTrajectoriesMax}=initTracker[defects[[1]],nTimes,nTrajectoriesMax0];*)
(**)
(*t=2;*)
(*{lastTrajectoryPositions,trajectoryIndices}=If[#!={},#[[1]]\[Transpose],{{},{}}]&@Reap[Do[If[x[[t-1,i]]!=-1,Sow[{{x[[t-1,i]],y[[t-1,i]]},i}];];,{i,nTrajectoriesMax}]][[2]];*)
(*currentDefects=defects[[t]];*)
(*{nLast,nCurrent}=Length/@{lastTrajectoryPositions,currentDefects};*)
(*{closeMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect}=connectCloseDefects[nLast,nCurrent,If[t>2,x[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],If[t>2,y[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],trajectoryIndices,lastTrajectoryPositions,currentDefects,distanceThresh,{nx,ny}];*)
(*newIndices={};*)
(*{missingMatchIndicesTraj,missingMatchIndicesDefect,newIndices}=neumannBoundaryChecker[missingMatchIndicesTraj,lastTrajectoryPositions,missingMatchIndicesDefect,currentDefects,newIndices,{nx,ny}];*)


(* ::Subsubsection:: *)
(*code*)


defectTracker[defectsInput_,{nx_,ny_},distanceThresh_:40,historyWindow_:20,boxLength_:20]:=Module[{
defects,nTimes,nTrajectoriesMax0,nTrajectoriesMax,x,y,counter,originalnDefects,
lastTrajectoryPositions,trajectoryIndices,inactiveIndices,currentDefects,nLast,nCurrent,nPast,
pastTrajectoryPositions,pastTrajectoryIndices,pastTrajectoryWindow,debugQ,
closeMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect,
newIndices,leftOverAssignments,badTrajsQ,goodTrajs,pxCutOff,historyMatchAssignments},

pxCutOff=Round[0.75boxLength]; (** 0.5 should be sufficient, but maybe droplet is not perfectly in center of box **)
defects=defectsInput;
badTrajsQ={};

(** allocate arrays and initialize first step t=1 **)
nTimes=Length[defects];
nTrajectoriesMax0=100;
{counter,x,y,nTrajectoriesMax}=initTracker[defects[[1]],nTimes,nTrajectoriesMax0];
originalnDefects=counter;


(** analyze for t>1 **)
Do[
	debugQ=False(*If[t>417,True,False]*);
	If[debugQ,Print[{t,counter,nTrajectoriesMax,Length[x[[t-1]]],Length[y[[t-1]]]}]];
	If[debugQ,Print["get active defects"];];
	(** which points are active? TODO: Keep list of active indices, so no need to recompute **)
	{lastTrajectoryPositions,trajectoryIndices}=If[#!={},#[[1]]\[Transpose],{{},{}}] &@ Reap[Do[If[x[[t-1,i]]!=-1,Sow[{{x[[t-1,i]],y[[t-1,i]]},i}];];,{i,nTrajectoriesMax}]][[2]];
	inactiveIndices=Complement[Range[nTrajectoriesMax],trajectoryIndices];
	{pastTrajectoryPositions,pastTrajectoryIndices}=If[#!={},#[[1]]\[Transpose],{{},{}}] &@ Reap[Do[
		pastTrajectoryWindow={x[[Max[t-historyWindow,1];;t-1,i]],y[[Max[t-historyWindow,1];;t-1,i]]}\[Transpose];
		If[MemberQ[pastTrajectoryWindow[[All,1]],_?Positive],
			Sow[{SelectFirst[Reverse[pastTrajectoryWindow],#[[1]]!=-1&],i}];
		];
	,{i,inactiveIndices}]][[2]];
	currentDefects=defects[[t]];
	
	(** filter out defects too close to the boundary, b/c the droplets are partially cut off **)
	currentDefects=Select[currentDefects,(pxCutOff<#[[1]]<nx-pxCutOff)\[And](pxCutOff<#[[2]]<ny-pxCutOff)&];
	{nLast,nPast,nCurrent}=Length/@{lastTrajectoryPositions,pastTrajectoryPositions,currentDefects};
	
	
	(** connect current defects to nearby existing trajectories **)
	If[debugQ,Print["connectCloseDefects[]"];];
	{closeMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect}=connectCloseDefectsSingleStep[nLast,nCurrent,If[t>2,x[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],If[t>2,y[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],trajectoryIndices,lastTrajectoryPositions,currentDefects,distanceThresh,{nx,ny}];
	If[debugQ,Print[Length[missingMatchIndicesDefect]," ",missingMatchIndicesDefect];];
	
	(** connect current defects to past nearby trajectories **)
	(*If[t>150,Abort[]];*)
	If[debugQ,Print["connectCloseDefectsHistory[]"];];
	{historyMatchAssignments,missingMatchIndicesDefect}=connectCloseDefectsHistory[nPast,Length[missingMatchIndicesDefect],If[t>2,x[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],If[t>2,y[[t-2]],ConstantArray[-1,nTrajectoriesMax0]],pastTrajectoryIndices,missingMatchIndicesDefect,pastTrajectoryPositions,currentDefects,2distanceThresh,{nx,ny}];
	If[debugQ,Print[Length[missingMatchIndicesDefect]," ",missingMatchIndicesDefect];];
	(*Print[{t,Length[historyMatchAssignments]}];*)
	(*historyMatchAssignments={};*)
	
	(** care about boundary interactions: birth and removal **)
	(*If[debugQ,Print["bulkBlinkChecker[]"];];*)
(*	newIndices={};
	{missingMatchIndicesTraj,missingMatchIndicesDefect,newIndices}=neumannBoundaryChecker[missingMatchIndicesTraj,lastTrajectoryPositions,missingMatchIndicesDefect,currentDefects,newIndices,{nx,ny}];
*)	
	
	(** capture bad trajectories **)
	AppendTo[badTrajsQ,Flatten@{missingMatchIndicesTraj}];
	
	(** connect old trajectories to new defects **)
	(*If[t>417,Abort[]];*)
	If[debugQ,Print["assignDefectsToTrajectory[]"];];
	{x,y}=assignDefectsToTrajectory[t,x,y,trajectoryIndices,pastTrajectoryIndices,pastTrajectoryPositions,currentDefects,closeMatchAssignments,historyMatchAssignments,missingMatchIndicesTraj,missingMatchIndicesDefect];
	
	(** start new trajectories with new defects **)
	If[debugQ,Print["startNewTrajectory[]"];];
	(** new ones appear in bulk medium (after merger/blinking) **)
	newIndices=missingMatchIndicesDefect;
	{counter,x,y,nTrajectoriesMax}=startNewTrajectory[newIndices,counter,nTrajectoriesMax,x,y,t,currentDefects,nTrajectoriesMax0,nTimes];
	
,{t,2,nTimes}];

(** remove empty rows **)
x=x[[All,;;counter]];
y=y[[All,;;counter]];

goodTrajs=Complement[Range[counter],DeleteDuplicates[Flatten[{badTrajsQ,Range[originalnDefects+1,counter]}]]];
{x,y,goodTrajs}
]


(* ::Section::Closed:: *)
(*calculateAvgPixelIntensity*)


(* ::Input:: *)
(*intensities=calculateAvgPixelIntensity[cameraImages,trajectories,boxLength,{nx,ny}]\[Transpose];*)


(* ::Text:: *)
(*Note: compiled version tries to get too much memory, so that mathematica crashes!*)


(* ::Subsubsection::Closed:: *)
(*compiler settings*)


If[($UserName=="Jan")\[And]($OperatingSystem=="Windows"),Needs["CCompilerDriver`GenericCCompiler`"];];


If[($UserName=="Jan")\[And]($OperatingSystem=="Windows")\[And]($MachineName=="fermion"),
$CCompiler={
"Compiler"->GenericCCompiler,
"CompilerInstallation"->"C:\\mingw-w64\\x86_64-5.3.0-win32-seh-rt_v4-rev0\\mingw64\\bin",
"CompilerName"->"x86_64-w64-mingw32-gcc.exe"
};
];


(* ::Subsubsection::Closed:: *)
(*compiled code*)


(* ::Input:: *)
(*Needs["CompiledFunctionTools`"]*)


(* ::Input:: *)
(*CompilePrint[calculateAvgPixelIntensityC]*)


calculateAvgPixelIntensityC=Compile[{{imageData,_Real,2},{trajectoriesFrame,_Real,2},{boxLength,_Integer},{nx,_Integer},{ny,_Integer}},
Module[{nDroplets,dropletIntensity,boxCorners,singleDropletImagePixels,nSaturatedPixels},

nDroplets=Length[trajectoriesFrame];

Table[
	If[trajectoriesFrame[[i,1]]!=-1,
		(** droplet exists **)
		boxCorners=Round[{{Max[#[[1]]-0.5boxLength,1],Min[#[[1]]+0.5boxLength,nx]},{Max[#[[2]]-0.5boxLength,1],Min[#[[2]]+0.5boxLength,ny]}}]&@trajectoriesFrame[[i]];
		singleDropletImagePixels=Flatten[imageData[[boxCorners[[2,1]];;boxCorners[[2,2]],boxCorners[[1,1]];;boxCorners[[1,2]]]]];
		
		nSaturatedPixels=Count[singleDropletImagePixels,u_/;u>0.99];
		{Mean[singleDropletImagePixels],nSaturatedPixels}
	,
		(** droplet does not exist **)
		{0.0,0}
	]
,{i,nDroplets}]

(** parallel analysis of frames **)
(*MapThread[(
	imageData=ImageData[#1,DataReversed\[Rule]True];
	trajectoriesFrame=#2;
	dropletIntensity=Table[
		If[trajectoriesFrame\[LeftDoubleBracket]i,1\[RightDoubleBracket]\[NotEqual]-1,
			(** droplet exists **)
			boxCorners=Round[{{Max[#\[LeftDoubleBracket]1\[RightDoubleBracket]-0.5boxLength,1],Min[#\[LeftDoubleBracket]1\[RightDoubleBracket]+0.5boxLength,nx]},{Max[#\[LeftDoubleBracket]2\[RightDoubleBracket]-0.5boxLength,1],Min[#\[LeftDoubleBracket]2\[RightDoubleBracket]+0.5boxLength,ny]}}]&@trajectoriesFrame\[LeftDoubleBracket]i\[RightDoubleBracket];
			Mean[Flatten@imageData\[LeftDoubleBracket]boxCorners\[LeftDoubleBracket]2,1\[RightDoubleBracket];;boxCorners\[LeftDoubleBracket]2,2\[RightDoubleBracket],boxCorners\[LeftDoubleBracket]1,1\[RightDoubleBracket];;boxCorners\[LeftDoubleBracket]1,2\[RightDoubleBracket]\[RightDoubleBracket]]
		,
			(** droplet does not exist **)
			0.0
		]
	,{i,nDroplets}];
dropletIntensity)&
,{cameraImages,trajectories}]*)
]
,CompilationTarget->"C", RuntimeAttributes->{Listable}, RuntimeOptions->"Speed", Parallelization->True];


(* ::Input:: *)
(*boxLength=20;*)
(*cameraImageData=ImageData[#,DataReversed->True]&/@dropletImages;*)
(*dropletIntensities=calculateAvgPixelIntensityC[cameraImageData,trajectories,boxLength,nx,ny];*)


(* ::Subsubsection::Closed:: *)
(*debug*)


(* ::Input:: *)
(*cameraImageData=ImageData[#,DataReversed->True]&/@dropletImages;*)
(*maxData=Max[Flatten[#]]&/@cameraImageData;*)
(*Max[maxData]*)
(*ListLinePlot[maxData]*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(*dropletIntensities=calculateAvgPixelIntensityC[cameraImageData,trajectories,boxLength,nx,ny];*)


(* ::Input:: *)
(*boxLength=20;*)
(*{intensities,nSaturatedPixels}=calculateAvgPixelIntensity[dropletImages[[;;]],trajectories,boxLength,{nx,ny},False];*)


(* ::Input:: *)
(*data=calculateAvgPixelIntensity[dropletImages[[;;]],trajectories,boxLength,{nx,ny},False];*)


(* ::Subsubsection:: *)
(*code*)


calculateAvgPixelIntensity[cameraImages_,trajectories_,boxLength_,{nx_,ny_},compiledQ_:False]:=Module[
{dropletIntensities,saturatedPixels,singleDropletImagePixels,nSaturatedPixels,cameraImageData,nDroplets,imageData,trajectoriesFrame,dropletIntensity,boxCorners},

If[compiledQ,
	cameraImageData=ImageData[#,DataReversed->True]&/@cameraImages;
	{dropletIntensities,saturatedPixels}=calculateAvgPixelIntensityC[cameraImageData,trajectories,boxLength,nx,ny];
,
	nDroplets=Dimensions[trajectories][[2]];
	
	(** parallel analysis of frames **)
 	dropletIntensities=MapThread[(
		imageData=ImageData[#1,DataReversed->True];
		trajectoriesFrame=#2;
		dropletIntensity=Table[
			If[trajectoriesFrame[[i,1]]!=-1,
				(** droplet exists **)
				boxCorners=Round[{{Max[#[[1]]-0.5boxLength,1],Min[#[[1]]+0.5boxLength,nx]},{Max[#[[2]]-0.5boxLength,1],Min[#[[2]]+0.5boxLength,ny]}}]&@trajectoriesFrame[[i]];
				singleDropletImagePixels=Flatten[imageData[[boxCorners[[2,1]];;boxCorners[[2,2]],boxCorners[[1,1]];;boxCorners[[1,2]]]]];
				nSaturatedPixels=Count[singleDropletImagePixels,u_/;u>0.99];
				{Mean[singleDropletImagePixels],nSaturatedPixels}
			,
				(** droplet does not exist **)
				{0.0,0}
			]
		,{i,nDroplets}];
	dropletIntensity)&
	,{cameraImages,trajectories}];
];

{dropletIntensities,saturatedPixels}
]


(* ::Chapter:: *)
(*droplet tracker*)


(* ::Section:: *)
(*get trajectories and intensities (single)*)


(* ::Subsubsection:: *)
(*code*)


(* ::Input:: *)
(*dayIndex=1;*)
(**)
(*(*movieFile="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Videos\\Activity videos\\Young_full_frame_raw.mp4";*)
(*movieFile="D:\\Videos of Bacteria Days 2-5\\Day 2.avi";*)*)
(*movieFile="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Videos\\Activity videos\\Day "<>ToString[dayIndex]<>".avi"*)
(*Print[AbsoluteTiming[*)
(*images0=Import[movieFile,{"AVI","ImageList"}];*)
(*images=images0[[;;]];*)
(*dropletImages=ColorConvert[#,"Grayscale"]&/@images;*)
(*][[1]],"\[ThinSpace]s"];*)
(*{nx,ny}=ImageDimensions[images0[[1]]];*)
(*Print["Number of frames: ",Length[images0]];*)


(* ::Input:: *)
(*pi=0;*)
(*Print[Overlay[{ProgressIndicator[Dynamic[pi],{0,1}],Dynamic[ToString@(NumberForm[pi*100,{4,1}])<>" %"]},Alignment->"Center"]];*)
(*counter=0;*)
(**)
(*Print[AbsoluteTiming[*)
(*{sizes,positions,trackedDropletImages}=Table[*)
(*foundDropletsImage=MorphologicalComponents[Dilation[dropletImage,3],0.3,Method->(*"Connected"*)"BoundingBox"];*)
(*{sizesFrame,positionsFrame}=ComponentMeasurements[foundDropletsImage,{"Count","Centroid"}][[All,2]]\[Transpose];*)
(*trackedDropletImage=ImageCompose[dropletImage,{Colorize[foundDropletsImage],0.5}];*)
(*pi=N[++counter/Length[images]];*)
(*{sizesFrame,positionsFrame,trackedDropletImage}*)
(*,{dropletImage,dropletImages}]\[Transpose];*)
(*][[1]],"\[ThinSpace]s"];*)


(* ::Input:: *)
(*distanceThresh=30;*)
(*historyThresh=40;*)
(*Print[AbsoluteTiming[*)
(*{xDefects,yDefects,goodTrajsQ}=defectTracker[positions,{nx,ny},distanceThresh,historyThresh];*)
(*trajectories=Transpose[{xDefects,yDefects},{3,1,2}];  (** timeIndex, dropletIndex, {x,y} **)*)
(*Export[FileNameJoin[{NotebookDirectory[],"trajectories_"<>ToString[dayIndex]<>".hdf5"}],trajectories];*)
(*][[1]],"\[ThinSpace]s"];*)


(* ::Input:: *)
(*goodTrajsQ=Pick[goodTrajsQ,#>0.01&/@(StandardDeviation/@intensities[[goodTrajsQ]])];*)


(* ::Input:: *)
(*boxLength=20;*)
(*Print[AbsoluteTiming[*)
(*intensities=calculateAvgPixelIntensity[dropletImages[[;;]],trajectories,boxLength,{nx,ny}]\[Transpose];*)
(*Export[FileNameJoin[{NotebookDirectory[],"intensities_"<>ToString[dayIndex]<>".hdf5"}],intensities];*)
(*][[1]],"\[ThinSpace]s"];*)


(* ::Input:: *)
(*lengthThresh=If[Length[images]>2000,2000,800];*)
(*{starts,ends}=Transpose[*)
(*{FirstPosition[#,x_/;x>0][[1]],*)
(*Length[trajectories]-FirstPosition[Reverse@#,x_/;x>0][[1]]+1*)
(*}&/@(trajectories\[Transpose][[All,All,1]])];*)
(*cleanTrajectories=MapThread[#1[[#2;;#3]]&,{trajectories\[Transpose],starts,ends}];*)
(*cleanIntensities=MapThread[#1[[#2;;#3]]&,{intensities,starts,ends}];*)
(*plotOps={Frame->True,FrameLabel->{"x","y"},AspectRatio->ny/nx,PlotRange->{{1,nx},{1,ny}},PlotRangePadding->None,FrameStyle->Directive[Black,14],ImageSize->{Automatic,200}};*)
(*nAll=Length[cleanTrajectories];*)
(*goodTrajsList=(Length[#]>lengthThresh)&/@cleanTrajectories;*)
(*goodTrajectories=Pick[cleanTrajectories,goodTrajsList];*)
(*goodIntensities=Pick[cleanIntensities,goodTrajsList];*)
(*nGoodOnes=Length[goodTrajectories];*)
(*nBadOnes=nAll-nGoodOnes;*)
(*p1=ListLinePlot[cleanTrajectories,Evaluate[plotOps],PlotLabel->"all: "<>ToString@nAll];*)
(*p2=ListLinePlot[If[Length[#]<lengthThresh,#,Nothing]&/@cleanTrajectories,Evaluate[plotOps],PlotLabel->"bad: "<>ToString@nBadOnes];*)
(*p3=ListLinePlot[goodTrajectories,Evaluate[plotOps],PlotLabel->"good (length>"<>ToString[lengthThresh]<>" frames): "<>ToString@nGoodOnes];*)
(*plot=Grid[{{p1,p2,p3}}]*)
(*Export[FileNameJoin[{$HomeDirectory,"Desktop","output","trackedDroplets_"<>ToString[dayIndex]<>".png"}],plot]*)
(**)
(*ListLinePlot[#,Frame->True,PlotRange->{{1,Length[images0]},{0,0.4}}]&/@goodIntensities;*)
(*intensityParts=Flatten[Partition[#,lengthThresh]&/@goodIntensities,1];*)
(*ListLinePlot[intensityParts,Frame->True,PlotRange->{{1,lengthThresh},{0,0.4}},FrameLabel->{"frame index","intensity i (a.u.)"}]*)


(* ::Input:: *)
(*windowingQ=True;*)
(*dt=0.0333;*)
(*nPaddedSamples=2lengthThresh;*)
(**)
(*powerSpectralDensities=calculateTemporalFreqSpectrum[dt,#,windowingQ,nPaddedSamples][[{1,2}]]\[Transpose]&/@intensityParts;*)
(**)
(*freqs=powerSpectralDensities[[1,All,1]];*)
(*spectra=powerSpectralDensities[[All,All,2]];*)
(*maxSpectra=Max[spectra];*)
(*normSpectra=spectra/maxSpectra;*)
(*normMeanSpectrum=Mean[normSpectra];*)
(**)
(*(** avg normalized spectrum **)*)
(*normIndividualSpectra=#/Max[#]&/@powerSpectralDensities[[All,All,2]];*)
(*meanNormIndividualSpectra=Mean[normIndividualSpectra];*)
(**)
(*(** perform fits to individual spectra **)*)
(*fMax=2.0;*)
(*indexStart=2;*)
(*fMaxIndex=FirstPosition[freqs,_?(#>=fMax&)][[1]];*)
(*iNormFits=NonlinearModelFit[{freqs,#}\[Transpose][[indexStart;;fMaxIndex]],{(amp/( 1+(xx-x0)^2/bb^2))^2,x0>0},{{amp,Max[#[[indexStart;;]]]},{bb,0.01},{x0,0.01}},xx]&/@normIndividualSpectra;*)
(*widths=#["BestFitParameters"][[2,2]]&/@iNormFits;*)
(*peakPos=#["BestFitParameters"][[3,2]]&/@iNormFits;*)
(*{meanWidth,stdWidth}={Mean[#],StandardDeviation[#]}&@widths;*)
(*{meanPeakPos,stdPeakPos}={Mean[#],StandardDeviation[#]}&@peakPos;*)
(**)
(*Do[*)
(*plot=Grid[{{*)
(*ListPlot[{Range[lengthThresh]dt,intensityParts[[i]]}\[Transpose],Joined->True,PlotRange->{0,0.31},Frame->True,FrameLabel->{"time t (s)","intensity"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->None,AspectRatio->1],*)
(*ListLogPlot[{freqs,normSpectra[[i]]}\[Transpose][[2;;]],Joined->True,PlotRange->{10^-10,1},Frame->True,FrameLabel->{"frequency f (Hz)","norm. PSD"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->None,AspectRatio->1]*)
(*}}];*)
(*Export[FileNameJoin[{NotebookDirectory[],"output","intensity_spectrum_day_"<>ToString[dayIndex]<>"_dataSetIndex_"<>ToString[i]<>".png"}],plot];*)
(*,{i,Length[intensityParts]}];*)


(* ::Input:: *)
(*(** ugly hack :/ **)*)
(*psdTicks=Table[If[exponent!=0,{exponent,ScientificForm[10.0^exponent,NumberFormat->(Superscript[10,#3]&)]},{0,"\!\(\*SuperscriptBox[\(10\), \(0\)]\)"}],{exponent,-24,0,6}];*)
(*psdTicks2={#[[1]],""}&/@psdTicks;*)
(*fMax=15;*)
(*spectraPlot=Show[*)
(*ListLogPlot[{freqs,#}\[Transpose][[2;;]]&/@normSpectra,PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Directive[Gray,Opacity[0.5]]],*)
(*ListLogPlot[{freqs,normMeanSpectrum}\[Transpose][[2;;]],PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Black],*)
(*Frame->True,FrameLabel->{"Frequency f (Hz)","Norm. PSD (a.u.)"},FrameStyle->Directive[Black,14,AbsoluteThickness[2]],PlotRangePadding->None,FrameTicks->{{psdTicks,psdTicks2},{Automatic,Automatic}},AspectRatio->1*)
(*]*)
(*Export[FileNameJoin[{NotebookDirectory[],"output","spectraPlot_"<>ToString[dayIndex]<>".png"}],spectraPlot];*)
(**)
(*fMax=1;*)
(*spectraPlot=Show[*)
(*ListLogPlot[{freqs,#}\[Transpose][[2;;]]&/@normSpectra,PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Directive[Gray,Opacity[0.5]]],*)
(*ListLogPlot[{freqs,normMeanSpectrum}\[Transpose][[2;;]],PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Black],*)
(*Frame->True,FrameLabel->{"Frequency f (Hz)","Norm. PSD (a.u.)"},FrameStyle->Directive[Black,14,AbsoluteThickness[2]],PlotRangePadding->None,FrameTicks->{{psdTicks,psdTicks2},{Automatic,Automatic}},AspectRatio->1*)
(*]*)
(*Export[FileNameJoin[{NotebookDirectory[],"output","spectraPlot_zoomIn_"<>ToString[dayIndex]<>".png"}],spectraPlot];*)


(* ::Subsubsection::Closed:: *)
(*memory killer for droplet recognition*)


(* ::Input:: *)
(*(** kills memory :( **)*)
(*Print[AbsoluteTiming[*)
(*dropletImages=ColorConvert[#,"Grayscale"]&/@images;*)
(*foundDropletsImages=MorphologicalComponents[Dilation[#,3],0.3,Method->(*"Connected"*)"BoundingBox"]&/@dropletImages;*)
(*{sizes,positions}=(ComponentMeasurements[#,{"Count","Centroid"}][[All,2]]&/@foundDropletsImages)\[Transpose];*)
(*trackedDropletImages=MapThread[ImageCompose[#1,{Colorize[#2],0.5}]&,{dropletImages,foundDropletsImages}];*)
(*][[1]],"\[ThinSpace]s"];*)


(* ::Subsubsection::Closed:: *)
(*check single image*)


(* ::Input:: *)
(*image=Image[CompressedData["*)
(*1:eJzsvXu0belVFxg0yb1nf9/ar/O8r6q6VamqVCqPSqVSVB4khJDwMCQQSAgR*)
(*MDzSPEUkDJUetijQCgiNQA9thiI2ig7FZviMikLzCKJt26OHo7ulW1GH3T3g*)
(*D1EHEoZNGNzej3PW/fZ8/Obv+9Y6955buXOsVO5Zaz5+8zfn9609z9p7n5tf*)
(*+nve/V/8the84AUfurz6z7u/5Pe/5Ru+4Uu+6XPnqx/e83Uf+qqv+LoPfvln*)
(*fN03fvArPvgNz33pb1+d/OhK97954QtesP53HkPSRiZQVgq8MvbQED307Dn3*)
(*ojAmF1O6rgOXwNVsUZ3OhAldpWxGNM17ndC57pOx6ph2RfPjBdJ8Yv8h7FqH*)
(*Zk2BSdXyMU0aCBcEeuu9TAf0iQdmSHuQtgwGpuex27AiZSMxPjX/IaqkZAgt*)
(*2m3/IzApmyFsHrL0GqrO1BQTklYIKQVot05qwYDQaUAf4tRwIkwUhjeS5NpC*)
(*aOl2ZVqIODNbHd367DTLo0tZHjlPz3xXYWhIoZeeB2aZ1C4fM5BJvtlL/aWJ*)
(*/5KSrDWjnGs2dp4EHsOQKjB1TLs7hjBMaqPQgqPjonuce4XQhjyeUQQjNwFU*)
(*FdfMbnupiivMYZijqcz3gFfi4QVi2saEPQp7F0SYfV6XpmrRkcqlDkN7rxM6*)
(*N1sL+PSaTZz3Ola3NwMGICcxA4cCj7ccGPZAah5s7B+IiKLxlwoepBCM55ZE*)
(*aJaexACK0sAzwGwWMVT2+MeEmAVqK42G1P8ITDzwE0JAjpoWxpvINCQQsAqE*)
(*NDd/NPUFIYx/s+JeFWqzaFPGNa2lUUs4qZ2eXM9oq0nNGNOmekzbHOtJbXMw*)
(*GEi0Zr7lj+ZCAPXylg9PoMl86b+8qmGbwHAgsG8IfSY1k5ZaDNrK5JaUnh+s*)
(*41Ww9AAEe8YsYXJAUQCN5ySguJgQkIunbGaHqSCFoSupW5XGhh16VR5eLL4r*)
(*qkwusnSR2GZpxUNOkxUPp0cVD8wCNFcB2S0NdRTNKTBoh/q8WFBk03qGHn6e*)
(*B+ywBOMthwxv+mn3lj2cbUY0gQwhDWAa3PaGZulJDKAuoIUAbJIH7DZbDU9K*)
(*FZN8nwgwiVg+2ASIh7nBYVIbWgOlQMgaaeRhXcgKlg7NlD3SankoCazSZ7o9*)
(*00wKCe+nt+c1PaOBMe1iTGp5t17aA792agWvl/7q3t4e39WZ2zdMTZyaSSyP*)
(*QRua3JIiCufpeBWcOLXGdReePX4wLQyBDIYRRRTF/NHEg7uFibK9BBjjhWGs*)
(*RKsr7lWh9OyZDK9X2Dw6CmNyYYW5ofTKaTudpS5vjtU/0iSLSY2nIlyDujdC*)
(*2nudEIl2aFoJh143AsCeMGBIWkjqdFCwBHp9PKlhGFpHx/Kch7kkeO9gfGIw*)
(*Qof0nIdNap6IlMP2YBjWRQk5JBnwAoUcakggC+GNiaJNasnHsfR5U0plrz2a*)
(*JSTZoyIsDe5n07/ZV2UsrVaakykw7OFaYGXvqmlr3UHNI+/OaHl7mGNa/wZI*)
(*clLjpc9FVArvP96PwFYbCiZJzrGC2C5wpUjPHld4IWi3WBPsPL0as1l5foZ7*)
(*ADgZW48fXBoR3bQaktfAdAQeTBFuLSZKyBgvTDWbYyW1Ehui81UgcxyRvTss*)
(*p7/ZU2Lea9b3kM1otpnUpqsjrY5JN1kPa7nhsVqu30jDSvVqpFve4URtF7qf*)
(*wWoiM2WWSRVpwMRbKUITPVcl8Hjlwzl6HnR9GTY8nxgM2SGmc2ZX8TgJi9Iz*)
(*wKQGAGMAtZRiQnjq+D4h3e7+rum2yfZ8Lfl5vPumbuY7KQJ/mE6qvOWVpfSc*)
(*9+fNJg+jVJWgim3sGV+lHpzl7bsZc/kjdWyGNSZfXnQJwiWAvfVWe3t7E3Xf*)
(*NKsMdARIXJQhexffcoAW6/fbblJZLQFAu6fDSBo8qW2dNBuCxDHbpQePyXT2*)
(*LHXbb+ctADYo5eRCTmqhNDvHKWOiBlZB58ibXEDZuZv0n3HeiDm1nf7Obz2j*)
(*zXKe5zRPabaZ1LrJ7SdrdZtk1Wo1K5Ws/Zx0S3Zm2FRpd9MATlIxXJhXPbee*)
(*qzA7YIKJLTXJSW2gNPgn2fB8gjpqHT6Q6Vkbmhi8Jhcph+3BwO4vhV1tWvG0*)
(*V1HHlKbKrTepZfqli46CGahKFrcHyXCD6NbSIvT5hSDqGHKlg1ZF4dnmlZkl*)
(*YF4lxrTbo9n07ODHtHOd1PglALyFm5iuctgtYflM/w08MC0HdldvUguXuccY*)
(*1tT0epznO/7sSSCsYttLx/R5J/MiYXsC+gqQRjq5OFIWzlMYWDWeCtFFoyZa*)
(*K4k5Tt+6uDG4PZ1tNpXV/81Wx2w6n0/ni9lsPp3Nu9Wx/sDzrNu8J2N7i1jd*)
(*ZGa5m68mtZTXk9pkMp30j9VWhGyYMMPbuInewwVNzn4+ErEtGEJXGqHZt+Fu*)
(*MDzowCUgnJsOyaV6hxcRQ3gzQrzrYgymYXLuv82pMRhCkypCapUZMKRb/PZd*)
(*zH9t6auAYSarSGsQ3H46dIpuvqZylUkZlEm/FlLtEsZLwLsq3ouCJ7WKo+a7*)
(*H6sEd0LtEjAXbykhhrbFPny9kC1nJtgr1E5qvQ6zXrzo5aoRHsqkwiqfk5iJ*)
(*8/0AxGTvXGX0rcZLQZQ1XEEXSpJ6xSKuAjF50AuEpwKDGSVZzi01phXD2vpf*)
(*60ltNZDN1w/QZtM8n3WLxfTgYLE69g/my/3ZYtnNl91s0U0XXbeYdvNpnk3T*)
(*dHXMUjeb5PlkNaalWdq+B3J9dJO0Gta2kcRNxp7URO95yeJlWJqA6uPojLIX*)
(*HdeIiaL7UDjX/vVJnIIZHWALCfHc8jub0MeBQqnNxUTr8cbsOeIkrqbJGD5p*)
(*OsHEgvQ96sL2KzUb/Jtq5UmQr2Yb8wDI0Q51+kztyGQ1YCwaZ5VglqpSDlMD*)
(*0c1Vgw1NqrVzEIUBBnQ8Ze+ShpTlpJa9o+a+fXZPzfJxmk6KyY4hx2SYtPV6*)
(*STgxmQwJDzHwyZLntQ7YHzyfYBspfWKdMLqJBNjeGQGJVGWqfXoVCT1XMYnF*)
(*60NPx+wNgH+yu/o8bxdKknotIa6atHhFCR0OATNcdDr61zVbxc0xcY8udZtj*)
(*tcvfntTWT9Bmi8V8MZ+tx7R5d7A/OznZXx1Hx4vD4/nB0XR52M0Pp7OD1TGb*)
(*7s/yYprm0zSbTaazvTzbO53UZnnz3+gdHHJY052Mywf62fOJVwrj0PSslxIu*)
(*Io4CUqtqrbS772XrTV8aObNeQI6AcEy+ZxumidMPBdPO9Eki9hwSjI7eS6iA*)
(*qdCC6yhgg7qE2EwwmOfStoFtLcxDNJMlzD/OQiAUzDBsCB76quFkAQbvRzI7*)
(*L7Tg0IzeUEFRF+0f1Eic90oTls+EamLwUGXzb9xUDmXu4YCsKh+ZtZedadLQ*)
(*SyVyHQ5AYmBX5dgQyEzQ641oqdmuqqxItrHn4aGbJVkSKvepeToNdRxoUuW2*)
(*V8afsOu/y3S7n5BNfnclNd3HAXvY4RAww0Xn4k9q/pi2ntQm60lt/X6L1Q9p*)
(*+8XrmwdqK5kt5tPVmHZ0MD85WV69enByZXF4NL164+CBh49vPHx85cGjg2v7*)
(*y6vL+cmyO5in5WxvPt2bTi93m2Etr2a0sw+s5dkkT82jH9Z0dmXJvMWFV27y*)
(*b5pahNvQoeez1wyLHkYBqVW1VoKvxkUUQIvGDNIMCS9tq6pTKyGHDO0edUx7*)
(*NIDR0XvBVzFXJre4jgI2KI2XmgeM4bm09diuapWGSU2EIOsFyBfMMGx4YLCI*)
(*0Fn1pP6RzM7jOcENUKdv8uO5Lc1x4hqtSYuGLUxAjlohpH170rlTUzxUickG*)
(*Lh/pUPzoUWpGZ8CIQpvRMSQGodYB+kxRANsecmK1Ga6qrEi2sfPhoYcANgXo*)
(*l6l5DhvqiE1MMGG5Pbe9fvhdKOnjaVIzbbHDEEzp9vwI7Df8ESa1tJnUptP1*)
(*nLZYzGfrMW1/Mb1yvLx+7fD69YNr15dXrs8ff/mDT33iS5967mVPvObRB564*)
(*cfLIyfLGQXe8mOzPLs+nl1eT2nR2uZvv5flk/Wm17aRmj2nepJZ3b22hgGVr*)
(*Kov1rmORDkVTCc/DYYMdqaot+zS9qwm+vjIxV2XKIDTrMtxzHmNS89Js2HNI*)
(*MBpbKG3MJGcJmJo4VtjPXnSSw7I3dL2Gd2NSvQ14CIsFUi4597JooE53i+aQ*)
(*ZKAX80UC0wOmjoANah0C44XhQVQEM7Y6X/5ZLp2CaVXKnZnUem98+UJXvK3o*)
(*ZFAd3CdVbdzQ+XzRSVde+zHKDFcD1wJIAfhP1kviOyBhewjN5GwpTInb6tib*)
(*mODDWoftEU5qudhPwtQugqT6V03lJW2LHYZgSrejE1jmUv67elI7G9Y2z9Ry*)
(*2nyByPT0Ox7X73s83J9dPV7euHbw4IOHL33p9aeffelnv/ftX/a17//g13/x*)
(*e7/sc970jjc+8dzLTh67Or223DuYXpp3l+azy7P55en88tl7ICfJHdMaJjVR*)
(*R7x3YQ+9obnASYfClt8NmCggtaq27NNkeAh3JCFh9CpvIzovo2AOMe0ATKrf*)
(*c0gwGluKnqe0MZOcJaCzCIN6qWHPWLkM1P/brNfwnik9g4qbsMluARyKkw3U*)
(*mRiqmNE+7/qkFhIeikm4VwuvOsLEKw3Jc3a+dNQLDSRU1tR5eYUhACFAmOqY*)
(*EUWTYJwmSPxjeVL/2/PvsZS5DQ0rk51cZeWxDdjwshgSeghgs468JpDhdexN*)
(*TPBhrT0kfKHzx82klq2Chg6rII1OoMDZ+2+Z1DafVtt8Ti2nzVdPrUa1zRc/*)
(*5u1bH68eL25c33/45tFrX/v4Oz77zb/vD33N9/7Zb//+H/6u/+q7/8AXfM3n*)
(*P/c7XnfjlQ/NHji4fDh98bK7tJhdni8urSa1bnY5zfYmq3ltCoY1b1ILE+8F*)
(*9LBJuzbXjREuq1EKCqKUUPE6ZZCYaZp7UalgfKRicL5AgCbjEF8NOQR9BTAk*)
(*f4sAqWEwPELADBAzUybHEICXGvCsTbTPMlBpgjXbCMGATQxkt/Dl89TKH82g*)
(*AlVWTWhiECLKcS9OatjEy1pQPVEvotLg1wOlgE8KV/k3SRMKuHzYQ4nN6xaT*)
(*0kS8tvdCaz/DedBuq0Lw/sk6mspYBO0NUqYQkj9u6OECytcnopMyr+JqVtWx*)
(*N5mo51+CapyX6ZCRfH9Su8CTWmaLQkxqZ8/U+kmtOz3ycj49PphfOZrfuLZ8*)
(*9CUnb33ra77ia77gT/25P/7hn/3Rv/Vzf/VP/ZXv+9o//NWf8vlvvfnMS5aP*)
(*HKcri8uH88vL+aXNpHZpO6mlzaRW/0wNZC3WLOhhkyJRaHOleG6ZZc4LiFJC*)
(*xeuUgZGIFx4mDyOKXmKYzJBq7EFXGXOohaEl+VtE70QDw2B4hA3F8jJlcux1*)
(*vOheasCzNvHqqE1MzVpCBCcYsImB6Zaq8nnKZuFMGLwH4HMrd3JSy1YRPWBA*)
(*sImXdRm6vKRT88Dz4n1Ve5t/UA4N2ywNLmjy+wpQmuhJDcTFqZn6pJqJdqD/*)
(*qjqaylgE7Q0iSuMlpaMMDz1cQO1wUuJqWM2qOvYmWzVvUgvzau6N/Dyd1EB/*)
(*VjmsgsSEa3DOaAXD2vZzaruT2mZYW/0vLxfT48P5ydHs+rXFo4+evO3tz37t*)
(*7/3iH/jh7/7wz/zo3/yZv/In/9L3fu0f+qpPec+nPPyal+w/cpyvLPc2k9rl*)
(*+fz0mVo+r0mNFJMi0QPeStFLKUWvx2rFy6Vc4GG+TBubbW+uiPNb6WYi4e4H*)
(*4DHrHZAGxFRmkuo1Sz+h/wZpLpaXL86RbA8vNewZK4u4PBjhhEmtLBlw5XEI*)
(*SqP9Cx3TJwgXSq2tWTjvIxICvMgU6IhYnhPglpE+fd5kAvcEEwMPXgj4o1qj*)
(*+Bdieq5iPmQS9wMWTzMEZnLIGOqeZwwZ/1V1ZIg9J2FaXXf7hQJsloZsoVCn*)
(*qo69iQm79Ab2Up0RT06OPvd60US3lrhaVc3QYRUkJlyt596h53nzpzUzmtTO*)
(*xrRiUuv6v3s9m3arSW39xY/H89WkdvPmwXOve+Lz3vf2r/t9X/rN3/mNf+iP*)
(*f+NXf9OXv/OLf8dTn/LUlSeuzR84mBzPLy2nlxazS9vPqa2/VGTzOTX/ix/v*)
(*T2oYtrljMDl6ySb/zjhuf5LJ1oIvQeLliakDPrUVYMbrk9KPjoULykhzvUw+*)
(*cY6ZuLWZbJRogVusbBaoKneg75WGpCKpqRyURvj3kjKdh1QwCYJAySnc/UlN*)
(*sKejNMj9SU0Q66lhYPcntWYJi6KxmSfvImCzNGT/hDpVdexNTNjeJZEa423i*)
(*zHr5eTepedXnHeJiAQ9hrFopvSHP3KS2nZbWf0+ty6eT2mw2n02Xy9nhwWw1*)
(*qV27trjxwOLJV9x4w5tf8envesPnvP9tn/OFn/b2d7/5mbe++uZTDy0f2s9X*)
(*Z5cPuhfP84tn3aXp7FK3+UaRzdc/Pp8mNXIrGJiLqGxDjl6yDCFkXp4yiFK1*)
(*+jBCUTuAxOQQhK5V1v69oF75yCqbYhIOWBVcCRqZEmAdDzzwiZVNwF7iGDno*)
(*EIGfJBBXHyQrFHRZMQYASX+2dEjhvO8cAw69HDUJtTnC9WG0UJWJmaDoB6/Q*)
(*fBa9XNhJTfShhw04bCBEr6MGbkN9c5WFhPD+c2UdGWJNnoc0tukt7a5ZkMVY*)
(*oRtAMqUh2yZUq6pjbwLA4wT53ggnNX693EVJaiMFV0smeYfMijY91BrWiu88*)
(*oUnt7C9frx3ks0lt2k1n629/nM9n++tJbX5yvLh6dXH12uyBhxYPP3r4+Muv*)
(*vezpB1/+zMOPv/rmQ09eP7i5n0+6vYN8aZFeNE0v7rpL3fRSnp1Oas+vdz+S*)
(*W8HAXNLuXa8hR5Bvtn4DU5sa0Pc8mJSGgbyIonalN/NlqibNi16lnK0aeUG9*)
(*8pFVNiWrlxC4iKYyUw7s1qOuB09Sp5V1XC/xELmpLDxjwNqbiV8HEspAoVTD*)
(*eWlCcuu3AHmFw92IXXlsl7HC2rUh7NujKimdoOiH5N8UeKp7uScmNa/JgcMG*)
(*TnQUEb3KCZ8XQwjpv9Qh68gQa/JcaxV6S7trFmQxVugGkExpyIYJNavq2JtM*)
(*1CTF1Mt0W1Xl/HEwqU24mw6jjD2cE4FmgXZBtkxq3eZ7+uez2WKxHtaODmbH*)
(*x7OTk9nxle74andyfXrywPzKg8vjB5YH1xfT426yTJfn6dIsv7jLqzHt8npM*)
(*m++lzQO1NJtMRv7uR7KB8SooF5EuK+iWhjLV5pJ273oNOXqBkprU+twbNjqP*)
(*OlIaGBP+zfTNOVSTNsqqL5EIfaZwmnxGGRAS0iuuljTiijBV8/B7tmbKyWmn*)
(*NkhZ8cNrhmz3qeFkS/2wo3JBoxkaJ5utYS2c2kRSoQAkafdVnxmI6WrsNpRM*)
(*rCmzaqaH/kfPKsTP8K+d13pIqutytCFjJCSHJmlV4GtLwzBgXvWoDgEzeVXV*)
(*kSHWo6LKinSoeT7X0MKtF5qnPRXth0sZVrOqjqV++LfPPAZMn0LT85ybJrXO*)
(*EtJ2oOjWAldDokwTsg20hyqrKlnRK1D1P/bV88a0sw+p5Z1Jrfyo2qybz/Ji*)
(*nveX3eHh7Oh4erg5Do67/aNucdhNlzkv0mSWJ7Nubzq93E33uvmkW0zyov+z*)
(*15tJrVsf9yc1Lpc+CrM3kvuSUNaTWuZ2ObGXmtQxUkUUwKBd3VuTmnCFlU0Y*)
(*ybrPhtSJoGFRmMJ5+D1bM2VTDUQEeKrAC03Atmg/kYW29TqkCi2fQq6/C4uk*)
(*QgFIkr8zaCqq6iJMgHjhwow8DwIDWUdeTJxVngVy70dMl06z1yHZ06FJ8Hxp*)
(*PM9MXC8dBjDvn6wjQ6xHRZUV6VA3zLmGnsC1rHXI0pDtx/SSRgu8Tc7GtFKq*)
(*SMAYgMNcP6mZN4iLM6kB0a5055jKuCtScX8ZMdNSyknNyQhPanlbn/Vzte7s*)
(*OPM87fI0p2mXVvPacjnd358u96f7B+tjsexm83z6h9jWjqabz6PNVzNaystJ*)
(*Xqa0WE9qk82kNun27uVJDbQK9s9rmrD1JS9H0NKlE/MSbuBSx4RqrghTmCgM*)
(*w70VLo1Hrwm71DeVPfGKAhRMwMCbZ2LCxmiFH/Okdp6jViHZ0BG1iRdiXPHS*)
(*EUwCQy8LM1mTkCpsGHC6/as5JGFEr4IhfuHBS9AkDbOhDTFF+ozXjbg5TQxV*)
(*deTFw1llbgrOotTRddFcMV2Bo3v4Gf+Yc9AS3smqOjJJeeyZhoBYUNAqrqqk*)
(*B3negXTEkBaG9uTvDLXVrMXQKzdMaiQPI05qDTeIcUVw6y1PfcZjSYsZlKkg*)
(*Q2Ct9PTCLk1wUjt9gNad/Ws7pp052TxnW3VC2uvyZDWszed5th7ZZvv78/li*)
(*2q2muDTZKK1GrX5SWw9rk+2YlmZpM6atfKz1cuccFVK1gYCSlduRLiLupRAh*)
(*7pkwqbR792Ry9Hq1TLPX11eZXDROkzrghKGrljTPSlc5hO0pT+CtEzce8GZG*)
(*B1UOyxRCraI3E+3BUDdR/RyWhoQ3RLzUBJOMrchCXzJzTGezFY9NSH9r3srZ*)
(*+yCm2/18qgTclEE5yG6s7THBc2jCt6IXRYAX0XUWpreqVTkcJ2+brLuAp497*)
(*1SwN3xV8D5iQ+CiAB3wywzXL8Ix1PEKwMlN6vhYNost3ToFERCZHvpdIwdVs*)
(*wJCsx2oj8jDuM7W7K3ijACcZV9ocrMFSh6wy4w2bOzkmfHiTWt4c3ekxWZ2e*)
(*TfPqmE7TfD5dLGaz+erVwCbm2lG3/h7J02Ft8838qxktTTemOU1aE3OSJfvf*)
(*o12wba4UEYWvjvBJJu21We8tzLFMZ6J2XXNn8IKaPPRRTFdkduCShw27xaUJ*)
(*GTD1ibaKRVRQINGAPZyaFoZDTSNJqQmYcaVzBGw05DiueGyQXJlUeMw35Agw*)
(*iJPprJ1W/9ajGR7WtNsMlwzOQjPAlMD0JnJnKhIyqQN5UUTHgro0o8Js6FWD*)
(*U9PZiaS0oVkpLzW8nzBNwgjwE3o28YuT+scydKkTEs7XUYcgE/diNXDVTOz5*)
(*RRHhmBzD6oQiegNXU5BAln4gDyKK1ydmF5UYBhJ1TwtmEhsynWb6H0mCSS2b*)
(*Xxe2nb7Wb2zM0/LoNse02x7ddPv+yPV7KCfp7P2Nabq3PtbP0dYP3NaP0yb5*)
(*bPQzjgIJlc8FntSETzKj7PeSWKRhjsm6seKdoTwD2E4DJrUwcQAP25o8ixei*)
(*IAQDpk1C/yJBL3T5mzRQI23eVpSkZBK94jINNRsMwwN7qTZH71KIxGRJJwIu*)
(*kQi1sqZ91R7pbFKbbWS+ke1c5o1sDEtmjbxuTOq1BJOj2au40xokRbtcVp1J*)
(*hhuOzYzOYNANFnZLfxJXqrTC1HlNoldBKMAPaD8yZe9qH5opIlNrsyLJ30VD*)
(*6rD/85A7EELEYnIMqxOKYJ40ATgZ2LVU8K1rXppsFgiT2j0h5pIhWeJNekNd*)
(*CE/Ilhhd5Dtw+jFt+6bG9YzW9cfpd0PuPoZbjfF7Ke+l03ltc+TJehDbvHPy*)
(*9Jh4x9m8RonJG+j/0INJe1Kve5ly593NvyEXzxuZY6hcu1eEbA/s2LB8gHaP*)
(*Z/ORAQObYbuKTNO/WXGPXu3W5EHXqK0ooMTJWREmBg82zhH0Eu6EhhxDJkNz*)
(*nEVZCK/oOIRZcWGezia1VcPPChHvgRSXyknNgwQSNLsxqReoVTmWMEzGhtQd*)
(*OxEF1WogOoON1wH0mia4Il5oTbuHRyiTsO+wJGcLEr1kKvT4z6mOXkSGNzPW*)
(*RSB8ROFz1D3cJhOu1n0UgNNrj4Zal1FAoNKhiXPyfJzUyLbRhrro2GR46563*)
(*6ElNfIqsH9a2XyS5ndDy2ZOwzZiWNpNa3ismtZS27590B7SBk1r/I+YTeAB1*)
(*TOp1Kc9nol8qJ3gfzNzOXNrW9pvnUOPxPA/s2KpNzLTV5y/+pJat+z6Ovv1l*)
(*Mt9UbUUxMfSA9ckqD2GOoJdSzU2TyRHjByGY9ejtLaHzUg3z3Gtub83lOFa+*)
(*y1GMab1CmC+zELydpzZHz5Cka6AIJH048TFAYBvWiNQB9JomuCJeaLK1eOWw*)
(*T85VkrO36DVIrlxco7HqCMBst3re/70r3s4Tcqh1Gj4aBuooasRvaLW1boPk*)
(*rejJ83FSS+qFB7Mhm8LEYoRsiXMX81s/8ulRTGqnV84eqPWTWr48yaNMaibJ*)
(*4oxZTdz8DO26PVjyuFKSXQRSM7GFyoyYeDyeQ/A4x7B8pmiehX/xKouEzbBd*)
(*xWGIHzNmujWpFk5ITa8cOousbluef8A2yAuQZjLTkJoG6Z3HIbwsTPBeFiG2*)
(*km2tI34XAcY08ZbIUkenTJbJ7Mak2gZWAD1T02rY1UDRhOt6YXhJ3TtADwAM*)
(*VYvdLJCHxDQ0/Qt9Br9Zx1Ek7MAyC2HS4DBMEytoDCHPAJIZi6dldKkqSpVP*)
(*nKNJuwbjAfN6QJxkGhvUHbcH3344RA9JBCo9P58mta0I3sZagKZhiu7UTNvc*)
(*OfG+n/H2ONWtv7y/n9Q201k/qa3GtPWkNhltUmNWClinntty+ZhbQW2t8+6S*)
(*DDcBfvnzCzxUZoTZuxqUQypAaskSwANmAy/DAcwZIYTgcodgGA99+/GxRFAT*)
(*cypuW7Wwh3BowmtIjUy/OcexUKXd3SOpuV58hSMe08xJTQxrZVJ87UQhknpx*)
(*FaZJsn1nJFmbVZiU2ZCCxlo2yI4yK8WsF0x7wxJL3D26SvhWTLv3iJJz0Z/b*)
(*q+CxC06BYaaqjnjFgX5jaBld9IoYxSfOEXOu1UzRJjoE4x/UPUftERaaCZHV*)
(*3UHgnNyf1GoWoDbkq0zW63wl2cNaP6Ztjmk6O4rPpp2+73FvjGdqPRt4wZZq*)
(*5ioAJsK/0Kmtdek8XN1VjRFudx7sNsEbTrMy6HCviEndakXhPGXARthLg/mT*)
(*yYrEh5Se6cO+/UJNEFeDTMVtqxb2EA5NbG2pMSk35zgQldcwfc9s1Tol5SxW*)
(*fhKtfLvj6tJiI/Mz0ZOal1cv5Utc0B5m4TCHYl2MXl9GkrNZhUl5XdrMBtlR*)
(*ZqWY9YKbvKEE51E43Ipmyr2Jl3XoEKfA5FhbR91mGAxPy+jSL9JxfeIcw4qU*)
(*ap6YhItuYfyDupfOwSVAAh9C4yk935/UNNV87UpNfX+8CLLz3Y/WpNY/UNvo*)
(*nH58bfM31KZ7clIb53NqgnCvk83S4Boxq7Wh1to/b4Jdhdsdr8wIs3eRykCY*)
(*TL3yaQBmBUWVScDDCQzxM+3hEcIYeqGHSIIv8Eq1sTgENR03L42ZydHsw1Ew*)
(*eK70mCYmte1ENleyOJP+zErfvBOlYj8ssxOfATFLU9uloqP6M6O3LiNh0/L1*)
(*5Tccz4RsQhOkdutVasjuNNCE9Kn5BymX/aPBeOZ8iZk02+roJduWxTmJiXMU*)
(*nx4hDNsTnyvMNu6W0j/WIQWwV7vWtEnp9v6kZq4mJopopHtgUsv59hfnl8eZ*)
(*bv+mx8nOlz3KSW3T3xP8rY/30DM1BkOqeWjCCEhN5Ih5qBJm7/LIKW31ecCS*)
(*Cd5j24sO6kJmNwqBHn6TJe+qR4iHX1h5OeKgWBMU5Tw4NAkJcTaI2SSMCVma*)
(*TPBcOgxz1F+/3z84W+7KopByTBPP1PqIqdgPw9II/OBqmG9WuyhP3SgSNi0f*)
(*XfdSQzuFTWgC9qgzDUEfVhF+HqUxOfRYEldBCw0pMZNmWx21VR9IBGWyOCch*)
(*OWzw6REC2B7SpWG3lCYAZ6147JGeBWYT5+R5PalV1XqICVbjfY4o/c1aTmq+*)
(*bB+4TTKY0YpJbdI+qeXot2RC09sKPLd4tSbnZVgq9kyt3CsA5SrxVrfOsUxn*)
(*oHhsm87F2/6FLWhsTZHGz8CoWoYgO5LtKg5NwSx5DsUTjdDWDA1SBrQIDkM1*)
(*EoyZrGaJTKRKtAcdNPRg5uIZMjyDHMXmrCe1lWwntf2NHGxk++9+XgOfUxOJ*)
(*lBmZn+vRCBO3xDQhJWlm+kntruchZjd6Pcyn1sBGaVgLWBfFrBRIRDc2Ru5F*)
(*YfRDMcnHZQqbs8qwNs2GOpoI+0AiKMlAswCSef5rw4H2KM97+5XnAbgtcwE1*)
(*TWPvPM3tkZ0NU+Cc3J/UxjABOrjxzknK6Ywc03I5qZ0d5YBW/Hj699Sel5Oa*)
(*qJRuDFMYej0G8HZXQsLKjJhoPedgUsMM6JM6hFc+Rkd4xtnxbFdxaMpkdwPR*)
(*V02SzUkN2HrRvZQBLYJDrGbSCKjw1CbWyxUviyoxnYigIRVeLqahmRTjtr8k*)
(*NuryO0PK90BuJ7XVjHa4ke2wtp3U9DeK5GKZlP/QhfDaW4AHV71kNWk6/bS7*)
(*u2K3OgSv7Cxluz/J1BrYKA1rAeuiaCc4C1F6hkCGE9N/KJr5sEZhc1YZ1qbZ*)
(*UEcTYRmrDMqT0CYm+eLS6OFwh9SWA9iaDQaipNadB2PWJNTagvZ+3k9qtSYN*)
(*UUKdEVsiFPMjD4xhMalNz47bY1rx4+YX1/JzavafwDYnNXI19creVmAqh6s1*)
(*OTunJ0IttGKoztzOXHoLcZICSAvBpOK2gjkMo3g6uMTaf+KWmJlgyBXgAeiL*)
(*M56m+WdiUtON20xcRDRpERxiNVyjMhDmxIREQg2xeZ5LDLwHkYKpzLSf519/*)
(*ME1Pat3mL1+vZrHVXHZQiDemderPWJi0AwVNoCgik6PJSelBq2EYJmaMRNeI*)
(*XEqec+Gtlg29ajwTE5jnnOcElAboMzx7YDzx6m7WQp/xgpp1JGnhqSPriGkx*)
(*dfhGrRWmCucdzgzqcSiuAofAM3BeKoPahfU14fXOeVvTpCzK/UlNmDRECXWq*)
(*wAwRc0zj3/04WT8vK4e1/vnaNHVgUtvLH6+TmumBKNQFmtR4MKnYNjGHoDS4*)
(*fLjE2n/ilpiZYMgV4CFZpWd8lp7128/S7o0JVwQnXoYzOdEchpqgRmUsjxaz*)
(*grVoQ3hJrXdRmtDcrILpNtXv8L2OfoimRTxWW01n+2eyndT6L4QU+7zXeGYK*)
(*oRqfoKBFOxRtgFciRstQLWpELiUvhPDGIDEBhCYmMJAgSQsuDfAPdDAYT7y6*)
(*m7UwT3pBPc8D09RIwjoCWjwdvlFrpY8LuDqPiEyBMGl8a5lxvaIIWtq6wsPc*)
(*O+cNTZOyKPcnNaay2Ir0zDtvEDCjVU1q6zc37jxWOz36SW1yOqn1z9HWR56s*)
(*Dz2s3d1JzaRdO/Ss9NIjNyiiXO5Nvzzf3DAN/RbmWDpMzt0zjItT027DvDSH*)
(*gJCqSjGlT/4LBsCGB8brOu9HJoo4b+4GuCilN02LZsDE4IE0MQC1UDxymKJj*)
(*W50aWCCh6KdpYFjrv1pk+6m0/uNp4u+seWMaXnEl7LCIIVfJ2Rm8uMziMiMy*)
(*JGNIGD+AjXGSGLBJyIanickRSEIyawlnRJDsYeuvkqUZApgxCUsfvsQCUcyK*)
(*jys69B0IykDyCDHFK4TpFvdJqYzrRfaShhcamr3t1ejjfFIzm4GMEpq0eR4i*)
(*XfFFIv0/mDEt336mlie7n1bbHun03Y/rh26bR2qT7XQmjgsyqWW/QNqh7gEt*)
(*VfsPxfauWzPckJ6ptQ1zLJlM0YufMIpXPsyk9q859OKadQ85wbSUhAhsgAoP*)
(*jNl1ZlcwhIe10BziwonUtIkZLsSpMZCwPZAmjUzdsXnithEGp/41mv4KkfIP*)
(*qJU65Z9X65xPIjP4hWZ5BtCCidJsA07M0uAyNfSGBynEbwYyMYd4TAxYn2HD*)
(*1MT8CCQhn7r0w0WQLALplMnSaMy1kMKi4NLfn9TaIHm024vT6hPPLXZeKjeU*)
(*DKPtnQ80KTO95yY1Zk0xVSi9Mcpmw/DKGEatnIvPtdv1pHb6Xf3rI0+Kv712*)
(*OsdtnqmtKEuTPX3k9XTWH9sxLb6/gxy1gGVuKnse+KUNkA8UgUGHG1TQMw/Y*)
(*lQCDAZOEmDo5WpsgolAoz5gcmp7NuocY+JtCyIDpc/seSMGPF4Lc/3NNFwGc*)
(*YQo6ihfRPK/RNtzjRGhQL6/uIrpXAmHCtJOZfrf7ZY96UhOfOxO/duvHt5Cc*)
(*rFYcEK9GHu0hzx4n2IkuqwaGcepwwn92lkkPSQMQyEFjMNRhk+TctnBqpGfN*)
(*OQikM9VVEJdITWAFhOxkBpJZnZC6pHoJW9WmNlxMzyJBEdREUgW4ypahDmTh*)
(*JW7+XUgzhHYelg+XOO+2kJl1VY6lTpkg/wa5uy4kt0wzlA4ZZZN/z6SqGRrk*)
(*vNz2x+YLHjeHcfKUssneqns2A9pk59jYrSc1OKY1rNbbkYmbqYiiPZibWy2Y*)
(*gSIwiHDDimm8GsGphdssT4ipkK1bP8Ozvlqe8TjUbr26AwDefUFzpRvJI8e8*)
(*vwh+cJQeLXieIgDYLcJVE2ThXfVCeFBFjTBgL1zpQUtJtYcEVFljYNQ0YHHJ*)
(*fLjW7X6pCKAijBVWSiiTWQCezdb1/FSZaA8kIcJ/f14nlaIbUwmbx5AHL8Yw*)
(*Nca5yTmIlZzm8XCaaZrpYENPyE5Ou9uIhuQRztQl7FXPeXJejWi3Q8T0LEBi*)
(*PqsYFh6YApWlYUjj+dGTGuMZF52XBBueSXOiOqpM/J6b1Jgq42IJZbJquluY*)
(*EjBt2SCjt5n2P1GspNPZbTuNFTyYx9Yy+jVObY7Jue0CHVKqyAT4m6M3VFO3*)
(*bvmj+EfYq9qWhGQWJTzJN0BSdxkzNJNjSHtV+QRvzJkShv5+fi+6cNij1Vu3*)
(*YIyvo4lTY8YMgHAm1RqqqIvpMDmbAMCpMfNF99IxeQDceq70myH7qS18cGae*)
(*LK+21dELGnLruTVxMmybqABIABv0kkkdcMioNQvvPNVsp9laYroKpZ+qq8Jh*)
(*clal8FDbHlWS1C8rANthWQFdgPlREqlNWWeHUxYJhmzo0oc8Z6v9QtJKGGHu*)
(*3l8mDQk5DxHJYrXsjC1l1h/nk1ptaNGfYQnCSl1M8RZ4uFgEOZ6H5tKYWwTW*)
(*4QEP5Gdg9FpCzO30jm1EAolmMjwZ4tTZ4dCMw5B2sTeGVSuhTtQ9zoTUK9+B*)
(*SW0U6UMDBkgnZBTModlaGCeouHbI5OhhwKmZ0c9pUsMMew2Gs8DcktSFSMJM*)
(*qyTBm47utHHXzrlKqtn98j01qdV2GvijJxqSDhf2gEfXJFo7DbkMkSHLx2wP*)
(*JimG5zb/vQ7TFRdnUvPWAtDUKed7YVLzyEzRmxNytDMPgaQXBfbPVKoZzLm2*)
(*nOm8Yc/xPDTDNrcIrGOiMhcIyUkoJDO8MNE9kDyxQ2x1UcKTYYjk7OoCpKmj*)
(*UzMNtUna3RvDwgH2PEglbEwaDprv1KTGAGM8eFSU/yZXByDHxCl4ZrIDFcyV*)
(*C60HZmp6kxq4KZdBxT8wGMxPmAXmlncIKpXUegzpFZpCv7aOfFlDMCBKm1sd*)
(*RbQrg6rkGaecnIVmXvXqKGotPGjYJZLafjMxJHiL11FMJgUk88dzyoJPFsDI*)
(*xP4AKuWxcR7+tWevUkLGndR0jkMMGWVNS9p9NXJhJzWdYNr9xbVnG3ZaGyRz*)
(*aTAmI8LoPVc1T7N/cbJh9zA9NGNO6t4R6pio9FoISylk4r+eJJkx29sU7xJg*)
(*oLY3QGjGVhclPBn6T+q2aELF5TMTKdnTl3qEYFJjooC8krWZaNJCru7pSc0s*)
(*q3CbnObvC1R+9Mwk1uSZyS5szoaKmyZ4UsOzW225MT9hyphb3iGoVFvr6g4p*)
(*/QCWTEPTSRseL0qbWx2l5C10W9LOYEjwbkv2kqi1SQsTvUHSeJOaUO6Rmyai*)
(*1gOz4JPVsKu6GlTKk6p+9vyb9y/tFjCpn6jiHMnm56nTVgADMJmoBVLmeM9N*)
(*ariLsE5Va5lu+U5ONbtiG5i2XBj/5kophd89tFUzZsYPxiZSS2rvDUM38ODB*)
(*MENoTTMpDbj/sYSnr3rZMQgZWxOwPhn6Nz2ULIlCAD+altID5oEvXIhE6wuf*)
(*yRedDvYcYqgSj5YyHABvohInBSHZKpyIfhEmNYbqHpip3zajmRySSDy6wr7C*)
(*3PIcmt5qcwEOtSvPM2Aj7IEQT/njKG51FJEyg4rHIJhJNVtlsta1wIkrDoqC*)
(*21hgKNWYKAyk3rOpDyCdhzDZMaUXOlUdkq2e18B0CJM67xLmoZ/UmAoyqZk8*)
(*M4SYPHuhRbeUOuX5j8NJDfQqhlRbuHBpNEvtgho9erhqsAzBDNZCr8CHTgPu*)
(*oUN4YNZsCSlsv3ALwgpt+5JpawLWJ/nlI0rTs1Tb/EyOYUFx4apIa1u8zYZD*)
(*xKNFFwVTBxLB69r0f3cnNUZNgDcLd1cmNTNxsDmExPJsew6HtPRwh6NDEs7P*)
(*2y3TBniJ9aL7re9eLzoovSC2du8yi1J6AM1JBuIRmlsWuVmdnzCAmdLjbYqk*)
(*Ue8tum0E26T/ifoqfiHii5QZkDgdnmczOzPxsFtMDif3J7UaSLWFC5dGszA8*)
(*tLllOjmNIQNBAmJ1pUTVRAr6agOSWvGa02wzMyntAROLyff8kxIC1ifDNvBK*)
(*00cEHkSyHmaTw4baMZA8hIzyKIZDxKNFFwUwZpImCmS61UX0KmIWWgiZHWYY*)
(*OzSVJ9aaAlbhmJbrm0HoJ273E5wzJGNgjHJVagIh03XmeWyr9b0fdTi+tXjR*)
(*gBmTMLU7NqkxmJmm8tqpihCGSSaKvurxYwqgFPvBgDNR+h4ASZ1pbvKA+cE8*)
(*axOSk5CQMJ0qqkv/Ygng0CKpUqc8/3E4qTX3Id8PGkltOBJMWy6M27F8Cv/D*)
(*AYO10CswO1v5Y3m1DUmtMGu2hNTQfh5gjzTByZDUNGB9kl8+pYfM3VCSI6EH*)
(*L2vxTnhtFULia3FOhkPEo0VT6ql53d43Rtl1wi2u0XAqTORhc9bWmqSll3BM*)
(*q4Wh9RO3HgX+4e3HwG5gWIu5VM0sanPUTJomZumHd6zIpaooIbHnMamV5QhJ*)
(*u5NiVodZCGVeWif5S8wzNMFgqe3SkApdo7siAgmgtJYWnhAvCjYXHVKVrPZf*)
(*nr8/qfGQGpZJVckawIy7ps4PcO9/OOBwLeCF3GPAP9YiqRXQnFrTTKq5jZNz*)
(*ZzGlLTUNWJ/kl0/pIUfbuE7Ky9HE4KV8f1IDtc7RWjABewXSbs3aaQzjZofd*)
(*VlXBIwd7YO7Ltc0g9BOx72nOB7ZfWUceapVbIULNzKI2R82kaXJOHStyOaed*)
(*p+TQXJXeehc5ehUhO+FcRWcB8JANJkQssdLKU2aEoa6K3rLQo1ekqtaA55Al*)
(*HKUKA/CPkeslECZr+i/Pf7xNakMgVZVMIBkLhvZ8HjmODrj3PxxwuBaStTeG*)
(*65ovq05HiBcrbB7PYbY2qLFKb4YzI5LSA8Yn+eVTevCAha7MXDQGL2U9qZWG*)
(*vf+G5mGURzEcIh4tZLfgbgcnBbFCyEZqy47pqKpam5wAD8xNuWSDR1LSG3Lo*)
(*IWfCAQzjMsx78FIWNQpDl87DKiRnKxsoVYBN5Lx/frGDHE3Ohxd6iPTRG0rv*)
(*ITf58QjBNAJ6yQrWNkZVL/FSrjsSiS6K13jgl6ieZx5wFfMlwlratX+B4f6k*)
(*RkKqXSy1JWsAc045jg649z8ccLgWBDlggZc6fFl1OkwgLy4juemGUgs7795J*)
(*+Vx0atm5y1fhNz14wEJXZi4aw5Dy6fNMFeKCjWQ4RDxaNAM8XWYiJLE63BBC*)
(*TORk+RLxWt0kJywi86bHkE/TUCeOwdcix1IFtUo8D2Y6mopUuTvxzCfVqwM5*)
(*1G5Jh32abbCFEyCmW7McGAlfaNOEJKSh9CY2wI+XHabR47Y2u1Azq95gTHi3*)
(*yXlV5slEfX+IrhTfeBoMAxuQj/0zSEwT4V9guOcmNcx2crbi4ZCqSpYrd4wG*)
(*MLXOywbwFM4JsPA/ihPQJOKSNulXR1JPrAYi1H3CCBO0BDkEZ7JeNoThQvBp*)
(*d4PSUcTJEL/pwQMWuvKshGFbyp4OAwnojGvYLHwnkCKWocjLXKQ6a7PrmhNs*)
(*Lp8pHoFYTUg4qZVklv9uThwg1+Xjo3j4GYar2omJ4nElwjE5irIy+YoQ2H8o*)
(*bYDDdjX9T6IdOCxHL+ULTtG9IQavcCY2slEbSm96EKJhh4ZBo3P0mv555ape*)
(*It3iREzq9goxTYDPUQhpCyHaj+THaz+B4cJOauZ5hiuyarWQmrtiRBjNnvVy*)
(*GMVtlQx3rrPQDs3znmFST6wGgkz35qSmXYlwIfi0u0HpKOJkiN/04AELXXlW*)
(*unkaUvZ0GEhABxjWWjULk2mtiHWXd5fnBN7EPWBDODGzI8sHEAplnVcDTkGU*)
(*aMVat8lZYiKcV742IRkwQ+N28pyYKZvtxOdoVoFJmWwwRqoAZ79pGf+TaAcW*)
(*SIBbMaYluITD9hPhdFGq6tjc3ppVDTu0Ql3eBI9hQChXNT/j2curNwcV9FrL*)
(*Y5hHPhw28A8qjk2Ef4FhxD/Xct5C1qKhpb1AYWOMC/6cXJnptCFhPHjhkv8y*)
(*rDa6DuTp17ryimsCxpl6YuoAV2Ws5vYrExHhQHSQRYkk7667rDYZfTLEn5wb*)
(*rscek7iw1RhIWtLuLQbQEoLBmO/6L9DIHqgSnbtJb45YMk1MhfJHoDako7AO*)
(*TjwMpMNpn2RHAYfJWQtm+Xhv+rxWYDIN24kUbZWd3dUDnJt+c5vVBshXyvPm*)
(*wcP62VlZHlcCsL5Uy4PpxLQKeRaJmHWs4pDEH7rSsKvY8IitwuZlB6rfQFpb*)
(*Xp6tZ2IWOlW+IuI5rIWtwZOVEomYOZYn9UsCvhx3Upha8IXzPJgycOGMSGZz*)
(*XC1toYEHEMtkry0XHStUDq+WIEEgUpgtFxDSK6TWe1DIoYhSm0WJJN/BSU1T*)
(*MeF2RS9rTwfQ0qcDWAqzYyr4vJzUNPOaW3EJwCsV9L91vYCTIR2FFXAnh4F0*)
(*OK85SVfaocd8cm58oStBe3gVeGN6iRdgFfosETK0aJaqGiz0ZmIL9XMT7Wl3*)
(*ZYXlCAF7/oUJ5lmEM+vIc0gyyXhjshOGHqUhsVXZeZn2GBpIw2ogHdJEB9Ka*)
(*DDk8h1WwhX+m4sAq7TZziNm0vStSBWA4bNxgunC1bkchsyFuuOqrugKvNY8u*)
(*86/MexE95wC2KZgWwFWvIJIKw3kMCM2SFo+u1X9NYquSNbkKi0WKSNlkQJ8M*)
(*0Sa442n/Ye6CBGxVxacmhMmOURtrUtPvmiDf9J5214JJuxaPEO3NC6oVTH2h*)
(*pv+tAYSZVpmIcJgNTwGXoPefdzcocYb0I8CHPHtZmN68nQFk7QEoFSbqxuFt*)
(*mA1iVsrT9GghS1DWrrZewCHpClShV2DSZ+gyQ5D+MaSwWxLsVQGsikDTg6fA*)
(*ZIdNNJk8SNKtqdzWUfhqWEcMWNcL+AxLw2SXoDRzYiqb4ULb0gmg9E5KFfhR*)
(*YHsNE3Y7k8VwMmv96HRMcwZharpl98JPaiaSELYpgBOMX/gJ943em8eAMCxp*)
(*8eiajDepCTWdV5v03swfvZMM2tLWuyrYAA51iRvaw3NVC4Ys2biTWjma3cVJ*)
(*LUzcJEebiKBCp0TCsA1Swzg1Eo8NTwGXIO92o5ky6cejLvk8e1mYDr2dIQwH*)
(*ziRrUhtRSlShpklLbR09DtuE9wOq0CtUpU+y6vkXBTUTMZsKdwvuVQGsoRCA*)
(*QEAOjoL55Bus1q2pXBULs1FexXXEgJOSNq6qmNRBGfO2EDocY25CrTIcV2pz*)
(*B51QFdRrBtDtTBbDyWzwk9TrEKADPKemW3YvDZMa08CeMmMCLk2c+3hIvmeS*)
(*nBvKuJNamBdTKVNw0F4nO/1Wy6EOqq8y2EweMAZgrnWYoMAQK48io09qArzo*)
(*BEbMWCCKsAo9m36Y6LqvQnrDZDUMZglo/2Y4HqdwaOboMZngjdWjDqMyK6Kj*)
(*C594vXvkhxuF1gSdUJroFJh8AY2hnzYpczSjYB6ESRXbvUl5iZzUhGdBkWBS*)
(*YNB8AvJ7wRtj6MEkBJcV097cFSYbHv5euTYcQ2lYxwzbz7y0tysMXUPIHG4u*)
(*/GiHybm9bqVzZERgw4XHADqhNqK5cHQL8Q5H5LPWSVL3O6CDVxzYBvN4k1p2*)
(*7gUAmCdYH1z1domwiKGJuDrWpBamBjAwAhhOu82TrH6r5dAMKq6S8MziYgwY*)
(*Xq5vOWHFkDCWnNOkVqqJ6nhV81IW+iJor+Dpe7G8xvCSTaqvyAIBPCaM2uoL*)
(*zZKTKpxmph6xpr4J26MuZNuL5UFqELw5JMWkJyYkJlMmazPxcUUABtjC9M1c*)
(*TNsyI8ywl7hJtVAwc8S9CogK98beg6ejCcERMe3NLWGygduvISJpJTjxAJg8*)
(*6Et4TAt7ic9uRHPtRDhMcD8Bk9q9KAneUBr8YOFDkGv2nESkY2II+zzvriZT*)
(*01tr5RIzlyEO10esSrl5zYJNg2wtYS5MxNXmSc2DLbaC5hy16Cj9ybK1ktVv*)
(*IX6Qi6iX9l/mYppo8kMMPDxwFds2RGxA2zapmZTi9qhCqA29JvRMTCcM+DBf*)
(*0bpDpHfbRhfQZJLCkLRtcm6gGLNJHV5iYSDvDMlbiJnB73WC2SdkCTxIXnvw*)
(*nsnQAG0fDqcvlIGhKBxJrwmM4VlgaKOOfw3M/Karuf2Gl16zwSiTaHGX4gYr*)
(*o4AW0v5x/4Rs11KqsZUewI+eTnZWjZmgifP+pOb5wVJV9FqTEYXpgUz8uilH*)
(*KzpcUN4Sw+Fql1iOViXj0EukiiXTRFwdfVIbK0ctXjjR3ma/hfi9dMzQJlrx*)
(*Iy5NbUcxwMKrpU7/I/O7Mqaanni/jgt/b6wpxe3BIzQN8UIjaS9/9MADSBoD*)
(*k06YqUhHnwG2OOUGnCJTQbK3iEgkoILCBFfZO+NhMCFVKWv8XieYfUKWAENK*)
(*jjCeq6IzpcELoXTS/xvQghnGOXrdYkJqKEop/Cth5nUyU8GQujbRbDDKJFrc*)
(*ol7WIopQK7vIuwr6xwMTosKZmilntR8mq/FAjqbbcEXcn9Q8P1hqiz4QVbMr*)
(*pgcaooeClxVfKdzepjmmiCHQy4IH7JmIq9uJzGQvqQXOp0yagAJp52a4Mp00*)
(*3qSG6QX+MTkltwwGzaHJqmabz5Gc1JpXbsP2Xta0bM6JcxuqTdk01OFMSGYU*)
(*sxwavOc8O+u9lnASdoK9qm1NTXyVdCtscRW8+mrewmWenP3fC5rUQmNyrFLW*)
(*+L1OKFuFDAESFFc1gbVNGEafqNuNiRAshKTEIy2png/pBbRgNgSSZuru7qQ2*)
(*VtG1W0aZQQuqXHoTP5atwrSfeRK3EKaullivvcXJKh0s4Yq4P6l5frAMCTEE*)
(*W9iT2mR02KDfzKC4hwcGBZrYDxPRxM/g9EzE1XJS8xBWldvM1DTHNaryXLZW*)
(*svoNENKQFPCP+6Gq8chmywMKlO+pSW1g4arCeTrgatpdL2DDAXXUrVWVhTAx*)
(*YeNeNWkBhLThNHPU6fPLpGobSc4y1BHNypKQSFo8/KATcDc2y5D2I/3rhYBb*)
(*C6Rfikea7nmGXo8WzLZu7GYCmd2S2UuZPhwRNnbLKDNoQZWBczNNr/e85aZF*)
(*fFQNZMrUIoQ98W8ojE5JssCjPWhI9yc1zw+WURZUMzY+R6+LhI63aki3E25n*)
(*Nnu4Kn0tQA074cOZOfIg9dXeYT+pAYQ8YIDEvApqxHg2V4SZPsmhWV+hn9QG*)
(*KE6GbvnGK9P08OQBBdoKP6k1hGie1HQFh+QYhgO7k4bkXQUOyfbT/VyVhYlE*)
(*nwz96xIkZ3HVFsVkQ7OEywEcVvEsdHQ4/COGRNLi4Qed0Js08I+RkO3HNIDH*)
(*rY6iPZg62lVIWlI9z9Dr0YLZFpDMpMhKkRtmuJ0y7VHCHreXwg4ByqCpQJV7*)
(*6Xa/llCUz2u5XlnoJKdjdblBpgwPWl9n0SYhw+YloXN/UvP8hOSPCL4WG5+j*)
(*TgcsE3Cmyq2+Kn71MUqlALax1qxYpLWGWlk4PNdJLUQIdpXQ1mwAJhZTGlOE*)
(*K+8kA7uhAUwwowg5qbWtlyGTWnhyFCl7iSmft6bEeikZ49uP7GeQRcgSk6yZ*)
(*kbciqkSwYVJUtRt4tgzPQuf8egwIyN3rBL6japGQ7Rd2gtc/OoqJP9QhSUtq*)
(*f2boBbTgpsKaYXd16juXmGFtF8TmuB3x7MW2n18J+w53PsDjEcU0T96d1Pgq*)
(*b5XF50F00KT2ebwWRF4NnJiJV0lDaMHAOeV1VyQNeD1j+gnJHxF8LTa+QLrP*)
(*vU1MnwH+8Zr1OOzdjlIpgG2s3i7RTtSeALYIL4pwGE5qnv/hgmvkmZTCrwjN*)
(*IePfpDdZSyDBm52GzfMpTHRpGCcATD6fSY13DhCGJxv8ALVQGbSE/tHccMj2*)
(*C/vZs2VqxPgXTnTiPGkeTl6Yoph7iAfVAw/OnLfwDGgTgRmwhNWS84oUeAPR*)
(*xfn+R52s9pDU8tEhPOpME1MZOG+gJSxKGEhvleS22XvezCf90a2OzbCWw0mN*)
(*4SGQTbjbB9b1w6XoTho2j6ecdte+BwmYiIj9SYbDgQzrxKvE60Yguegrj2fN*)
(*yT0hY8Emi3JXmClLSWIwm58PRLoVtHscpt2bxTk12Ihrtqe6BCxOViUibPlJ*)
(*jXFeJQ25aGWytTSHQ2DjjmKi19ZLm9T6EYYlD/cnNdKzWXrtoexS3eFhLNxL*)
(*YRaM/0Tv3sK5dtKG01vCtevac5isicwsk05KnKmCWpuXbg9PE0Aaq8l1ozLK*)
(*THQTCehYskVB6ZnsSNikVbP/XlZ74/RMtlul+LHcP8uNdBN4HWu6Ol2Maczo*)
(*xDRGLDocHNZAUK8l9FWsmSsntdK/7qUyll65JJghPJuBSgx4b9GhTStvEXn9*)
(*nOpfGFwEGQs25jDckc5VyDUiTLwWwh6wpmap1PE4TMSk1pCj56HhqqnsLUBx*)
(*ssHhHZjUzNppYdaOzp1cEZquIengjgImDX3l6Te4Kg1LHsAwVRJOBhKohkxq*)
(*ZcTmTLFJFYdm6XWgskVLAsn2S7CXmnPpzzMpi6taX+RYC9Jcv54wFTRNkiVh*)
(*UuJMFdTavHR7eJoAEtO9YcWz2l1J2hnPZhSvLplelaD0oT6POam1zICp4iSf*)
(*7ZOroWx2JtNdKTdQvZeuT+Zuujm69THN5QFGpyQXe4us/U+LY5xJrdcR/8DN*)
(*U7rSjcEUMaklsKLajFgFZgjPXuICsN5YSBO8iDzkTOIXUMaCzTM8IvhmkLym*)
(*J7ytvqSbMwyaoxtBFUIMu+GqqRyuwQZs4F5vcsWH8CJ6Z0o8TKAycebOyGtW*)
(*pZN2X6gA/Kn+5UEVjLYG6A35Sa3K//ZH7ZwZ1rSfhmQZ/Sq3SQmAql8ekD1Q*)
(*SzgjOkecNU4wj9F+zIsKZk8Qyg3bCHOmSvTLnuFS4jHd1iaLNXnaeQxVwvj0*)
(*2MYmtVtx4gbSgJBkHZvxqpTVgDY/k3Jam50d25lt2sknbafnTye16eaYbY/b*)
(*k9p2ejKRnOFpFOOZWovDBJdegzexXjLdV6WJeU/UUUgwtVnkXSowYHMJCBon*)
(*UGpxDslrXOGRDGkqzw8W3lbrDEFY5QdAEv/woJqB+vNmd2HS2jj0vAEPDVdN*)
(*DOFNXxgCz72O6U37CZMNxbTVoRteYiX1osX0nKyxNMHdjIyO8WOcVWmGBDIO*)
(*teH2DJ6kevx8FBKSx6SWvHszMhWwW56NKsBmyj1j+uVB80s+4Vz/aDoMAWtD*)
(*L7r2j0OH2TFTDLNqhLJpgqOAdLAhhh1u2n0sxiemTgNmKiVOgtCYeaxGipdv*)
(*WIuql5qaPR4ST4VUtsairn8Q1m2OzdO0+e05bT2qzVfnNsf637PZYj5fzG+f*)
(*n3bTcrvuulNX3dqxeKY2td+guEIyWR8pNS7nIsed9z0m+lGdKKWovtkJZGlE*)
(*h/AJJvhqRHiocku2k6nM5Fh+b54nEyheXPI3rqZa1W9om4WswgURXQhQsrsN*)
(*9rYkZ2loqPqXG5Oa34+1YQs5HJ1Sb3GFUUgYZEuM3jBpd4szN4oqb5oWTRrY*)
(*kXSmPAYzyupM53zxVC2ToclYdQl31CpaeJAiQcGSpo65oXhFaUDeLGbhSmBh*)
(*1UwGhPP+R+DTY8l0JRx6BI5CpolH63irFSsD0gAhHhtV+YrCAeRh+mGOpFuv*)
(*+lpZaN7htdMHNWnRxAIBxFZlhyEJTeRwNZepYzNBbZ6CnY1pi17OJrLF7WO+*)
(*nM/3F8vVsZwvVj8utk/cNqPZFsD2yVp3OqnJtyOmzdEPU93myJNuPaatj/Un*)
(*3ZhMSdkQZ3edR93E+euurn/6HTXhqtGea5cnqZxqbgF8P/fslX/fTafMLKJk*)
(*/VIo3wuTWq7fru+i6EIkR+420h3xNjqAtuyl2oyqSPAIFC09LrHCJ7NmS8Pm*)
(*pLDOWEn1P3obBe9Q06JJ6/cxvS40vHLJMOlo/GNNanm3BLVXeTnXSS37Pdmf*)
(*18yb1IV7mlf6gfy05StKo3MMPZi9qt2CncHjRygIE7AqGfCMmGC0TtW+pzFr*)
(*2CEVmo2qZM3CmR4amEzEa06QBTiv1ZJzRx4uXuJ9UHyVEUBsVXZCEygHDsGY*)
(*djaprSaz5akslovFahxbjWbL2eaY3z72N8f234vZ6bO21XyWT7+QpN/Abz9Q*)
(*S2dj2vpYj2arGW26PibT9aS2d3tYYxYaKRvi7IXmUTe5AJNaUsIkm+mNgmyn*)
(*TOx+opMn98KkdgeGtXtFmEKMvvcOF2+jA+uFXKdeON4EK/M7RpWI7aLWf7jb*)
(*MDsSv6swSLL/wsDcVUjnE+vlkOlZbGJmUlUp6xCTaFLj8wJiapKeTWEmteFR*)
(*gOgcyR3MbJ7mpmLSZFzhSjW0lkjZZMB0q5WZBAGB2oOuHeOcVOaXj4bN8Gx6*)
(*AAriHyEM4JPsBGESdnWVW0/Zq5E4g2OFzvMukz1v2ArsDFXdwuwMfEclfOMQ*)
(*Y1oqxrTNpLaatRbzxf5KlsvNsdhfLA7Wx3x1HK7+O5/tz6frYzE9WM4OlvPV*)
(*sb+YLRez9QO2+fojatP1sfms2lqm/YfUUpquBrTVMdn8N03WT9lWY1rjpJao*)
(*Y0NcyyRFrtyq0nj9zCiHSKok6BNLk1wRe4UIw7S7YMO1o5Vz5TeDdcU7ckvl*)
(*+5NaL0whxu29UcTbOcFiIdepF443wcr8jlElaXcGadjE8FZD6pjrvSqL0lY7*)
(*0VtHbR3JfWyifuPkWdXyrNcXfqbGJOVJ1QLhJdx7h4fA4iUb7mBm82gPDbRj*)
(*HdJVm3mGu4pwkmDHauUQgMk/iG4K9swo593iNsAmqdYeSPAMEqBcCy/fqUnN*)
(*y9QrnxkOXMX+QeFKYrGEDCTn9YYZkXGb8L0STGqbf8+66XI1l+3vH+wvt8fh*)
(*/mJ1HB8sT9bH4mi5mtTywaI7XE6PD2bHh/Pjw8XRwezgYLa/P1ssp7N53hzd*)
(*dHdSK4a16WZSW/8jT2bd5mie1PSbOctjo2NMal5Za8tXWxrcq1iZAcNLol9g*)
(*MNmJFXFhJ7UGop734hXinBoPI+EDedjIBV6bVBUPWFk0/xB6S0NcRwawuVR1*)
(*UiTDbamFMMwoVf6BW1Ea/e5HYBVKdva95ExqfHZm6c2a4vLhEOJMuJ3WhqgS*)
(*kYVJndmHXvMIDyTtIZ8k2811ER68lE0GzHB279b/CgJE15XC7PErQjOQdndI*)
(*fLKWf7L0oedewSzfEPGKwmcRKoME+6RKHdx4GqemsTfHDoW5tzmQhJvYcDhM*)
(*rJlRcdl96+P2x/WkNt9Masv1mHZ0sFzPaIf7144Prh8fXDvav3IwP15OrxzO*)
(*rh0vrl9ZXr+6f/3a/rWryysni+Pj+cHhdLHMy2W3XE7n8277lZHdav7bHsWw*)
(*tjlmxaQ2rZvUiDHtbFgzKmV61tUMy5fhDgmqg31q/REXb++5tkWrVkQ/qZkp*)
(*k2tHK+f6Se3+2x2xeIVw95DzRNKwNMzWChd4bV4NKxe7akbiQcJ1ZFx5q1VH*)
(*ZBgOvXkhQlsdhfef/dLgTYmnJRTt+YJPanfGpFZK53ztvOYRHkjawzRJHppL*)
(*Izx4KZsMmLHMdsWQSk2PWI9nzHaVco72H5PhIcxjq7S7o2LYGHmzeEXhs8DK*)
(*OLuyf0Q7af2SBNO/J55D07MnIQMaW0gRg8pVM9/02E9qaTVKdYvZfP12x+Xm*)
(*Udrh8urxwY0rhw9eO3ro2uEDV/YfOFk8cGXx8AOHL7l59JKH18cjDx89/PDh*)
(*Qw8dXLs+Pzrp9g/T4fH08Hi2fzDdPGJbf2FkN52tj241qa2PlGarMW0zqc27*)
(*9SEntbQlJJjUyo+99YfzWI34Za+uJtPAog2Yioc+hbLZjQNHjwS3a1OzakXc*)
(*n9TuFfHanu/SsWDUBgWtZfqpWqfD4WFXzUg8SN6CqtrEBm5fXi8xhuVeh5tQ*)
(*KNeyB3x67AmehZgngegQ5zepedGrSNMkkJBqS0Mi8c5jBkpNzYPwECLv9TEt*)
(*JHUmVFLS7vMFveo1A2BnMBsmBG+2nxfdrBSghV8RXg8IV208e/AAeCacl+NY*)
(*CEPqqmKZ1cSpme3ENJ42wcLA1o0K1oLwULUz8JBs5eJR2iz3z7rW/95+68dm*)
(*Upvtbz6VdrS/ODlc3rhycPP60SM3jl/ywOq/B489ePjEI0eveOLqq1954+mn*)
(*HnjtMzefe+4lz73uJc88+/ATr7jy0EsWJ9fT8bV8dLXbP86LgzxbdtP5tJtt*)
(*Pr22iZk2k9rEmdRyP6lNNpPadtSyEt1cDYa1s0+rUcXVdQzZznCHHC4A8AWc*)
(*1EplMamBvMTWZCZbntGTGj+s3Z/XtHhtP2IbkzAagoLWMpWb1+mInIy4Y4g1*)
(*0nYPKiExCxzogF7Cnr0NgdEfpY6iKBq8F7q/pM9rNS/KPTSpkYbpPCe1IeUT*)
(*yqJ8JO0lmSEtDG+19JqGydlVhOcEl5jTNff2pCb4aaPagwfAA57DHIfDy4oQ*)
(*02ctG8naDIFyr9BnWtV4Zh21MLA1zzzhids5eVRBCuWkthqh1lPUbHOcPfTq*)
(*VpPadDlfDWuzo/35lcPFg1cPH33g+LEHj1968+iJhw+feuLqs69+8PXPPvzm*)
(*Nz76qW992Tvf+Zr3vf9N7//CN3/e+97wlre/7Klnrz30+PTqzXR47fLi+NLs*)
(*YG+2n6aL9QS4/u6Qbpo2k9pkdSRrUtvb/lW1NSl5sh3EsjOsbc9Odo9iuKsc*)
(*07K/zAHbWTUA2TakeICHzx2J20byLi28cjmphXmF1SlP1k5q+f6TtV0R9La1*)
(*/R0ANsSJ13XNOQK3bQi91xLYCrttuweVkIByjxBgTuqFAZOdIKQWtsbACE7Q*)
(*uylrqCFIJlM8qWH8ppUw9MiphR1a9Qq9Pk8O6dZMga9y3mVMeGDK2jsXPDP4*)
(*R9dJu+vRXD6aK7DEPGIxKrP9gENP2QSjW5pHIvrBC2qC9PBkbh3xHWKWz1MW*)
(*JqGEPIfwGAw81LDxPMGaJFrdqGAtCHOmNCJHoByUpnj342ooW01qi+lscTas*)
(*bY7tpLb+dsfD5ezKwfzm1YOXPnTy8keuPPX41Wdefv0Nr7n5ljc++umf+rJ3*)
(*v+vpL/nAJ3/DN3z2t/7XX/Id3/WV3/YdH/zaD73rs9/32qffcO2Rl8+PH7q8*)
(*uPKi6dGLZ4d702XK85TW09g0TeeTLp7U8nZSm6yfkeXTQxdold3e6XF7xjvj*)
(*p2arEZok1aI03qoko3tgTLfDR48Et2tTs0oZjGl5tyiA5/K8lz5Dxf3HaqUI*)
(*wpNzd7u7IJsFt1Nzjvw2QrryXks0R9d15DPtIYUYMOyk7j7hGteea2FrDKGE*)
(*PJh3z94c3WEJwDrT5knNhKQNQ9JI2KFJ6bmWnNAnxg9Y8tIpEQoaAXLB+Sg5*)
(*MuJVs6y1uXw0gWCJeWxjYGb7AYeesgmG3xNMz6nYgjDCsHl4zax4DpEnrv0A*)
(*DFNCnhl4IQZSk2k8huHSIYlfs2H2CTDnS8PUPSjN7rc+zs4mtbNj9eN6Utuf*)
(*d6vjcNFdOZjevLr/spsnTz9x/XVP3XzLc4++/c0vfcfbX/aedz/9FR/85G/5*)
(*lvf/6R/80N/88Hf+jz/3p37iI//df/+j3/wHvu0LPuM9r3zqjVevPb63uP7C*)
(*6fELp0eXu4OUlzktpmk+S7PVpDbnJ7XN87XbQ9rk9rFKbjULXN4em2HtTFvR*)
(*Q/Zg2B5haXR1qlyZYLxeuuCTGtPVvQlejOWP238PGdPuT2qaWH7Xalsjd1IA*)
(*sKpO5t22Iay6WTDRTZ9kpj0kBkO5y4XC4DcJaYYtAGi32FvyXy/VOuQzBZOa*)
(*V1PTIa4CII2BjYtYauZzWC9myrijGoTsk+YGGCJeNcu6m8tHEwiWmMcMBha2*)
(*qFm+kEOQFInEq695yW0LRzAknkkNL0xTZ8oIjg4ihtl5CtmaWMtLaXe7MDXL*)
(*EIJ/od9MGmPeUBrgVqe8e3nnWx+3j9XmxTO11aS2nHX76yMfzvPJMj10Zf7k*)
(*zePXvermp77hiXe89RXv/sxXve9zn/6ar3zLt33r5//IX/x9P/FT3/2//u9/*)
(*7hf/nx/7xV/6G//T//Hnf+jH/uBXf9M7PvVzX/boM/PjRy/Nr79oeuVyd5jS*)
(*fk7LbrKYpfl8Ml0/U0v+pHb2ObXi2KSxM6al1Zy2t7ce01bz2vbJWj/R5W3e*)
(*a5ua7tNtw1t5K4JvoaR24LKUWudemdQ8BhIh5urONcNX1Ux3j8rAjMzu9aqs*)
(*azQk9HkIAFbVyecnfW830I7dtt2DSkhMlFJBL9IG/CYhw2F7bjFCoFzlsCrT*)
(*cSc1nRRPGiaHz3REEdHLlJle9UTrkGXlNccVr5qTYgGanaBTBktME8XwHLao*)
(*Wb6QQ5AUiUTnYl4SJ7WhYANz6DGJCeebyuSQEdOtB2yg9D4FVyYhZhVCMavZ*)
(*RlrIQKrZc0i3pbJUU1/Of/sDa+tjNbh162Ftmvdn6WA+OZpdfvCoe/Lm4Vue*)
(*ffxdb3v157/ztV/03k/84Ade/21/5PN+5C98/T/+J9/3L/71X/ilf//XfvVj*)
(*/+DXb33kP/zWz/z8//lDf+KHv+53/u43PfUpVx54VXfwyOXZtcv5OE0O0mR/*)
(*PalN5rOzSW2eVwf47kc1qaWzMW7vbFLbjGnrf28fpW0T3ExqGz+bD7oBVjGB*)
(*ZOuaDZCcbaotnHn1wk5qnpBq3gLcni9zD3M0x7Tn37B2xyY1szpDQjcDBn0I*)
(*rlZ18vmJuWNgSOQ2opcMY1hCIvV1UNwPGpsZnWQDwC6tPLfYG+AB4CRJ8zyU*)
(*k1oJwxMvRwFDA1N9cdEnNQFVkIMheRwCTsg+ITtKhKjJ23Wie7JsQjNHYZjg*)
(*rd9rUQxMrwUQnfcPksJIhIluGxNGgwBIyRGgyRPeBh5EB+HapHcrcjcJCQun*)
(*i+hptpEWkpCIPcesI1NKA//ttz7uDmt5+5m16WI1qXV5OU0Hs8nhfO9kcfmR*)
(*q/OnH7v6aW948j2f+czvfPezX/kln/RN3/jpP/SDX/3TP/1Hf/Ff/9Av/cpf*)
(*/ne/9mMfvfV3f+PWz/x/t37+F37lr/6Vn/q23/0tn/X6dz308LOzw8cuz25c*)
(*zidpcpguL9OlRbd3NqnlzaTWhZPaKfp09qUh24+lTdbHDs+T0yw33/64mdS6*)
(*zZi2SrQzmWHYAzpC2VsRo4frpRw6am3zvTmpbZ0MH9OeZyPbwCwm1l/41VX2*)
(*qjMkdJvg9QKuVnXy+Ym5Y2BIzBbBr2gMiYmlg+J+0M5LTZMQBoMJO+3uvd7O*)
(*jB2CJeAVrhZwaS4mNU2sl4VwaBJrUl3VIVUtMa7gmobV9NhLZ7cSEYjxTPY8*)
(*yGJEKdvV6wTNodktpbLXbwCD53CIf9zeAInHQxkOLzFSAKSkhKelSrkKLXA7*)
(*ooCUzUth4UoxkwpJxqTxrVUVompF7Cjv/Nnrnb95vXnr43ZYy8tusj+bHC0m*)
(*V/cnL33w4LlXPvRZb3nVF7zr2S9+z7Mf+pq3ffe3v//v/91v/cVf/KF//x9/*)
(*7D9+9K//ykfXk9rHbv3sb936n3/pYz/+s7/wZ7/5+z/wti94xeOvPzx+PM0f*)
(*mHRX8mpSe/F878WztDefria15ExqqfjL17czzeWXPO5MajvD2obC0+/p345p*)
(*ado1TWpVgncefpHWQirHtIZ0Er27ppqtsrQilYWmbvVSLdMPEy/UpDZKyw1v*)
(*3WRJWdlSSPMBCQ3NAiM0rw7vZJOEKh5K2pldnYwypC49pNDcYwPcxXS+Gqrw*)
(*M4F3ak+5Sho4xDCAW89ck9Y7SfCVWNplxmshnQjJg4ecUR5XPPwlD15dkt91*)
(*W2/9/q/1QbLaLZlFM+3AJF2MSY1Prco/SMqLrituamar6A0CsuaLbpavlkMS*)
(*LYNzRMlW+wGdqqtlUmUITHJpK+qIzRkOvfYQJJjV3FHYjj3p9H2B3emTtfV/*)
(*15PabLpcH91y/dbHdLxM14/yk48cv/Hph9/51tWk9toPfP5r/8g3fc5f+uFv*)
(*+Kf/5L/95V/+y7/263/zox/78H/6zb/9n2/9/Y/d+sitW//Lv/3ohz/8j7/3*)
(*Q3/0vW9812OPPHtw9FjuJ7XLy3R5nvdm7qS2Hq+KSa3MrZzUbj92S5qK3Ukt*)
(*y0kt5C3kE/eMXhHYCoCp1QQ9ZkqqeYHB9zMAbypo/Mm5D/Zq5LR1cSY1k4G7*)
(*4mdrbm7gw+HddSmzM9Np6OTs3GiYOyCDE1Sh/FUMH6WtSXpIzG5gLmeSdvP+*)
(*JTBoNky6POowA2MtRjP3kLqSpVrSzH4DpHnJ8rXGfu6WlCn3wHB7eDx38Cs3*)
(*AQBS0zSppR2biKXErAjcsbVsaCRkUox/3N7AIckz3zxYzEBJSRUhuAPbYHs4*)
(*hzOgwfcp6PbjacEkgKSww1rCw3Aeh31QEKVXkFf7793Yvu49/ajadlKbLeez*)
(*zVf0d4fzdLLfPXgyfeXjV9787KPv/NRXfsG7XvMl73vme/7YF/30P/jOf/Uv*)
(*//yv/urf+M8f+zu/cevHf2M9pv3kb976h6tJ7V/8u7/2I3/nWz74+z/j6U99*)
(*4KFXL48eXU1qaTWppcM82e/2FtP1pNZN+UktZ+8Pp+XJbl5nObmTmmjv3n/5*)
(*oh20R9jP5VvIRFuS7c2H020PeswU3DweEiaWmbIw5HkWmeZRJzWcyIjSViPT*)
(*yRA/XjeOAu8OS3LEXE29CZ+y9lyex4tXeDDPh1UwJzVPwqBMprW0lCdJ2s1E*)
(*tGd9SdPlUWciJPlpY68EAGokWKolzey30q0un5mOyXCYYy0tY4mXkUls2CSm*)
(*W9MDbp5Q0zMETHqV0mUFnvGK6H80uwUzzOfIqDFsa2UzhAe418SEm/5NkGZH*)
(*gax5DgESnkNGPAIbXDFR0u6WqGkp9Wup0zqAYQFDp8yY95rgqkfFhL5HaMzb*)
(*f69eDEy7zZeKbL/7cTbdX8wOl9Pj/em1o9lDV+eveOzkja956DPf8sR7P+tV*)
(*H3jf09/7HV/0cz/13f/3v/mLv/7rf/tjv/Xjv3XrJ2/d+plbtz7ym7d+/tdu*)
(*feTnf+EHv/NPf+W7v+y5xz7x4OqT0/2H0+zG7UltsphO1pOa+0xt/d38/efU*)
(*+ryCSU00gP05NdEboDTgPO7P/i+ICQ9lFXA1zb7SmEtl05aRBLdrL/GwtbK/*)
(*FXu2mi5hWLrN9Nc5Xpwx7eKIV4W2Frq7AhbUhNhOq9pe9yEZjl8gGpL49ZGX*)
(*6QS+KiOZrKLFXL8grmaSMTGT6gVT18ZDm1W61ya1hkzbyBxFvE4QCoArjzSP*)
(*w9qiMLSEBJoKonmYEGYn6Hy9VWMqk6Vvw4k5rFKuRdVfwqQxHeWFrlI2BSgD*)
(*YBizbrM2VzhESDvoQ10XhmfcfiUks6n4KOCqx4NuLa0AoufTSW06m05nm//O*)
(*V5Pacn50MD85nF8/Wdy8vnzy0ZNPfOrBt33S4+/+zFd+8Xuf+Z4/9rs+8pN/*)
(*4t/+q7/80f/09z72sZ+4detnb936R7du/ePfuPUP/99f/fBf/6lv/z3f/Fmf*)
(*/K7Hbrx8cvSSy8sH92bXJt1Jzgfrb+lf/0m12Sx166/o30xqq//Ous1/0+4z*)
(*tfWkNjn9g9f5bFjbPdL2Kx/7E32620nt7Osf5RvRybKStTCrAzzoAjENZtZd*)
(*5MUnYrrFmli8NMX3VHjrQmdk8tnr3J/UmiUsJSjrRZMeJ78Mk/+aFivrPiTD*)
(*gfN4UWTrWX/DamKEpKW5bTSTyfpdqxkrDO3BxpAAFVVissegzbs7cEia12+l*)
(*W8ADzpGnhWdyLBFxNRLBAENatkgAyhnuNmMRGDYPE8LsBOEhwVu/Vh63SRi2*)
(*eeVaVs1LmDSyo7DnSbE5hCDDoofAMGbNQ5srHKIP5HVUInbvXgGT5vkx9c2U*)
(*sW3eXTXgqibBY2Ci7hcgei4ntc0xn08P9hfHh8uTo8XV48UDVxeP3Tx86slr*)
(*b/rERz7jU55492e+/L/8ve/8Cz/4jT/5d7/zn/3TH/iX/9cP//Iv/divfvTv*)
(*/Ydf+zv/5pf/h5/4+e/5rh/4svd82dOvecvJlcdetHzwhdOrL+yOL6WDvcli*)
(*Mplv/n7adPPdk8Wktjm2Y5ozqdnD2jrXlPonbNsft7Ss/57altE+e8EJZsk7*)
(*SbZo2CqklHHBVRGUKXrebTysT+IU+hNiUgP5lpoir/uT2riS6netCyJ9p4mO*)
(*YrbTqrbXfagZa4NtbuxbOe9JrSu+ToGhRa9TsAl4yZLYqtQ8DDwV2tCj2iyZ*)
(*eQm4TdykhgWoVZFWZULRd56ikXglCIsiGGhWZmgZUhqSdgHMbJL+R7AYtTKJ*)
(*oSpHZr14SenqM6hAsiZpHtQG2B54rZyKF/ZhUgAYxpxUb7e5wiH6QF5HAUgm*)
(*LVpBhwO8mZAwBi8cuMo4TI6A6PlsUtvKbDZdzGcHB4vjo+Xx0eLK8eLayfzm*)
(*A8snHj1+9qkHP/l1j3zaJz/65V/4xm/7g+/7ge/7qh/9kd//9/7Wt/6jf/h9*)
(*//yf/7l/9r/96Z/8yHd9/5/54Fd86E1v/Iyrj70mHd58wezqC/LhJ6T9F04W*)
(*l/Zml/eme5svd8xqUpvqSW39SGyy/chZdoa1lLZ/Wk2+KXLLf/Ko0jXS5JvU*)
(*lZSC5sRsi7pghyaYqh8xErJFPfy4DydwUgPUCU50lKrJ6/6AFopuv6qWGBdJ*)
(*VVzRJ2Fzpsqd2XRoLthm2GADueCTWla7GaCutrXMQB4eUG4ynDas2rjMS8Bt*)
(*Gm9Sw5ogQUZN61P0tRoKZTIvrwS4ZFrCCnrKTI4kDyLHBvbMhaaJ1ToeVB5D*)
(*VY7MevGSStHOYKICyWLScC9V5RhiKOteyyEvmsNmV8B/H0WnI7gladEKZjhM*)
(*WtpdWR4nOBy4CnjWSISA6Hk7qZ2NabP5dL6Y7e8vDg/Xk9rJ8eLqyfzG1fWw*)
(*9vLHT1771I03PffQ53zGK7/8Cz/p67/ybX/wG9/5x/7we7/vuz/wZ37gq/7k*)
(*n/zyP/od7/vyr3n92z/7oSefTTde+tuXN17QHb8g7b8gLV44mV3a6y5Nur3N*)
(*H6MWk9r0dFJbv2WxnNRSP6l1Z5NamWvuJ7X1sLa3ndTWNpsna2EDJLXZejX1*)
(*6CWLgkuDHZpgNDZ8FUDiW7S2tbZXmUnNSwdEqXpSdn9SC6W2mc8PRpVoE+0H*)
(*ZKq7zoSR/QU4gS/8PAx59x7kLYG8+3cD+SggrhDtHJcehxMUeesdQ+KTYtLk*)
(*qdBW4cYlqg+qWXrudfSPPDZwVcCrSjyM2+AwNPR6Kfs9b1ox9Zo4L+pMD6am*)
(*qTxWK+qrDHuCLoHK9JO4F0gYg0lLmKPGiXsVJEUKBoZJI/tnxBzJBFONgIXQ*)
(*4K1WBPJu9y8YbsEwtGASQsZM/ZIi7AcnldWaSrsvD4BbBvlW5KQ2ny6W8/2D*)
(*+dHR4vh4NazNr5zMrl2ZPvLQ/pMvPX7mVdff9NzDn/aWl77j7S979zte8f7P*)
(*e80HvvC5D37pJ33gdz33eZ//1Ce99caTz8xuPPaiowd+2+zkBXn/BZPFJ0xm*)
(*L5x0L97LlyZ5b/tuxLQezYJnaqfDWj+mFdtqvv3BtLNJ7ezPYp89aIs7B3dU*)
(*WJQEN3ZtW5bPs/LWtefNKz3ujVKT3BxS/VapMzL58bY+nAU/pt0XRry2vPMw*)
(*aiXD7Vdn4XWy51CcbIZqZqqXhgbD86PVGpjHpTcjmkiS//KAgeElZeozqYUM*)
(*aAwmfm+ZCPa8oGn3hUeCr0Ma0klqy+UTHxi6zQr0UvYbXritrZeukekBaGqe*)
(*Q2ZAVwCusJVJjolKZwGQeykzOjwVmm1G2UMShvOwYdJwC4URG3IkOdR5AQFr*)
(*odZVg5SYxYu0dLZnMrRgBkK6dJp5t1LAD06qzAVsMsAtAz4Xk9pmWlt/schs*)
(*sRrWpgeHZ8PayfzqldmN64tHbu4/8djRq5688ppXXX/21defe+bGG5594I3P*)
(*PfhJr3/w9a+78cyz1172yv2HHutOHri0PHlht/8Jaf7bJrPfPpm+aNJdSvny*)
(*ZqTafu5MTGrbbxQpJ7WzJ2u3x7LT5G4fXT+s7eiRzYPJTLu3XZNhvLEL2/5H*)
(*YOWtaxOGV1+++glu16YmoywowoXwdj+cxf1JbVzx2vLOw9BIwF0GLAFPzetk*)
(*3KUaZFYtaja2xyTQ8eKKqyGNteXrIYXRzaQEbM2D2NNywaTppCELrE/61DzU*)
(*CnZe8pDg65C2HD22PX0ybrOQRQFn9EnBdl8yZt/Q5qVPc5MRoT23DA9VVIRW*)
(*JeZeE+8qIgvTuce2VigFOASwQw5BUqWCiU2cMaNg0sIW8jCD9iNzDGkkBYAZ*)
(*MYoZV/vXk5qHweyrkHa+90Qdcevy0XsFht7Qp5Ate9tBbfN9/Xl1zBbdcn92*)
(*WAxrV67Mr11bPPjA/sM391/y8MGjp8f+S24uHnlo/vBD8wcfnN94cH5yfbp/*)
(*MpntX8rzF02mL5x0L0rdi1N3Oee9nFaHmNTm3fqL+tdf/7j73Y+nh/mmx/Xj*)
(*sy51tx+2icPgQbeox0Nn/QEjk2Gz/3GgZImHVl/qcfbnQfXDuuMcTU1GWfCD*)
(*G9vbPbwe3v54f1IbV7xC3HkYzLIK4SW1vetL2om5Er0lLEy0IYYKdLy44mpI*)
(*Y235xJrFsD1a+vOaB7ynmX5qs8D6pE+RY62ECEseUrRJNuRosg1cVTHcIDiK*)
(*uAqYFCc18+S+4UXRfjw1z+0QHswcSfYEWryriCwA1cDWFOAQwA45BEmZpHlV*)
(*S9akFpJm1lqIiRm0H5ljSCMpAMyIUcy42v9Ykxo2YVClmklNGzIKIbehTy27*)
(*k9p6WJvO83wx3V8Na0eLo+P1cXg0Ozqeree1q/Pr1xbr4+rt49qVxdUri5Mr*)
(*i4Pj+WK/my4meXo5dZfS5mla7va6PDn9c9S3J7XTr+gvJ7XJ7WP7HfsyubNJ*)
(*bdKpt0UCHpgWvSuTGkCbnK2y8/9Cd1XpcY6mJqMs+MGNHW6DZbj+3/cntSHi*)
(*kQya885jC1cWduIpV3UyXmLYymtpraPPgxBMadrKxzQA3x6mNzPT7OxawAMW*)
(*AIlsnkTcuIVy6NbEUGVbRgz985nyodsERwFdwXsuqzBw30i7Kxcr1PLcwHZp*)
(*pc3L3DUPgNhEvLwBtqaQm2p2aPSsQFKlQvkjqZnVevFIw/l6FTH7hElTED5Q*)
(*QkijRMGhvXSYSyZ+xsS8mq01hUEyaPmUhXJtxXcmtWmXt4/V5t1iM6wdHMwP*)
(*Duf7B9ODg+nR0ez4eHOsBrfNsfrHydH8+HB2eDjbP5gtltPVlNetvyBkb3Ws*)
(*H6VtpqqV1y5vjy6nTgxrxd9TK46z79gvUjib1DaP1bbEhNmRtdaTGi662fnm*)
(*wsQThLiqm0eUXiM0bRlawg1EaDLKWW07ngLDYelB83l/UqsV3F1V/XOuCMmW*)
(*8Dx4ylWdbFIR8iPwm6z2OuV5hn+mOs0VZHqA7BCnp4ydyvPpeTCFaYwEdyQR*)
(*d6yNDmOosi0jhv5Jt3zcIRISXv6boV0oix4Ysm+AXgKBGLdVqQnz0o+H2VwL*)
(*wrb8EeyBWlmoJUvITTUrnjGHICmTluS/+jUz1TBwphmuel0F7dzMtDQEam2C*)
(*IY0VxYtrSqlDmoewQZS828bJ7+0wo9qUsXLYGFq2w9p6TFsfeXVMV8Pael7L*)
(*80W3mr+Wy9XUtv7w2uF6KJuvxrf9g/V/t8f+crYa6+bz9SfduvVfTFuj2P7V*)
(*6s1juvWf1V7/LYD1i+nNuHb2lY/lsX7gtn3sdnZsv4u/yKKY1M6+5pFkOKy1*)
(*mNQAe6DzzVV/3pOabjyGlkTvrglulZgfQCDDYelB83l/UqsVk3ZyEZ23dMTX*)
(*0TOAhYe0e18IO7k/by4lb32Jdcp0comBXLlj6WDBHngMTJRs3bBMYTYKEDTB*)
(*HUmgCr2VyjzhAgMJSUcM/V+odc1LVePVtseQfUNfrXVLdkjoxzxfrh1zOWDq*)
(*PMDmj2GOYZomk7jo5BrP1maS/RdgyRePDQEpqSbReQHnOgq582jbUMdrXbJq*)
(*bVJV69BPiBaXRhuCk150EuFEvTgHJiEtpZ/TF7pdlzaPvFaTWrca1tZHmp49*)
(*X1suZ/v78+XqWM4Xp8didSyXi/l8tpLVtLe2zKePw1aj1mrqm3Wz7XE6qXXb*)
(*Sc0Y1tJ2WLt9Sb/Nr3FSy8RdzJzUAG9ez/O7Sh+XATyxXnMKnEzRtf8QZ21S*)
(*Yfvp1LzdQ2SX7k9qw8Rr3buLSi890B4hYL0My0u4k3XLYQV9HuAXnQxaHac2*)
(*Vr3CFzBZfbJAXx0OI6kXV4IQpiWYrqhqHp7nKs0SAwmJj5Wie9wFF9zeem2G*)
(*K26sfUNfrXV7frVIuztJiUpzpVFpYB7PIYyq9UJyCJLy9LUm2KaSI1rBhKSb*)
(*ROfledYhyBw9c6zjtS7GNlCqas24wjhxabStV32sFsJL6o7WANhDfvoyaXuc*)
(*TmrrwWs9uk1XR97+qbXFYrZ9cDZbjWar+Wx9LFbHZkzbPAibbP5m9en3gWwn*)
(*tfnm2Dxs25nUiOMMao/6zkxqu0EBvak/RI0qVlwfMe986M7s8FTsnzpEWHST*)
(*kBBnbVJh++nUyN2DL/fzT5jtosrDQG/nJH3zALTJupOWSwMog04WJqYfj67k*)
(*vF4yd+wwKY8WUrQh9mzGCgGEOMmrIWnmVaxsCt6RklP0Kgk5KTVDQ60jlM0f*)
(*k3qdoP0zoRlIZMqkK9OkPFmWz2QybJIQA24qsvdwjrWEl354/KW+iSEEDHQw*)
(*BmwioIb+Gc+aAQwYw2aE7BAMu4ShTZphMyajtC6OXsYKEYaeB5qIk4IHgLBU*)
(*A2CEOdkA2jnwvHOyn9S6zQfWNs/H1l+0uH4z5GY6W49p60vr7/Nf/3gq0+0b*)
(*GzcjWDr9q2n9pHb6QG3zvsec+8+rlcfp2x2zdQicqT+S+tNpVXXE+jWuTqGC*)
(*KCKiBpCy/PJK4aQspec81TxIraIO3JW0eYhEoA13jPsScs57OCeEY4nu9lCZ*)
(*T023nOnNdM6sEd3Y5CYcvrQQmlhAUp5bELqKDazjXQWkeZTubQToa2F2pP5H*)
(*xqEpVYRUcR7CzmrvNW1HhMSkDKJoNf1ySF8FriZQMIe9ed9aGpvZfjjZpHqp*)
(*inCBM1TYYtN7jkbIV4ffnQAP2gTvjZ5Jqa8/q5KIl0AhbEa80pM7v4bBW4Xb*)
(*HR8ucTM7ebXUMYnCwPjQ2KTKv6a9bB6t5oVIRXNqnx42TRGLfzspbCa1zbH5*)
(*oFi3/djaajSbno5c0+2wdjqozWaz23+RrZueDmWbv3jWrR/Nbb+pRD+A7opH*)
(*bJthZ/uUrD/sHMtJLQk9JkdRAt7E5ev0CaAbQiOUP1qTmvDjFV2cDLcpjMQz*)
(*Ab2nzRkkpY7o/3FK8/wSQFeVh4vPquh2Upm/NQMO9dIQbS80Pc9amPUYrkEc*)
(*oqoxyncOkDyTUcxtof93uGmQ4iVeKwCSF6iW/N6PeTWkPcH21lmYyBOkugpS*)
(*aR6mzHRLyCTOxURV9kNoa2p6TdVf0r8oAGwz+EMJ69UjNCe1EonmKgzqtZCZ*)
(*I5NpQwcCE10pxq2GXdqa1TebwRMSifAWWpVqZqPWMpmcTtDAwFWt41WEqVSq*)
(*XzVk7p5/RgAYTYXXDybsVHOP2FHbDGvp9GNrm68Zma3HtLz9ypHNHLeawGZn*)
(*Mj39CFq3eRY37U6fxa3dnH02TTLpfYPHBnN5eOTILuLLlIl9j3Yk36upo+Ri*)
(*4jajbwe0CZzUShOB3GwqF68ITfAQNmHyl7DnudQR5TMhjVOse1YAXVUeLjKH*)
(*4nNqDFqm04Q+z2FybhZef/ILxMyC0cHLUCdlfn6z4ROd6ewVoPciEGdE9h7f*)
(*opoKvrcTlFzzzTYMhqp+9mxrW0iAN215tgEwnHJYGo9hkYu4hIGVHkhbr9a6*)
(*PfpLz4NJbQgk3W+ajeZMqzAM9AAaz1T2lhjTCTgRBsNWdBFFl/JB03lOamFo*)
(*AHisVQMwmP41tpAl06HXD2a+PZMeG8F3aJw+Vts+QZv2A9rpsZHbT9KKu//p*)
(*c7KzSU38/rbX6Q1zsQq8/g/J4Vu0VuTrnO2zxlME/Vej2JOagGojPH2oeHtS*)
(*M9Mgl2GoJhQYt2ETgiXseRaFrsL88SneHkIyc/E5vD+pkZlO1K25qhnEp3EZ*)
(*D5oKzUZpK/5BYiPxazxV+7+I0hNrJoX3PQaD8E+KsMUt5Bli2nm2zUCaNJ1y*)
(*WBqPYZGLvhQmVYJkliEwNE/e9UlNMODBJtkeDgYXkXGls8PmuK+S2n9MNbO1*)
(*GJyC7SHEhoUzYZdWJodk3Oyz1IfAV/mUTd6qSoOryTOgqfNS9ljShrgZvERK*)
(*Tjzw6JZ9qnH6cK0TY1pX2Htfu7c7cmgO9Td49AyQPZ9q2rtZbqe2cX+W//aY*)
(*nh5puvvJOxuqh3BL1T0xqYnWMpkXVwEMsnxk7h9vUi5wUvkic3h/UiMzJZP1*)
(*nItd17yVhNGTc4fCtIzVfiRsLGa/iUyrhKGO9KNtw420loGGDSHtCpkyiOIx*)
(*AxpMs1Tlls9UgBFJXZBJDbCkaR9OCwAjfJIP37PTwIm4r3kNXJ7Hy6ehNB6H*)
(*Q4jl14tIsMyuua+ETxMY4LkqZd4E84xNquqIUxa9JFoULwGyQ8pSenX07ten*)
(*wMqpYfdpWjozd8e0XBojDrUHM+WwmsN71QNWTmrbT971DxpP/0z46aR2esab*)
(*1DyEPc94UiMFBDIVQv0Mb1u9rahguGrEmq3CfK+IXuzn4Z/fmi44hxd/UgMF*)
(*TfV3FpEFo0M6xM6ZSU1bCaqTc4fCtIzVhB5snhDxY39SpA9qalZZY2jzo23N*)
(*7Kr62QTGmOjO74ExKYMoHjOgwYSOR4tJO07WS9Psh/OY1HQ472ou2thD6NWF*)
(*pMUEY3Li1UinALI2iw6AZb+BPcCmh7CXQvaAMG5zzXoR5CRrQ24W7UQXGsAO*)
(*27vKBPMsW3C3NAwVXl69H5270McYQqhAMOCQOj1SoTGNo8V0opNlqglybJDd*)
(*p4UbbOl0Utv+obnN12LOdp+prae208HNZ8C4tD7S5s8aJD2phRXkA5kKjGeT*)
(*ZwHs/qSmJY26kZr+0/1J7U5NanhHqlI2s2B0SIfYOZ7UcI66NAneO5J11xve*)
(*hBo271ZgAJAwOSZd2o8oHOlH25qeJzUfHsQ8YDUTmOdBl9uL4jEDGszjCsAO*)
(*lU0TAVtcHX1Sw9EFsdp/fwmYlx5CSKZOWdAykFkjshvNPglbi3EYXk2V944+*)
(*U/EPU8qrjGdc+lJKTT7K6GLWnSkNY+I1FSMNjafjimpm1Vdh3UE1PVchTt0q*)
(*Wn/7yTI9qZU/hpyYbvWkZuZuuuXbO5TOl9MPkt1+prad1Hb/cvfZpNZZkxqW*)
(*06+9VJOaqDjlare7gEIFvKjx8v1JzZKQtOH+weowlS8yh/cnNTJTM7rnQV+q*)
(*mtSEaOrw5pCc1zPD2QihhsJQB8jx6DLTqfVjchsiDHmr5dnD0Mw2ybAoUMg5*)
(*STtItvfj6YurY01qgiWdl8hOMNNbCQ+9mn5VhtPEsDVUkzfsFotQ82y9OmqW*)
(*wNVUee9oFsazKD3QL9UY/RwRAjI1z5uwvT4BmTJ9Yi4xLG3VFAjDagKFErnJ*)
(*PHbFoAWZmo/P+pPew7UQQ+8HoAL4+fbGAsa00zc0nn3BY3f69ZczOKlVfrXa*)
(*+q2P5aTGFkX6Iajrz5Clybvry1MuX/sxsEsdpnwD63tXJCRtuP9UuVdfZA7v*)
(*T2pkpmZ0z4O+xE9qXi5gV2lIrY2NWtgefi+cIJz3PIofbevRy2AAHA5fYhgD*)
(*rqbHjPAwFu0Ahhml1Bc6o09qOMEq2L2J964nDMkE5sEG+IFbocZ3LG6nWmlw*)
(*qBPHarxPnpBSDbSHiZnEg4tuwi5NvIiaPYbDMlNS+BxFpmYspjQD8Wh6QzWh*)
(*LN8EuCvW4yfDbZkj9sPj5zk0w+Es1KQ23Z3UZmhSs/94HECjvvtxNzW8XQtO*)
(*tBVoLZ46XtlbAlqtuXz3ilQx3OZfLK5Q+SKTfEEmtXIbnPiS1D2IV/YikpkK*)
(*h+a+DZyPMqmZUTwOMcI2Nmphe/jT/8/ee4BZdl1lotXdle7ZJ5+b61bOobuq*)
(*OlV3dXVudVAHZamVZUmWZUmWgxwkW85jOYHBYGzAATCYjHEimGw8MOOBAcwM*)
(*MDPmEd/z8IAZZuAx33zfm3m8E+49te/ea6+9zrm3W92i1rc/qeuctdf+V9j7*)
(*nP+ehEq3IpPVjtxXlVwKBgSSKjVgEIgYeBg4HlVk+F7a6CH4VYFFAgJalkNx*)
(*fTE14YQEhwQCE4IslI0qelqzhq5i5RTg+pkkh0HeZQpyuk1iQMyMTC1T3OSk*)
(*g3tB2HwXZMRM2VRlXyt0HwVP0128NUpqhNFxMLm9yOSpLCqyxnuamkWYmgmV*)
(*N+4LvbxltCr8ltV8f2Nyo6PJ3+ioommsqWah7xVRSULQtEwN8VEOCKW0EB1h*)
(*OFwZNIss12b21el6FHrQiNaEGQpu0XbvEMaVk2uBqYGTCBQmLVN0ZXBQio68*)
(*GtAlNUVnaoIFOW6qn6TkXplyRIkGJUeIU3JgwaB1YllOXNZk8TDAgODZwSMs*)
(*wGaKwy7FQVU0UoWseRSCkCP4YPpwJKC+IOmu7j6nBkZbC1vbBTkxy2EfKS0Q*)
(*hkpfqGqVTf5wIAvY5ToVepwTkYvTpC3F2rjJSEBToDJeSznAIEPT1VT1w6Q1*)
(*GdcnpiaTO0ISDWjBkTuC2UcG4v+EmE628tMyNXA5oiwL4EDC2qViambK1MRr*)
(*ZxJN43YlN0Bam5fhTGVLHOwqUwNF1QUJndCXXqus20eB61foQaOYAtOq+jdi*)
(*oRMYV1S2mBrRU0Na4Q1okRdKJZWuMDXZfaY4PtLjAJpS6VBypHXKVNcbvRIE*)
(*y6rE4QlS5UuVRFWcidGTs8mghMrpk+HhoUDAU7rTcy0MJIM3CEyNqc+XBIP/*)
(*bJmaCj+SFMRfpDZATUqX607AOCP6QjrSXCPGiXGTkYCmQGW8lmQkmfKYCb+A*)
(*UCWqqkbczIRZi9OQjuOpfVWI5Mko6whkCtyrZWqqgAsnD6BTuBBjKK9aMviU*)
(*rHE3Orrxmx4djo61tdZLIJ3mDZDMbjWr1UyhpWQtE1PTZl8WRB+xLJcrHQZl*)
(*5oLlgZi9HoUeNIopbbjwjGvr4YoKcW6a0CKGm+WDTIFBjKF22ZGXKbqyalCi*)
(*p5lENisstrJlefVQ6QjwtJi7VYH5QiF7J4sp1WFWy6og5PYdKQ/cEa1BuqYQ*)
(*Ol4BjwM+iirCgoUcKQDThyPBwyIYvNLvfuxKF5CmdQhJVYcqGNqAm4oiAXdR*)
(*ilb2t1tCGb0Ts0j58QImAneZiByHAeYiU8bpyh3iV7kjlxwFQKbs0N0x2g9G*)
(*hrR8gSmQA5h2SXRwpmZKy4IMAPFU/s1HJeCCQE86mak1v5UWN9eyvKi1Xssf*)
(*UjPbdNJmWVxrMjXHMsJmR63J10SmZslMzWpjaqAQa4DSBdcUNrL2g3XnAHJ7*)
(*p9W5doQeNIopRmYZiIUXJYDEoa8Fpma2V6ZqtZGHy6SsGpHoaSYBzSJMDZyS*)
(*4NC8ZRk/GMNuFWG+UMgOClDlLTksqxKX23EkaPwuMHFam5SqY+p1DIwSGEmV*)
(*fW0kM2VBCIJqLx4QRCE1dR0xNW3Y8YBQwIAw8OrC65b/k15OV1S0FdIty1r7*)
(*YCK6wtRkMOBe/t9g0olFQo9kVvAqd4SiygqgW9lPQ8fbNKTlSx6LV+YDyCsL*)
(*FAwEADI1ZHTwNx9ZmXcBXJeISQevnUEkbfOr1pbl2pZnW75j+/E/wj+dsDmW*)
(*60T/dexmc5PWJGsxUzMTpmbYpmFahoKp8WRt82sA3fmxVNsFURM2MvXBWggv*)
(*bhaBimWO66JVu3aEEjS6KW3EkO3I3qsgmYZONPE1X1ZWnULI+siKIWxJAciH*)
(*IVBUixLRC1wNH1qIgyC8kRxmKd7Jw4G98rmJ5zGrqAwK4PNZZopVlOgULlmz*)
(*pgoy6DKuJocu7YsDwEdhNKbGYxB0tAJ2yRR2ok1eEB8ZmkdVNLSpkZFoc8rQ*)
(*lVMGg1hmisWHV5BdFryQN6rGwr2jizZcYHaIQcZNgQKqyXYoxQyOjgOj+8J3*)
(*zFEk4DTviuCjq8KV1ThDp7A2uaZU8+CfCGB5L+I4KALtQkYE9dNe4GKVuqNa*)
(*zcAAgsNpmFos0f9DCma7tu2FNM1xQrIW/sONOVpE09youW7yZ2u73bqmZsZM*)
(*rfmomhHd2qi/BzJ9PI6QGtXe3Iu2yrLZPiURPKpf8GScWr8QI2DN4KO/WCIE*)
(*rXNr2nCx1o8qci8z47rUXaGPmxYbvXrx8xlBHzlMyCPy9lULaSrIqsWghUge*)
(*F/cXH50plnrEO9AmuNhqvZNHBGNCdxDXB/EQRQVAiFU+y9rwglnQKvOwETXK*)
(*KPJwiI6pmGJ8X3x0fAim5ibyWKCOdmg8QVnjKYBRDY34KPslm5U91abGyMgg*)
(*BC8oqUGMgwGRIyx4LSCReyHItQ5SBI+YKjvCxqwDIQIqy3ZUoUZQEX2k+AKC*)
(*wadYqk9XzieII0g8sxpnUG1rRVYWksgHROUIki/EEeF8Q7hABuIhBgRcrFJr*)
(*qtWMqUudTtBa4sTiuo7nOn7YQqbm2l7Y0qtprh0212s1l2Nq3GtGNl8qkj6z*)
(*ZpvNJpM1vDy0iWPogqmKNmKcz0h6s4c8KCWnFKHYUTG1a1CyetctEVgAcqy/*)
(*BiUtY3r14uczgj5ymJAzxduX11WtqCCBTK2TIxfFAliHwkbWvlxTfFS5DFrA*)
(*vaN3yYeNgkEFg2gZER52DqfkwAr2QSRaNzNFg0lHWMSs1jLislyW9MKQO+KQ*)
(*kDDKkATYOXxEsMmjp/dYqiwz2oIGRgD3Agy4yl8kyCofmaKeKfGkqFFEWxiq*)
(*YqDHhP+31pQ8tBxMpCOSBRCVMBBdEKeQ1IDKeCopuZYhqbIp7yLWEuK+Nq18*)
(*WAQ7qrDLaIVeBm2FT4XC1OhJ4cOiLR7ER1VgZZAIU4tJWiie5/me67uun/C1*)
(*hKyFBC2kaZ4d8jc3be1krUXTkotkERezNplaStakK2t4NJC94BSgxJyiKaSS*)
(*PjdBnHLVZSq864ipmeTToe7KFlND9PEViUErOV66iKggXTtMTXBZWDkpPqpc*)
(*Bi3g3tG75MNGx5Dbd5UIsHM4JQc2tSwDps8dopoMG+lIL2OVy3Lc6IUhjA4m*)
(*QtULSQE9j7iPCDZ59E6YmmxcVsAjiUQgFfmXeTCwfE619YwHk6JGF7wqVMWg*)
(*KlQVTry0wMIAUwMaEUbB4yMDExyhCOIUPjSlolRQie6ouoC7tPaFvuBY2iIR*)
(*cmRCNU8PPl54KhFOm19cpgbGVgUYZGrJdbSkJTTN9wPfCzwv8N2w+b4TNs+P*)
(*LqJFl9mKrhu2khv9I2jxtejhNdNuftDaTMlaQtPsNrLGxMtqeDSQveAUoGST*)
(*rqYtQmJ3ueoyFd71xdReFPnnxtToPmZakZAqRaYDZWpcIaaGTyLtFGOQUNwE*)
(*XQa7UwJO6ZIDWCcY8o3CB1yIZyanhMSBuWbSMRHxUbBD11TB1u5FLFMyBVYj*)
(*DoYfmhgWphMZNjF6WtiqUORgapmEXo2qAOLHYjmAcjxTJKB9lTV8IERTpa+N*)
(*AJ8UOTKycbmAkVIXsqBKDWuf5oIO7rLK8RzFgziFjA4qZ0qQKtSUCIC7EO9A*)
(*5MJYeEJlTwVHeIMyDGJSVNHmwSf/oDA1ullTqkYkpESDvGhpWnS7Y3wRLaFp*)
(*gV/0/WLgFYtRC0peUI6aX3K9sudW4lb1nKrvlD0npGxBdH+k7djNILTCETfu*)
(*vf0xU7Pt1gv8QaYGOit4zQjTH48Sox10+GzK5acNO1McUGSDWlP5mBqf60wd*)
(*r0f558PU+C756pBillK6qtkHWu46UxMAd7KX1yG6CbqcY4LTu+QA1gmGzkcR*)
(*yiaTU5SqoE+BTrrgdlRO4VWXKYbaPDJJtAhzCJ5H3Ec8FAVIjA6YGtglRzWq*)
(*YNOZmrxR8EKbIJVfoON4xilqjLzIy3jSvYKPxGpXpYaePiSGBnQg0wYfNCU7*)
(*hRgBlTMliF4h9F2UmgGjRCwPvqOcPnC7nJesqeFnJd8d5D5mxgVNCEtWbESR*)
(*CRp3u2PC0QLPK3rJdbSQo8Wt6JdKfqnil2pBcahYGioW60FQC/x64A0F7lDR*)
(*CVstsCu+XfKsIL4JMnolSUTPkn9Y8Yv9Q2qWMrW2P3GmhmzUVgultik54ouH*)
(*MitVoxjQKpHJIIVwyXu3mNqLiCeTCIsYvQtrP/SDfeU6pJillK5qZQYtX7NM*)
(*zejgYCRMYTBQ3VpkcgCjYCAmF7EMimw5k1OUksBrXsAgw8MtyKbAoZHRkaqj*)
(*xBNUxocTBDQIOoVHSUBCTA0lm4IananhgnehV6MKtvZ4qgo4ay88A139cMD8*)
(*Lrl+cIOqQMkR4FODj8J7JINXCWsvQsRTSvpUIjuujRVuCvFC1s+RIN6sFiSe*)
(*TVWm6JXAK6giqc0yrw8CkPciLssi07TUCMLUcozFuCJXGdEGVrUXZWp+yNF8*)
(*r+T75SBsQalUqlTK1VqlXq8ODdeGxuqNqcbw7Ojo/Pj4wsT4/MTY/Pjw3Gh9*)
(*Zrg8UfOHyyFZMyu+WfRM343eORLf4JiGI6Vmzcb9u/XWEYUXyEZteSAWmOLw*)
(*rUoKP1bWtIJ9ZfCIwbSLTLhkFoYwNTuh0C9p2WJqyMpAOUzIYLSli1cyWLGd*)
(*uEyJQ469hnQwwt3UOs5o53sCBm2XHMC0GIiZxS3LRShsyeEUpSRUyeW3G+1f*)
(*AaPPmkyj0HchLqsQasPCFAIaBBGqLICwiamhZJPHaWRkaloMODBVJCmwOz+Y*)
(*po7jdSLkEbSAzMd8wMCyFD6lB47Cp0YFT0YrD62qVSQaRNfAqZHDCOKFrJ8p*)
(*QTl8RGaEaiJTHKdEiZJiQzqF4A3Kyc2RFJmm8XZAppZ7CqfGQfzyRtBCu0LS*)
(*zNZtiJstPG1PmZrnetHls6BcDCqlsBUrtWq9MTQ8Ojw6MTo+PT6xMDW1PDe7*)
(*b2nx4Oquw/tWN/Yur+9e3L88vTI/PDtWGqs79ZJRKRaKgeH7zPFMy4nucYxH*)
(*an2djTkWR9auBaamijAIhjjFVDkFa5UyzfkuSHVtMbVErgJT0xYMqEy3nKnG*)
(*VPUMamaqYbDswdLVVjJSdZQJSBHKFNZOcCGSuJvyUsPblwPFdKuZPKI2j3Jq*)
(*tIJHIIdBPm78RoN2AoZHWwU4HQtPLq8DBg3MBTKcrIOEF7cpxEpVVKAy4qzK*)
(*LIKQqWse7KJNjawMdsEB46NQUkYBpooksQgRYHiO+D/BOAtd8BjixZMPvDY7*)
(*Kjf57aq0IllWpQbEk9tHYaCsdsCYIEZAZW1t43FW9SLuwnOnEtAgPcu8a9qx*)
(*wOGQUICXyXjlq8bUVI6oQt2iaXGL7jWUmZplx+/c91w38INSUA5bpVQdqg2N*)
(*jY7NTs3sWljavWt53/LK2ury+p6Vo2u7zxw9eOuNJ++/8+Kj9996351nb7lx*)
(*/dihxeWlxtiIXa+xctkolpgbMMs1TJuZIUWznZC2RS1+gb/M1BJcKi+Qjary*)
(*QEIEbtcGmZGnDMWUbBaZ5oImztRUe7eYWneHYBnPVfCakZXzHTu0w7H2w73W*)
(*vlCiqroFJ6BgCqnbTPHJLfgoYNi1buIuy92ZbjXTdkEsdxhAMNfEjoZ0wJLx*)
(*h6nHZ40q2ggMbeUg9SbnusMY5raAlJlsUBtDZJLiXVRgsmLAvVOZQgSfs7lT*)
(*lqkaM43C2s8WcNhgNYJdkBiCYeywGimZylEAlCwjGOTy7nDO5o4VfYqZ7asf*)
(*JUGZlOlotRYQp8C6RdYNVZb59IF/4vhxR3impjJ4hZgaCDhL4lKmFn1/evNd*)
(*+cmrGG3Tjr+O5sZMregH5aAUtnqlNjYyOjczu3t55fDB9ZOHj9xw9MgNRw7d*)
(*cOTg2ePrd1y64RUP3fmON7/qwx98/oV3PP36V99z7+WTx44szM4GI6NmtW6U*)
(*aswrMcszmMNYxNTcqFmuabomk8naFWFqOcIOFk/W+dLJfATVBB0iU+MVulWZ*)
(*14tsMTXVgsbaD/da+8IswKcGXsnXJlMTYiWERVgQsroMLgUIJHAgyprQSbWo*)
(*hs5asapI8kYYOmtUEUZgqCpHlWgcc6qTL5igqUwdVe5niqGQBUot8UMgYSFi*)
(*kO1TpgAeATxuWQNO8QKHrbWMQAIDjs84IThgDLWVo0IoqIFhkYegxBxPK5Jl*)
(*VWpk2PS8g8r8QDnqR3YNMQIqy/qqoFGyqUWr9RFxSgi4YJCeZa0g0QOV03/w*)
(*5xjgcKm1rpwJp5CQSGr94nukNE1mas1Xezim41qe65R8v1os1cuVscbw7PTM*)
(*6vLy4YMHz546dfH06YunT505vnHq8P4bjuy9/eLxJx+988MffPNP//jHPveT*)
(*H/2hH3jft3zwtS9/7OLR4/MLuyrDE3Zl2PSrzC4aph+SM8d0PdPxTNtjpsta*)
(*TM3mWnKJT+up7LKqPEB9PGho7WSIuQwJ6cJoZ2W80JkaIgj+l4BcNaZGm4CZ*)
(*LXdoHLHA2g/3WvupKXlaaRdkwdQWUyPWIXFNoC8yFOncoAxbsMDHkOiUNmiq*)
(*ylGNDuoIyrmrkZI43BGktISaRGIo1HNuSBRPu1XPJhoBvAuYRLoXql6dZFM7*)
(*rlxv+IwTgqOtZG1AEDU5uZks04GpDCKj5MAg9xU2ylMsk8EcixXugmxTi5AS*)
(*DWLEEKcEzHLWhF7Cm2dAL/jhiPjl6KX/sOJ7xkwprbLvV4GpCWEhVBcz1dfU*)
(*4lfnRy/7cB3Ld51y4NdLpeFabXp8fNfi4vr+/adPHL/14oU7Ll287cLZG09u*)
(*nNzYc3Jj5baLh59+/M7v//gL/+Zf/fQf/uEv/t7vf+nLv/J9L3zoNbc9cGzP*)
(*scmRRb88aTnDjFUNVrKMwDU8j7keczzDCslayNSiB9Zsc7PFX8rWeArWqqqq*)
(*wS6sg1lJF7DOkSkmzwhZh7eA15hAx7aYGmU25RBw+nfRcidViljAZxNiSl73*)
(*tPNOMLXF1Ih1SFwT6IsMRToxCMZHFedMTmmDpqocPNfgRn57+memypQjQO+O*)
(*F5hck0gMhXqm1FLW4sExqJTxLkgEKJ5mdcHUreFE2DlEGDR1HHFBCA5Sw8SY*)
(*IGpgcrPapwADTeH2ZU1kdBUYYaM8xTIZzLFYab3D1wFe5I346J04BedMzdSI*)
(*LjDFCYYqOODQ6Z+WdOujDN6kMLXm2zOk1g5JuzKwLEslR9banlOz4xaTJctz*)
(*7cBzKoE/VC6N1mszE+Mriwvr+/aeOnr44plTN509deGGo2eOrZ3cWD25seu2*)
(*i+uvevyWH/jku/7tb//0n/7Fr//pN7/6e9/4+e/77Ade+fzdR27fPbFWK87b*)
(*5nhhsD44WDEHS86g7w66biFhavE9kJbp2lHbYmrYD9Fg0WprTNj7ojC1F5cM*)
(*Xk2mho+e23InVYpYwGeTypQwcfgtyLxLjWhrDwlmFwUchbULuGLkcJk3Dk5t*)
(*Ck6kdGUwHQawE4NyDI34ZX18uuVComDQwlBFVd6eHsH57dqpmqkyGXTiRLQg*)
(*x0f+kx8FiaGcC6REs/pIwaBSxruAgCnVkgm5PCKChwK7c0kdx8Gw9qX7CoEx*)
(*yYHNUTbE0a+EWZVlYc7mMEip1awI8VmMSOehEwZVBY2XdCMdIcVBelJY+0HH*)
(*VOc63ag7E1bQtHayRkHIsi1TKVNrf52IZTmW5dqW69i+axc9t1r0G5XSWL02*)
(*OzG2sjB/YM/qsfW108c2zhw7dPrI2g2H99xweOX00eW7bjn02qdu+cyn3/X1*)
(*f/e5/+tvfvOv//F3/uIffuuLX/v+t373a86+4tj0yVF/xSlMF3qHB/rqrL/s*)
(*9Aduv+cOOm7BjsiaaXlWO1mjMDVtzSD1AJoixC2D8Ock9Omjgi14Jwy0xdTo*)
(*wqTTp26ZVZl6KTE1s33pVk03cJlNLVDK70pMSZUj0kZj06e4ta0YjD9t5hvo*)
(*MrA60Y87TCGgJn2RIQYnt0EBrbwCy6NkcgqBgcQH3EXJAsU+okxPIthdcFyO*)
(*gzaGci7AWSl3IbqpxaBSxruAgCnVkgm5PGKHsDuX1HEEjxCcKwfGvDaYWndt*)
(*8paZtP7nWzwzTTGhC1EHmcgqyR09Hhg/oipo8nYiyKzeEcMlBF8NG/7eR7tY*)
(*LaZmQ+2KMjUOREtimma7dtQ8J7qgVvITplYcrVWmRhsLUxPL8zN7dy0c3L1z*)
(*Y9/y0QPLp4/suXh67a6bDz/58ovveecjP/PFD/2nP/m5v/jbX//Lf/jNP/77*)
(*3/ji73763Z9504XXnZ67MFVcCwYXjO2jA9uHjB0Vq7fo9vvugBszNdtjEVPz*)
(*UqbmRGStC0yNtS9lSC11Xs+y8X+GTE0eRTWoygI4bZEUayEJ6U6rIpORDoXo*)
(*L0UnH2bBa9w43aBWkJq/aj8UCOOC/jK+pVzMZCkJY5s7U6ZGCkKzF9+yRDuJ*)
(*IosB8H1VbjJpxeskaAqPOrXAFCsw31E2gizjvDXhH7iO1jVkLyUseBCQjnx3*)
(*5HxGaw3UEWYlAlvYgkOln35QMKjAI3FDdIiossLOigdxRN6uPU9gWZgaghME*)
(*DDoO7gJdyGSfCClHd8SsqYhJJwgNSCgZ1A4qRwAcCxy9w2iDu/JZQ6YP7pSw*)
(*V4UBtKnyqKVvRMfo+LKb2X71KhVrk6mRboDUhoU4ZxN1E7ygFl9N85oX1Jxy*)
(*4NZKEVMbqZUmGrWZ8eG5iZHF6bHl+Ym9u2bW9y6cObH3jpuPPvzA2Te98e4P*)
(*f8fTv/xr3/Un3/zyn/ztL3/jv/7yH/zXX/r8737qhR977uY3nl26ebayXjKW*)
(*zO1jA9vrhe3liKn1+W6/6w6CTC0CYsdMFnjPPKPRKyRBQtAUGaRa1s5KVYmq*)
(*jCMGwcK7OhfFckhWYJT5RUmrbNCUVlSiha6IKghEX/CAgJrgdnDK0IOJdwER*)
(*0sve1E26fKIKnRzKVmOsSc2azWj9I36qN3YqucTWxr6QHDUjwTVZB8cfdikI*)
(*fRFP8x2jiUHrVth5TX6hE3SEXvLxHR+0E2C4QW1f3rtMg8pDICc2dPz8FsoB*)
(*i++ohWpKecSFgkFGog1apuCo+tJhy4ubCkymDPK9QEiCWTmGOBiVj0i4ZBco*)
(*AafbRwJOt08X3gISq0ymElHVBtJRrg3tKKqBiJUJGgdH4fvmiDwOWzCI+wWG*)
(*SzUKRZpd49I221/cYbb/cEt0VgCD6yCFIeia0MfU4ifUmvc9Bq5d8p1K0auX*)
(*Q6YWDFeL443q7HhjdqIxPzW8a2583/LsxtrSpfMbD9x39uWPnn/jc3d920ee*)
(*+Plf+9Af/uXn/vCvvvj1v/rCv/7Ln/rBr37o2U+88tyrj85dnCit+YUFY/tI*)
(*37ba4PaS2Vt0+nynz3EGbLdguSFTM0Wm5ljSxR/ZUzwsUHaUCvhGlU2mO+iA*)
(*OjhmlUFV1fHBuaYoW9YrJoTJlZOpyVlAUtZ1QZgaBQnvKUOnORgT3n1hL8V3*)
(*0BoldGDAKT52SwSoqhqIR42a0WwxM0qZmrXJ2szkHylO6Cc1MAwC2zIJSxPn*)
(*QcFotsy/TeWLp7YvnkQz749ppnrtFXKH6OC+CwqG+vwZMSiAwecjuObQZ4RK*)
(*WYUZdBbcqBodjAMdKhguPCwqs1pfEGUZDN6XqCOnL3mdnVAzKmUw+7IIu0Co*)
(*SBWpkm6g8xEpDCZNPSTOQjRA2MRsgp7iXlCEODrdlDbF8tCqXIOotEPgoyOe*)
(*8oMyaVZ2K0oq3/FI8i+KlKuLoSsh7xT4Z9KVY2dgi3+QFd0w5ZDwP9XSY67S*)
(*4bZvIhS/pGZHn1HzPbvo2eXArZa8eiVo1Ioj9eLUaG1xZnRhemRxZmRlYWJt*)
(*de7IoV2333b8scdufuLpW559+90f/K7HfvLn3/HVP/jEV/7ok1/+99/zU7/1*)
(*4Q/8xDOPvO/WjUdWxk/X3T1m/8zAtkbvturAtpK5I3B6vYip9dvuoOUa0UtF*)
(*JKamuEOPZZzviKhqRp5i8l7trDQVExkHzBRHMaHeeJ2rdiNZVskBCZl0Kh26*)
(*NUrKroRcC0yNnzKIstagYA3vK0cb0e+uCElHaoC1UanNi2hRs2KmZrVdVmsN*)
(*YLZuXMfJGvwDHV7h7VpXm6mZKIVHLMtzDcEAQlUhF3KH6Mj/BnVSg2DQmDRH*)
(*5I2UZURWo68/2lFUmGUFcCM4OmhTpawyiMQTDIsqAlpfEGWh/LQdKcaRbPID*)
(*CUHTZp9JlS/sAqFqCwPsgrupKgwmTT0wzsIoQsrkvXi0VZ5qvSCa7cSCFiGe*)
(*GlWukYxTakk1ujbjTM3UOg8R4ru8lwcAMjW5r1BjwkahS3t3DVOLf5VVrpAq*)
(*1wxdhWtzrULY9iU1x3RdK2JqvpMwtaFKMDJUnhytL86O712Z37M8u2fXzN7l*)
(*mfX9i8ePrtx99+mnXnPXG5+/723ve+CF73zwI595/FNffMN3f/513/JjT7zl*)
(*4w88+M7Txx/bOXuxVjrACgu928e3b6vvCJnajpLZG0TX1AZcdyBhaqb8+keb*)
(*yNRoZQKLKuzyFJP3amelqZjIOGamPorx9cbrvJSYWndFmN2UlF0JuTpMTbUC*)
(*MElksyqRdfhIZqrkRBB9s6tXhJGMG9LKnzyMxjM1M6ZpaTOTFr8pN1qY2h4x*)
(*1l9Z429dEBCy1tqu9sJIaJoh3f0ozHqhTtJ/d3cCyuUECh9nrZ0cg+KaRIMG*)
(*euap7audvLKaqhQ7HAU0gm8HDarCgoQd9BHPF6Ote6AvRGVKHrNKCgD0l9cx*)
(*aakHEapSI8CgFIbcRRsQcHR+OKEw5HTL2c+KAfcUsYCUnEqNAiMrQqFO5Aik*)
(*G7W5TjtSagkUviC10aBXVL5AqSIPAhCCaaoXNMq44J84WePvgVEZTDeqYONh*)
(*1weqjakZCqbmVUt+o1YaH6nNTI2s7JxZX1s+tLZrfW3ngX3zhw4sHT+2fPd9*)
(*N7z69Zeff8/D7/rQy971nfe+/1MPfOiHX/7+H3r4rR+//OQHz1969Z6V2+pD*)
(*Rwxr57a+yZ7twz3batt3VAZ6i2afbw94TvSiftstmE7zk2om/0k1O7370Y4F*)
(*ZGr0lCHhUoVdFUl8Xsj2jfbJiydRni+ymqCzxdQQ4aNNSdmVkKvA1JCiEqd+*)
(*+y4cudyLjyTeHQz4VYi2jBOE0VYYKVML+yVMLaJmzLRZtDjZ0doYLY/RXQcR*)
(*U7PDNSl5kDZ9+xNM1ix+EsRNfPo4XRPUXhibLzZpv6wG/orFuINaqta1sL5I*)
(*TE0eV6tGsWagZ57avtrCRipQLsVORkEsMMVCgSwjcliQqII+psoqDDnWBHq1*)
(*EPOYVYTQyc6a7RNQm3oQoSo1AgxKYchdtAEBR+eHE5wVapgfRcgXHQPuqcoC*)
(*gwS33HltIPUgR1LeqM112pFSS6BoAyLkjlhROaKkggGOLuNPlfMNLWzhVVRk*)
(*rVtMDQm7LlwRADVTs33PKfpupejXK8Wx4fr0xMj87Pielfkjh/YcP7rv+NE9*)
(*hw4uHVpfPHJ08c57jj/1zB3Pv/ehd374oXd85O5v+aGHPvq5Jz/6hVd9608+*)
(*9tZP3nP52YOrt1arB3oLsz29oz3bh3p2VLf3lgb6AtbvWQOuXXCcguUY4ZlQ*)
(*dLbjRDdgMpGp2S15aTA1SgaRQgV1rnGm9mKjaIpqQei8irRyNZma2b4wqiDh*)
(*e0Gz/BZK6MCAX4VoyzhVU3UzpM01MWFqzEyWxJCdOWbS7Lg1b8uO7sy2wxZ9*)
(*SURsVvIepBhB+I/4A5WWjUzPdH1Qe2GkHwHQppX3Pd9erWgDCwZZZScTErwL*)
(*vez5yuT1+cKmG0EGJQYK7A7GGdEkbmfofAQ90oYd9Cg3BtUo2uSCLlCME4Uv*)
(*Gxw/qJYIf08XmFCmW12JGMAueEBUceOHEwqD3yiMAlaRFgMljKAFQVmbfUqR*)
(*SKUkdkFyAQaHtSeXZTySCkYKschD4JiJcUb8FToiyCmhBkdXwdCOBRpP/s3f*)
(*eWK2nZXBZK0Tpqadm7g7nMfJfZiFsJmte3vSa2qe5wS+Ww6ZWrU0MTY8Oz0+*)
(*Pzuxe3XhyMaekyf2nzyxb2NjaX19/uDGzM13rr/81Reffc+9L3z3o9/xY0/+*)
(*4K++6fO/88IXfu+9P/61d3zvL7z+ifefO3BXo762ozDZ0zvc01vr6avs6C8N*)
(*DATGgGsOOlbBthOaFjE1w47Pj2KyxpJPcDeZGnL3IyVNlIAooqT5CUKuMdCU*)
(*IS1lyGIC2scL41pmai82hDaR80Wpos7lKl9TwwvYJMwLRJOPodaCdoKk0vXS*)
(*BXMNpp5t0rT4cWErftWSbUYtoWmuFXG0pMUP0CZMzU55W/T6I7vZ0mUqomyR*)
(*lSZTi6/DtfaytMWjU8/KKFnrVupx+3hgKYBzICG6htjkdWSE4EatHRxS7iiB*)
(*cQaHU2FQKctTQOUavxEJhWpm5cYAjkIpGGJe8olQOSr8oE4i6ak1knqmW10p*)
(*GFRd8FpVxY0pliDWPl+EUQRTFAwUT1UWBGVtAWhLRVZQCZgLMDisPbks45FU*)
(*sJOVqWWKM9hdMKW1LOMnjq5Coh0ING5yJxi8KZ5VxOyskLSYGcXvE2t9rwd3*)
(*RIs/K2wOOTOTV5yxAv/Amh2/zsOLL6vFTK08OTEyNzs5OzO+sjx36NDu48f2*)
(*nTix99DG0oEDs/sOTJy7tOeBx04/8/a7Pvzp1/zMb33bb3/zB/7kf37xG//j*)
(*81//Lz/663/88fd83yOnH5ybOGiYEz39tZ7+Ss9gua9QGjQCVnDNgh1fzwtP*)
(*jIyomXFLyFrclC8zZLTyplSpKuyUwk4FSUqqAOqrBpLt44VxzTK1a00oKbsS*)
(*cvWZGt0gLrKmyr4AQLUdHPRK1K2caNUSyiFLlu+Eo8VkLPrApOXEzXXtcGF0*)
(*HTtlauE/w2bb0SdFLGvz2lnqltm8TdKOf3GyWvcFxAQtzmRK1oheULKGJ5ee*)
(*eq19uuBGcgydY2+qI9dA2oW1n1zRgdGHA4sQHC7djgDGHQe3M8Kakyk7oI98*)
(*SPNhAMFQ8tut3IHGkWVEwGC0TqR5IXbHw6KqChw5y8jUWPsaDpafMF+EUQQ7*)
(*FAy4p3gZ0MMie0o3qAIDiqov352SPi0wpLvKO0roBIRyrCjGc7iDBC2fcVNz*)
(*jsFY87rVINcivtZ8kRfhoIeXBw4PlGR/k6mZhfh91IVNphbf4ROdk3hOMfAq*)
(*5eLISH1icmRycmRhYWL37vkDB3auH9p18ODi2trs3v0Tp84s33XfsWfecvkT*)
(*P/r8v/0/fvQv/vHn/+6ffuOv/tev/tHffPaXf+9j7/zOB0/dOTu9z/LHeoxK*)
(*T6G0zSj2sWDQ9Fjz2Q7TYmyTpnFMLXnuQ+kdJXGUWPF7dUFryzv/D6SW0iQi*)
(*aSV6AUYgkS2mlkkyxb8rcv0yNVVfwT4+a3C5QnUrT7REhDdKCfgTdhURrJCB*)
(*ubZA03zP8ZxwgWxecHNtJ2zJxx/FOdjkZi0yl9A022z9dpfcVlGIX13CENcF*)
(*LyiBxePfSeqzimqs3Bg6By+XBG+QtZ+W5B4FGU4WfCAccKpDjzMjrDksyxk1*)
(*6CMwszJikJU7L/4ORZVNMB2GjqnxF0TAUfApnLWKiDkF1VRLEINO4w30rJ5e*)
(*V7KneEd6WJhCKAYpYJAC4CuBt5+jYhHkoJpWB3QQTDFDZ3c+R1RxBrNJP2Hg*)
(*EUInyckvpaHlwbgNGEkzwzZomJtvXeYfEgeFXh4yNlBSeK1Lae3X1OLn1GKm*)
(*Fp2WBIFbqRbrjcrIaG18cmh6ZnhxaXxldXrfvrn9+2f37ps8cmzx5tvWX//s*)
(*PZ/5yRf+9P/+hb/9n1/97//7a9/8+1/5N3/0g5/+7Ftf9aYLh24YmVm2KqM7*)
(*nHKPFewwvT7LHYweTbNiJM2Xp8UX0YxW6xJTyySEoOU56PBJVKU1hxeChS2m*)
(*lkmELHSxilRyXTA1ueCRvoJ9oaopdhBUXcmIPNESAZmamV7Zim9TtOILZXbC*)
(*xFKa5jqB54b/DQlcdFktZmperLJ5y2N6NAjJWcjRXMeJrsOFf5jRU2/RfZXp*)
(*PfCFa4ep0fOODy0bzF1mdPBZLSCHVNa+VuceRQYs16Fq1gvxAS3Ie0HAePyR*)
(*JQLfq1IGnVJhQCIgoxW+WYaD6VbuEONgCQmCZDwRhKnhXqgwaJFTYgiOzhRL*)
(*EFOc2wihyIpB5akASWVfgASaBROHjw4mXQVbyLL26qo26Uh88I50HTB0DBLZ*)
(*eFaoSOKQyKRd8jE1s52sRQasJhXiLqgNhM2wBpldYFbBCJsZvw6awWHJUR54*)
(*TNoB80zNkO9+dOOTE9ezPd8plrxyLSRr5eHRyuh4dXqmsbA4urw8uboatvED*)
(*B6ZPn155+JFz7/vAE1/6+W//5V//yK/+y4996cvf+okfeMOb33bn7XftWd1T*)
(*nJwqVGs7/GC76/Y6Tr9jD0YPpIXnJ9HltPReR6FRmZqqhLIKGHawoliWg45g*)
(*Ns0yMgqSTdWgW0wth7AsZyMdynXH1JCYgPbl6UOZjxb35Gm3JjKIkxcVU9vE*)
(*1GRqTnLBLHput8nU7MBzwv96dsjRouY7dti86IpauFrFS+jmKhpTOM9pUruI*)
(*phmmtflQcHJnRTtTS5ZlzAtKcIjrCb0LXUdWFrrw9Zkjy52Xh1wSvEHWfmTJ*)
(*PYp2UGTWy3FTTa5OZg1Dlwh8L8U71sFBUwhFMme7mI5ORM6FnI5UE0m6oWZq*)
(*Jm0K41Wk6kKpE3l0pliCGHQmhgSEjgH0lEEriWxfximb1erIBsGk4/b5RNOZ*)
(*GjE4pnqZzaejSjHFeCaceOIocaac6KY6goX0PDm60SW6+YXFd/IV4jYYNtOO*)
(*m1MwHYPZcQu5ipm09ifMO2NqBIGZmtl8o4dpx8/OJ2TNL7rFil+JyFqpMVIe*)
(*G69NTw/Nz48uLY7uXBxZXR5dX5u+8eyeBx84+cY33vnm5+96y/OXX/u6m1/2*)
(*8LHz55f276tPTRhDtb5SsMN3ez1nwLXj94iE5zOtB/fbrqZx19SshKlBvjJo*)
(*fegwMmDYKQYZetCRpwDYJetEEyxsMbUc0pWyIcrVZGomwTV5L1+oeEwETXkj*)
(*ffpomVonCQIhGTqmxl0Ri6hWfGuBHfhO9F/PKvp2yXdKvl10raQFruk7pmsb*)
(*dvTc7aBtFRzbcB3meZYbNt/2/HAVtRyXWXbM1OywGWGLmFr82HK8CJrcEQDz*)
(*ghKNrKnXdhF0VMUjY5a7qCwQRWuQInKVMmldzQdPC1uuRnAiy9tVsHMAljuC*)
(*OsQpDGKTVwaVj/goWpxXX5A8qmpJK7JrYNBwDEKRq7pQ6kQ2xdSn8fLoKjCZ*)
(*MICeMmhGyPZlnFoHKaMjuZY7CsqqRxQzmdX6kttZMHRp6rUh0mIGI6lKXO6A*)
(*8Ej4k+G0O3+ObEefBLPit8xHbzB0nLAZjlOwnYJlFywnaYaZNJu1yBrH1FoD*)
(*amEzhVB8gpla67TBij8bFJE1z/YCxy95pYpfrgbVetAYLo2NVacm6zNTQ7NT*)
(*tcXZ+srS8KH906dP7Lzl0v5bb9536037L5xbPXl0bt9qY27Ka1QGq0F/0e33*)
(*7UHPMlzLcEzDbl5QM5t0FmzxvULg+QuT1vksvmNZVtUS3hHposoRfSAGHYsF*)
(*CxYkuUOxJV2Xq8zUsopQk7gdXhlfbFVGVFUqR6mLTqVCYmpW9ISZ60avwC0G*)
(*bqnohhwt8K1SYFeKTq3kVotOxbfKnllyWdE1fKcQ/wY14NiDrlPwPMP3zbB5*)
(*vhU30/WY4xrh4h8ztYisMSu6uYK1fh+7akwtdxdVrQp9hfLIgZ+OoSsCrqsd*)
(*4gSRq8DLE1nernWcDpiy5qgWGYpBoSNYWhQMpmKpeXEFyaOqlnIkDp+PdAxy*)
(*F/oCwoddNYXlmY6MkgkD6Ck4I5jiGKQdBQ+ybJASZwFbKghTEy6x0YPTRQE9*)
(*zTT3KaFW2c8dZ3AUJjG1RKzN18ibCVNzQ4ITNdNz4+YxzzVct8nXbNewo0O2*)
(*EfM1kKm1HnLTwQZ9pzmlZmqt8Zv38Ljxz8KBG5K1oOQWS26l6g/ViyPD5bHh*)
(*8vhwcWq0NDde3jlTW56rr8zXd81Xds5WFqfKc2PB5JDTKBplu79oDQRmwTeZ*)
(*Z5oua9LTmKaZ8U1DllloXXssRP+O/mwxtc1TGKg8uljYabVobo6COiLlzdoF*)
(*qUatfST1FKbGIMkepy3JI91lamD6kLRqMy4UJ14bvDK+2KqM0H9MyF2oyIzT*)
(*MjU7ufPRdf2IpnnlolsuRa1adus1v1Hzh8P/Vpx6yaoGZsU3yl6h6A76zoBn*)
(*93tOv+8OBH6hWGTFolUs2WELiiFZY64XrvzRL3WmU0jvgWdW6xPbbcsv4Ah9*)
(*2uYIGqWLqlaFvkJ58NL5cg0mtEMRwMsbuyWqgmToRAYrGawKSgYRUxQMKrOI*)
(*Uyr7SATAiHU9HfkETCKYAmKtgoHVBhwxjhhU7VUNIReAykd+FxIQIgahO1ir*)
(*KoR4HED7uBqYYq3wGUHe/Cnv0gZHKxTXEE95JOkuUzeR8YGyRkyuZ4ojgtf8*)
(*aYbV+i7z5gU1y/Sit9xbvmsFnhX4YTP9JlkrhM3xEqZWaDK1iLdATCk7U8uS*)
(*GhVTayOLyQtGorefebbrO158J0+x6FTK3lAtGK4XR+vF8aHiVKM4N1qeH6uG*)
(*bW60MtsoT9dLE+VgJPDqjl0xzRKziswKmO0ZTshTHaNJwZJvuAlMzRKZWvP+*)
(*UN47OcuU8qBk2XiJMjVwdFqpbEkXpEOmRhe52ukzBVxkcGUmHYUp7uC/JGg3*)
(*UoSfcenDIAmqdIJDliNgju14EU3zYprmVUturewOVd3hujcxXJwcDqYa/mTN*)
(*Ga+YoyU2HBQa3kDd7a86vRV7R9npLbu9FX+gWirUymatYlUrVrlkFgPD9wdd*)
(*b9B2B0xngNlhG4wfW07uhE9+sjMY8ItdBDzC2VoFVfeEdyKUOKtqVeibhp1J*)
(*52za0qLgVC2hFClAn7JSge98MhLxgwOlAJhCQH1tBlUA8HmHGxdSjJcHGAet*)
(*ZUTnKosqHUhGKKLqi2BQFTliMFNh4xhSHXkqCfBY9smFOKjqK+vjAcxUftpc*)
(*yICFp9IGBweR90BeCaaWI9dyAOUgMMVEzoGZSQcIVdJz+GK237rjxO9gTqha*)
(*/NHT6I5Hzw2pmZXcKlMqOuF/iwlZi1t0G4xnWG4hbNEDa9Eza8ywDCP5qpjJ*)
(*MRNDaCIXkz2lB0lB1sTzhOYXYGO+Fr+w2nRD1wKnXPKqFX+oGgxXg5FqMBZS*)
(*triNVv2RstcI3LrnVGyrbFkl0wpM2w9pWkj7DNs2LJtjaum35qxWa76KcvOC*)
(*Wst3Lll48QgpI2Y5VX6xmBrihaxDdx8ZXVbIVUvXtOA+vujOysXTIR6wOzEI*)
(*eDWCykw6CiNzgYKcKaZPvjjofEx0rbSFS3j0Yv3ofY1u4LulwK0UnXrZHa65*)
(*4w1/ajSYHSvOjwWLY/7KZGnPdHXfTG33RHnnsDdTMcb9vlFvx7DfO1LsG60W*)
(*xoesyWF3YsQbG3YbNbNSKgR+v+v2OW6f5fQxu69g9Q2a/YPWQMEqGLZRsFhh*)
(*8x1TckvQM5au052JKj54FzC5Ql9dleVMKIghq8hnRDj4TAHMjR/sm9okBpCO*)
(*WR5d7khJnAohXh5gHBDw8tCZAo67g3uqGoioT7GscoSyS1XkCGbVXmKsQGVw*)
(*NvEImXSMoGNQ1apsQaWMw0YmoBwNSrhUSUlEdQ8ksi6B41J24eGiBBxMqGCQ*)
(*SVmmCwhSFUOKF7wv5uYj59GbQ5pMLb6alrxo3nVYzNGc5IaZqAVOybcCLyRr*)
(*ZoupseiyWtwSshYeqY3kBSN2dMqQXkPieRuTao+SU8QhdTM3v8qa8CWbmU7M*)
(*15yQrMWvGfGjF/iXitGtQdWiWyt59bjVArfqOxXXKTt20bYDy/bNmKMxy2G2*)
(*zWybu60xZmqtL84lD23EHwZn7RcXTclHouNCdRFTTFwZ+F7IrO+8CFn7Ygia*)
(*VfmCjw7q4GCuL8EdvBacVSXlyg2XOybCXqHa+Y2qufDiCojc2vxitZ2+89Ft*)
(*MbVw6a4W7UbVGRvyZkaDhYnizsni6nRp/2z5+PLI2f3TN67Nnl6dPDxX3z1i*)
(*L5T6Zos7Zsp9c/XBhVFr56S/a7q0NF2emwjGh+16ZbAU9HruDsfdYTk7mL29*)
(*YO4YMHsHzL4Bc2DQMgYtNmgaBZZ+wKXtSy4R4JixhQsjA+6RzBMNcCGid2HS*)
(*WiT/KUSbPuOI16Ap6xjfhfgrnBYkZb5Q8Gfqq7VMhC0HDbGGrE5yd8E+jpa+*)
(*7gkD5QgaWBJgElVCsY97kUkoqWFZzlXoCLOmBtTh4THpGEEPKZgI0MessDPl*)
(*lyg4Bn4jny8DfYoNySayXRW6rPgRYRmXdHA4VR55s/KgFNl83rxJ05KPniaf*)
(*BDMc2/BcFj11XnbrVb9W8atlr1KMjvhF3/I9ywvJmm+6vhmRNc+wPMN0Cyxs*)
(*TiG5uBYRoubXUc3WRa300pKSBWQNkZlaVzG1OEKxaRZxJyvGFl1cSz8IG70Y*)
(*zXWd9OXVYSu6ThA2x/btZvNCdSsiaMm7HFsvdTRbTI2ZUuN/RW67AwiiqBoP*)
(*s09GsDy0s15bS6opQMEmlC7FC8EX3CmV0Ae6ZgV38FpwNlOldWW43AEBa4lJ*)
(*R+F86+rVEQm51SRo0U3rcYsW9XBVc3zXKXpOObDrJXuk5k4Oe9PDzsKYu3um*)
(*eGx19JYjiw/euO/lN2287NzaXUd3XtgzfnjK310bWK337xszDy9Wju0ePrl/*)
(*4uje8fWV4d0L1fkJb3zIGKr0l4s7fD8ka9uZvc2wtg9avYNW/4A1MGAVBkKm*)
(*ZhmF5qc2B0Wy1mRq7bc/qH3UVpGcLO0iwxQLndCL/5PvImvmENV8wUW19iKj*)
(*UAJIDLWgD2LOEwsIBm5WBQBHq6oQ2QLfRWtfVX4IGHDQHGHJJ9rh8NWbbo3X*)
(*x+2oJkI+hKkmMS+8sqDDw2NSeWSKgBw30M2ssLOmgyI4BtAdOY8UL0DwiH2t*)
(*jxQkMjCTPB9xhPTgUEYxWzTNtlstJiHx2+QN2zQcK6JpRd8sl+yhmj86XB4Z*)
(*KjZqQb3s1opOpWiXAqtYtMplu1SxixXLKzEnKFj+oBk2b9B0Q9bGLDe6dJW8*)
(*ZiT2Tc/UhGM2MWh4JLl/G83vvjWZWkxQ3bS5Ttwiif7lJJ+KdeLYOM3vFYTM*)
(*004+bx09jNH67murGUJjyTkJlEEk47g7OapIO194hNpakg3yZkHLAphO0gra*)
(*7NDgllBE+9IMSqV1UZh09MxnRLajmjVdAt41aZ9NHFOzomZb0RrmRUzNLvp2*)
(*uGgPle2xujs97M0O2zvHvUM76zcfWXz8tiNvuP/scy+78PQdxx4+u+f29emT*)
(*C8W1kcEDY8axheJNh6buOLF0+fTKrccXz61PH1lp7JkN5kfZeH1gqNxbDrZ7*)
(*3jbL6mHWdsPuLdj9g9ZgwtTiGyDla2rNy2rJf3CmBqYGiQNlOVJ1YdIZgvCn*)
(*UBKC2Xwvp80xX2Qk2vhcieXxCi28YB5VYcl0NAHjBhxCpNRT4oybVSGhxFCA*)
(*jcchU/3IG7UIBR3tFMskqRcUm4IyrkmfYqowChHOiiGHZILN40F0kLSqqoI+*)
(*DXmRZwEx+PxeEJXWR14NXElUIo+LDyHHRy4MOQ4MuuVSK200LWpm9OaL6DM6*)
(*Bdcq+LZR8li1aA6VrbG6NzNamhkNwkP85JA1WWcTdWO0PjgyNDA6UhgZMYaG*)
(*C+V6n1fe4ZR67WKfFfSHlM2KrrJtMjX+6fIIcPM6U3qIZlJT/gpBFDn1zXtv*)
(*ostqMVOLLiXa8aVEp3nrp9OS+D7QJkGLLgwmb1hJPmDdxtQ2H7uDG1x+INQc*)
(*SaT4LlcUv0sWsPwE42CpZ1LuxDsQeYcGt6RzkXN9RVPDpKNnPiOyHXkidKVo*)
(*uy7pohH/1cbU7Oi3J88NmZrrBJ5dDuxa0W6U7dGqPTVkL43760tDNx1ZeuTS*)
(*+hvvP/vmB8++6b4bnrhp7f4Ti7fsHzk5762PDRyZYudWq/eeWnzk0t5X3rb+*)
(*6KX995zaeX5t7PBSaWXCnG0MjFV768XtRa/HsXssazuzeg2rv2ANJnc/QkzN*)
(*SP+drsTxe0fYlWNqxC6qJVq1NgrGeaaGr0jIykyZL+AqjcfnCq2QmdZeupqc*)
(*R1VYhPLQ2pfjxhSi0lfFGTcLwlANqtKkxIGYDkEHxKACyQeHGHaiZPJCUMY1*)
(*6VNMFWchBVkx5JBMsHk8lFrCJRMG0II8BYjB5/eqICE+CmrgSqISeVxKqBEL*)
(*qtVAFe24Z8wvJEmZmpOwkfjVyrZV8GwjcEKaZlQD1iiZY7XwyO7MDbvLE8Ge*)
(*2eL++eLaon9gp7+27O1fdnfvspYW2fTswPD4jkpjW1Dd5pS32aUddrHfji6x*)
(*RVfWNt8G1nohGNeUTI33F/NOl2txb2toM/rOWuvUptmalHVTrPg9mGazpTQt*)
(*cSY60SgwDVODMOB5J1YjLrwFuaLS7aCA5ScYB6cwUVlltnMBXxqZ7+fua01e*)
(*XC+Io6sK4wqh6uJMIS62XQLeNeGBWSlTs1pMzfHi14nYRc+uxLc+Dpetsao1*)
(*Xbf3zlTPrE0/dOHgay6ffP6hG5+798Rrb19/5PTSnYfGLqyWT8yaG+N9x2fZ*)
(*pb21l51ZeurWtWfuPvLaOw89fmH3XYcnT69U9k+bSyP9k9XtjWJP2etxrR7b*)
(*2mZavcwaMKzBgmUUopfgsviugvYn1FpkjRmFTaZmbD69K3tHOd7lKDzVQifk*)
(*mrcvDIeseMjo/N5880XlL65PUdBqIr0oyhSb8sFCFRYhDpSMg0lXOUKPM24W*)
(*hEEJHbE8cuQO9FEGhozO2n4jUlqm48nkRQqPknT6FBNCIQ9nQMcIoptyeCnR*)
(*y1TeeIkSRTaowkCxQ/dCGxNTShCCXAaPC45f5TgYHH6XrKnwMXkJmN36R/u+*)
(*5iehLSe9dBQ/mxa4rOyzWsCGS+Z41Z5tuIsjzvKos7FYPbt/5JZjk5fPTN97*)
(*cfaem2buujRx6ezQ8aPB3n1sdnFHY6Kn3Ojxaj1uZbtT7nNKg3YQPbzGXIM1*)
(*X+Af8ZvkwCw9Sh6zM+6djapod5rrlKk1Q9B6a2RCZ9PTnZimxWf58VYmX01r*)
(*MjVDZGppboA7PHHYcuq1fSk25bIBddIy02IASxRJCpjE3K4hssXUXlyRc62d*)
(*jx0OR5nyFCNCWYKr65VzpBNJUfFMzbbc5Pnb6BX9TvQCqEpg1UvWSNmaqDkL*)
(*I96R5bHbjq+88o7jr7375DN3HX3VpX2P3LB416HRC7tLJxesw5P96+M7js0a*)
(*53eX7jk+9fKLy6++48Azlw89fcu+B07NXdhXX581d470TlZ6GkFP2e3xrB7H*)
(*2mZZvabVb5iDBbMQMzUzflK3wACmNshYwtSSW8TFVSh1TV67VJK18FQLHQJD*)
(*NbRsGR893Ztvvqj8xfVVCkSnKL20+rhNsxtMTRsH2abKC3qcGVRL2vKgACaW*)
(*Bz1xSExkYMjoDGVq9MLI50UKT6tMjyGvjFQCa18oiHPWzDhl5BTQPdVWCC6y*)
(*QQSD1g7dC0oYme5wAA5KEdAUHhymOA3mdwl/KiKQ0jRbQdZY/B5nM2RqbvQ+*)
(*jfC4bvoRTYuP6RU7PKbPDXvL48G+6WBjvnjr4cnHbt39/OMnPvjs+e/6F7d9*)
(*+N2X3v/2029+5uDLH164cLGyd71vfK6nOtYTNHr8oR63tsMp99ulglU0zIis*)
(*sRZZM5rv8JeYWsxtCuxKMzUw4CzB09zRfnqfMjWbb5tkLX2dmTrjuMj5RWYc*)
(*XZCyAXXS4tRiAEsUgQEmEUEO8iwBvGrQlyRNu15EzjVxCnQ4aCdDCBOE3whO*)
(*5Kyzu+uiGrSNqdkpU7MjpuaGTM0cilZ1a7rhLU+WT+2fuXxm31OXT4VM7dW3*)
(*HXrFuZV7j81c2l8/ucvbmDXWJvv3jfduzLEbdhdvPjx679mFx27d8/Td60/f*)
(*deCRS8s3HR5dX7SXRnvHyz11v6fkNJma3c7UWPLWXzNlavzdjwJTay6gYJzx*)
(*Q568bAq7kDCCKxLYkbWfl+L26bWRY76owoJ7iijkwGBKs0YbitwBQSAhqcfj*)
(*AGJWbZHta2EzAlPDDaqiQfFOZU3QxH1EhMemUgC7UITYS8gjrpkphqAOHyU5*)
(*dBQf5aTTfdTClsGrrOE5JXaheCpESbaQ1azgIyiqQZEu2soH7QujgBbwP1Mj*)
(*3Ilq+sZm+cQ1fn1hzNSidx56tu9aRc+sFe3hsjtR8+ZGgpXJyqHF+g27Gzev*)
(*j7z2ngPf/txNP/Wxx37lx177r3/uua/+zDO/8LknfuQH7n7/+44/+vjEyfOD*)
(*c6s9jdme0nhPMeRrIzu8oX6nOmiVCiwoMI+lZK1F0xgDmJrBzDYCJ8cZSas2*)
(*6XJhtEbd/MwPr5zGCWZqDGZqcqnweVGhSp1FqpdY1UilySL3RYpT0KHgUWFA*)
(*ushUC0SujcMWTbvKwrLM1i4O2skQ/DRh0tFZrrSsRdhdQQZVMzUzcFnM1MzR*)
(*qjU3Vty30DhzcO7ymb2vvOPYq+86/po7jjx5ad+DNyxdWGscW/YPzpt7pgZW*)
(*J/rW5s2ju4tnDw3fcmr63os7X3F57an71h+/+8Dtp2c2VvzFsR0jpZ6aFzE1*)
(*1+xxzB7L2mGa/SxkaswomCBTK1x9pqZKkLwuIRFmCqaGp4mSzazzRRUWLRhi*)
(*HIhzVsaAjEufKTIYZAg89QgeUA1MOmhfC5u9GEzNVP+GAwYB91ElAjZELVPe*)
(*ZXh4LyGPuCY9hkxR0nyU5NBRfJSTTveRknoBvMoaU58QIl0ypVLWxGsjq3FD*)
(*LUJqQJdxkSGB9gXXQAvIn7yF9lNdWzjvbemYHFOzorfTu1bZs+pFZ7TiTQ/5*)
(*yxOVQ0sj59dn7j29+NTtq5989+Xf/Kk3/5+//e3/7T999B/+/KP//S8/8td/*)
(*/q1/+Ptv+dzn733bu5fveNDac7RnfLmnMttTnu6pTPWWJwvu0IBZ7mfFAcM3*)
(*DM8wWvdAJu/hEJ5TE946okoNklM842BVsBZBS5+bA0xJTK350J3umpqhm5L8*)
(*BSMZodAL2YV4itehbEfuAtrX5gIxqO2yxdSuU2EZTy3oZulJz1on/DQhGtdO*)
(*kCsniEfINbWixypFNlSOHjpemCgdWBoOmdpdp3c/duvhV9159DV3Hnnq5rUH*)
(*zy5fODh6dLV8YMndPcdWZo21Ze/YgdrZ4xM3nZu/+5aVR+87+OTLDj/x0OE7*)
(*Ly4e3V9enOgbLvVUvZ6i3WRqtrndNPtCpha/KyR+xW+ENz9Tk+PMpCNgKqAy*)
(*Ei6hI96FZWRqqY5WAVyf8V50ZQpaOYBE5NpZI+eIAtWABOwOph53IdWnZ1C2*)
(*rIUt1BJuFsEAjo5HG3GHVxOE4iOITTAiuEzPOwhPq0as1UwxBHX4KAneUTCY*)
(*UNKJXQSheAqqyXGQY5IpWSrlTFC1eZETofVCwMAUhwxwI5NKVxt/pljDVRFW*)
(*hMRqb+37ktdk2MyxTS+679EqeVbVtxsld7zqzw0X9881zuyfu//c3tfde+i9*)
(*T5384kcf/vdffv6vv/6Bv//GB//hzz7w/3zzA//tP7/nT77xxi//4uX3fmjp*)
(*wSeNjRt75g70NHb11BZ7agu91dlBb6SPVXoLxb6CP1jwCoYT3ffIzPh7pwys*)
(*qDaOhrisKgB8ryo7cR+YFsV/QEzNSO7j3DzRACsBKQYEPyKUaa4KHXFqCDo4*)
(*TgSGKS1QKoOCEO9+pNjR6mwJKPlCJ5ccpUi0NukzSKWvnXSU4gSnVYfe5RDV*)
(*iDBTi1/RX/KtaslqVOyxurMwUd6/NHLDgdnbT60+evPGk3cce/qOo0/cfPDB*)
(*c6uXNqZO7B06tFxaW/L37/SPrg2dPT51y4Vdl2/f99B9hx5/5NiTjx1/4tFj*)
(*l29dObHRWJouNMrRQ2p+i6lZ5g6T9bGQhUW3TMQvqIpvaI+/p5a2gvxGkeSG*)
(*BqFYhDi3bxQ0NafKqojJqVd1Ye1MDcmCYBwfWoZNMZt1ZmWaAjmOL1rLWgC8*)
(*Pv1QJSMX9OUuqT4FEmhcBQMpP9wsHj1iHJDhEE2wCHFIAjbZFGufI0RIMjyK*)
(*DrFWM8UQ1OGjlG6nYzCzTzG+FxhbHDyyFxTiECA24nYtGLCjnAiiF2lHIaep*)
(*qPRlR/DgMGgNl3Fmim0qVutJrOZlNYu5NvMds+zb9aI7UvYma8HiSPnI8uTt*)
(*J/Y+ffcN7331zd/37nu/9NFHvvKZJ/7VZx//7Z957Hd/6RW//xtPfP1rj//m*)
(*rz/44z959t0fmH34afPUbT3Lx3sm9veMrG4b2tlbmet3R3tZbcdgsXfQHxh0*)
(*Bwt2ocnUpFsNwQhkdRkvElXK8DTFf6jeKAIwNVMxK7UZF8YFhZ50MHSUSDLo*)
(*oJMpzrKa1qAg3XrQbIupXWXJNFvpNuXZ1F0MlIkJWibW89UR8Y0iVuuNItHH*)
(*1KxK0RqqOGN1b268smd++Nie6YtHdt5344FHb9p4/JbDj108+ODZPbcdXTh3*)
(*YPL4auPISv3onsb5Y3N3Xtzz0D1HHn/k9NNPnH/Nq86/6skzr3j0xB237j62*)
(*Mbo4YzYqPSWvx7N7HKvHNrdZbAfbZGp2/J1Jw2hjaoX2t/QzialFtKv57U0F*)
(*UwMTBS4yDD11ETriXYgrHr0LuKSz9nMSFYasYLT6HU6xLk4BcIohkOTji9AF*)
(*jCFxXQKNq2CA5QeOIkebHg1KRVHSIcQBKS2VgqCJRJuCR+iCb0TQynHIGkNQ*)
(*B3eZ4maiIBenKqQqANohVGpyHFSzBhkCHI64nQIGCS/RC1UktZbzOcvv0kKi*)
(*DCRIegrcugGSudGzDFbFd0KmNlxyJ2vFnWPVk3vm7z5z6LX33fjC07d991vv*)
(*+eTbb//Uu276xLvPfv/7b/ihD5/9iU9e/OxnbvqJH7n4vR8//s73Lj3xhtpt*)
(*L3MPXyrsOjE4u1EY2T1Qnu+zx3YUatsGStsH/L5BdyBlarFfjAkv628do1vv*)
(*Z8y2aMspYNIUppeoaKGdrKmYGt8XTxyvKYOnVCOe4tROoVDIVDyMcBQm1h7o*)
(*C71ut5jadSeqdHdok3VwGplpvmS1rJogL4oIb+lvvavfCdma71mlwKqVnZGa*)
(*NzNWWZ4ZOrA0dmrfzK3HV+85vf+hcwdedm7twTP77z6xesvG4tm9k6f3Tdy4*)
(*PnP5/P7H7jv1zJO3vvkNd7/t+Qeee/byq19z6eFHTtx80+rG+sjCjN2o9Rb9*)
(*Hs+JX/xobjdZLzP6ojsbo7smcKbW9uXr5Lllw0iW/eZKG/7bkJ7/NZuZSg4W*)
(*m1+fAVctpqBdvAg6SJesidZWFF/YgibYl7XLFUKSY4p1cQqojn0gpNQvpAsY*)
(*w0xrAmW+q8oPgU2JXqaljO6XKcUBKS1QQaUJjpKpPBAMCCQVYPMKMDWwi9bT*)
(*NOByfYLuCAaJkUTU5DioZg0+hHYsClQVGNBlYaMWfxpqwRSIk+gsLnJyifUm*)
(*iBW/cz49a41fBxl/yjlmavFzamb8LhE7ZGq1wK771kQtWJ4YOr22695zR151*)
(*+dxzLzv/rlfc+Ob7D77uzqWnb5987d3jb3xk6h2v2/n+t+/90PvXP/CBg+94*)
(*z+rr3zr38tdNX3pw6PCt5d1ni5MHzeJCrzm+bbDW01/a1h/0Drr9BXvQiN7S*)
(*H7+7Ob75hXu3SEqFku9kK31HHAdrnt9LL1HAAkfWusvUZKFUI7F4EKam6oiE*)
(*JZOAvoCpAWWLqV13oqrnzm3Siz8fAIomODE79K6L0mJqDtfchKl54fIeXVZz*)
(*GlVvYri8MFHbPdvY2DV+9sDCTRu7bj+6ctex1bDdvrHr0v7508sTZ3ZPXjg4*)
(*f9+F9SfuP/fGp+98y5vuf+tbHnzm9Xc+9sqzd9x98NQN83t216YmrGql1/d6*)
(*HGebbW+3zN7o1kdjIFxyYgZmsWZUC+3NSKKYvG9XZGqG1fruppKpNQU6XggZ*)
(*Z9x5lypogk63itYkVxSoRt94JZDQlelTgD4N6Yc8HoNKwBhmwkw5cjHooKnS*)
(*p4da1kT0ibkDLVM0cxzB6Zp4F1UcVMoCTrmQkBiq6g3sxdvPEUmk1AVrxEgi*)
(*avi4qmDmGItiBwQjdMTjQBSTvPJ0Ikha6VFNaFrC1JIT15Sptb72bLqOlTC1*)
(*ckjWPKvqmRNVP2Rqp/buvOPEwYfOH3ns0sYrL609dGLm7iON+08OPX7L1Jse*)
(*XXnvc0e/61sufPK7b/vUJ+/4+Kdu+/aPnXv7B08+/MzKhYenjtwxOnfMKy7u*)
(*MMZ7+ms9faWe/mDHoNdfcAaZlUQvOQqb6XGZewqseZjGfVdFTNCU44mnVVZu*)
(*H4Bjaps4YcvgLJDx432zRoBSPJ3EMJMgrlHMCkwtB+3658DUOuezgrWu2Omi*)
(*gLPpCo2CWwYn1JUAk0+Sl0eF1IxrEVOLv4Ft+Z5VDpx62RutF6dHKksTtb1z*)
(*w4eXp07unj29d+7G/QsX1hbP7Zm/Ydf00fnRE7smzu1fuOfGjcfvPf+GJy8/*)
(*97r7n339A089ccu99504d+PKgQMT83PFkQYrFXtdZ7tt77CtPsvst9iAaQyy*)
(*iKmxzTeKmC0+Frd2piZdU0uPCMmTzEb6MxgU53aaJgeEstowBVPrPB3EirpC*)
(*9Zx7FKJy1sWcCEB1zAK7E4+VYJdkO75yqlYeuQt40Lw6yZUB09ORqSRyrMA5*)
(*IgB2YToRlHmcYGqQ0ek+CvbpXbQVi0SACAlxjTJNrrSAYLqCQa6KrBWYe9Cs*)
(*gRWe8bFb0s7U4hbTNNuxYqZmh0ytFJI11yw7xljF3zUxdHRl/vzB1Zs3Vm4+*)
(*OH9p79iZxeDMknPHRv3pO3a9//VnP/3tD/zsj7zmV7747Fd+8fmv/Opbv/Sz*)
(*r/vUjzz23HtvvO+1aze+bOfy6VppqS9kan3Vnt5ST5+/fcDrE5ga434XlVr3*)
(*mVqXsgJA5fMlrw/CxhQ/v+Dz1UWcyxqY6JrwosRQWNa6Yg3X6SKFebGEuERf*)
(*j0J3jamlWxhwwZWJo3QItd2iZXK3jqe2kyU/fk4tJWsxYYsuq9lF36kU3aGy*)
(*P1oLpofLSxP1PXOjBxbHDy1NHgkJ2q7pw4uT67Oj+ybqB2ZGjuycOn9o9c6z*)
(*Gw/cevrhu8697O4bL996/PyZfesHZnYuDo2PerUKC7x+x+4NaZptDdjmoGUW*)
(*zPgBtISEta6pGXIzjPQhtU2mxrvTuppWiJuRfhu7PQgtfUPclaZGu9oIeVTl*)
(*NHfSMxUYji23UIxkclAOrxZhVpfloxVTTEP8GJc15oj9tJf8kisZsKme9XQ8*)
(*oA4FvGqvbBnBg8cBH0XrGgWYvFGVXEEZLAO5Izg64iMlShTXVBWLeIfbp8BQ*)
(*jU5BrjKVY68KcI4uuKbZvfVTKwIwyiokWFC8mYE13wXZvKZmJcfxIGJqTtmz*)
(*yg4bLXsLo7UDC5PHVudOrkwfWxw+PB0cnrJvWPTuOTbx5oeOfOqFh371R9/2*)
(*H/7ld/35737iL/7g+//sP3zf137zgz/+2Tc8/75b7nn64Jn7d+48VSsu9hdG*)
(*e3orPb1FnqkZyY+gzfUMpGnt7lOKShUlU7F25a0l7tRok1FmuKamcgHJNTKR*)
(*KfjpGFSOq8cQU4YL1WwWU8mfKjrW3etNWuEH6tYVwK6E69qUHK4x6dmKbmHI*)
(*MVNyjNKhnZY5y9y88NS6e7wl7T/RxUzNiV4B6blO4Dkl3634bi1wRqrB1HB5*)
(*Yby+c2p4ZXpk98zYnpmx1cnhXaP1haHSzpHq7snhQ4vTx3Yvntq/fGZ995mN*)
(*PScOLh/cPbs005gYLtXK4cGCefagbQ5EzSrYpmGbrHUveORrwtQMmaalTI01*)
(*XxDZ+phlcy1NaVrBGAxbfDvlZmq4OCQHkuRQAl864Q8ElNSoMpWjJPCKShEi*)
(*1rpVhFoLdEi8vnxIIsKg2JeP4yq02qMkGHMiTtBHmanJQ9PjgAREpakNNV2Q*)
(*IVRxyFQh3UKLpEPWBMsALAykr6yApECbFzCMBUhknMTgaDVVqdTazzQcHXa+*)
(*Qbselu6KarJowcs0zUwfxm4+p2Y5MVPz3eQ47lRcc7jkzTTKq9PDa3Nj+2eG*)
(*do/6O6uD+0fNG3aWHzq99N6nbvrS9zz3ja988v/9sy//09985Z/+7qv/++9+*)
(*7Y//3ae/8IV3Pv/CHXe+8uDxuxbmj1X9hYGBkZ4d5Z4dQZOpDToDhlWIf0uV*)
(*fweFvSYmCCnCHNMKHpo/3eB6N3dxm2QwjDtqywnCvQCFXquZ9DOESMGvO7KZ*)
(*RSimri+mBkp3g3ZNSQ7XiKtBJoNdmWhE2B3aiW21aBr3qCxomL+hwnGcJllz*)
(*3ZLnlv3kylppcrg2Mzo0N96YHx9eGB+eG67P1CuT5eJ0tTw/VFseG907Nbk2*)
(*O3Nwfu7gwvy++ZnlqfHpRm2kXKx4bhASwPDwET1aZrRuWzflZ8ZUh62ElcVP*)
(*o8Wvf2zFh+tYiGmamqmpfzWVl188NbJBUI2pl3HQcocrebfqXGtEyJR2RFVa*)
(*iTCy2keSrgqyUE7yXjpOoW6ZWKXK0fG0UiCBcWCSaH2hOwsK7qMMhu8Iblc5*)
(*iyhogwaOooWkjQYxRCqDOH6cqVFqVYCt8gVxkGKfMhxxb25h5CW9cySd4JfD*)
(*m2lx4C3FLXlqIKZsydd3kttjPCe6rOZaQ4EzUQ0WR2vLk/XlsfLOhrtQKewf*)
(*c8+sDD96474PPH3nlz721v/4C5/8xz/4uf/vT3/lf/3lr/2PP/+lr3/14z/4*)
(*/W96+g3nz96zvP/C5MTBojPT1zfUs60UMbVef3u/1zvo9BesQvoeDmL9s/b5*)
(*gsQHLHK5F6VQVXHmo51qgmuXqiOeZbBX3lzn/1VWoy99YO7qMzWKvASY2ktY*)
(*cpdlF0sIn63GtczUDA1TMyGy5kdkzQnX+UrRq1eCkXp5bKg63qhONGqT4T+q*)
(*pdFSMOy7I4E3VgwmK+WZWnVuqL7QGJpvNGYa9YlapVEKEprmhTYtM72rIKZp*)
(*YbM23+Kb3sEen34IP2eZ3HtDouuCfLd4t8Fipha/KFLF1JCAE1ddwab2oEBZ*)
(*xkEMV7TAtEjwUYQpoIUku0bxItNhi5I+eebKBztwdtOriCkO7vK6QY8hHZIq*)
(*DgIGrQva1OMK9DKWwyLsRYKTKuB78YBoQ4GnBrQm/wl6hxhU4QeZmnxlDbes*)
(*9SK3hQ7H7bpZ7XzJiuRK3MWEVIswR7SWOLLWPCzadpOs+dFB3C650fevh0vu*)
(*1FBpbrg81whma/Zsxdg3UTy7d+qxS4ff/5r7fvojb/udL3zvf/7aT//d7//s*)
(*f/mDn/vm73/h1z7/bR/+llc+8MjRjfMzO48PD6+65kTvjmrPtqBnh9/T523v*)
(*d3sH7QGeqeHzvcOJgPTKNGcBlAqmJriA9yJ6oR2dIt2fO1tMTTEc+O8tASVH*)
(*PXS9foTFs/O5ho/SDcTcNbW44UytnazZMVlzA88tBV6l5NcrxaFKqVEtDYct*)
(*/HfRr/tuzXXqntvwvZHAHy0Vx8vliUplolIdLZcbxWLF84oh6bNCmhaXeOrZ*)
(*5prAPcDbutuR/1kuDUrzDk6IqW3eBdnenxqkjpkaL7JZChLKSs4fL4iuEQV3*)
(*BFSmQ5Jdo7hA95SYPhVsfpT0T2I9qOyzLJdX8IDIeFSQVLDpOc2qJiuDAQQL*)
(*WIgAqKMqMHAvr4MHDXFTBqaNDDg0/yceASTOQsctpkY3SJkvWZF0hakJcRb+*)
(*wRRVTcafPMvNzNbvrk58HPcismbHr+u3h0ruWC0IydpMozhT92Zq9up4+diu*)
(*8cun9r3+/osffvaxH/7gsz/zPf/i5z7xns99zzt++Due/cBbHnzi0TPnb1rd*)
(*d2Jifn2ovuSwkd4d5Z5tfs8Ob1ufu6Pf6QuZmpGXqWWaCERlbcTkCuHtgzp8*)
(*mkDXwCwLf4KDgqNTJFN50CzmYWpXBAkqW0ztWparWQlaUc27riDspqftU4/C*)
(*1IQra57r+p4X+F4x8EvFoFwMKkU/aoFX8pySYxdtq+zYVdepum7N8+p+MOQX*)
(*h4JizQ/KrhfYEU2z409xsvip46SxCI8TN9uKmhVdX2t92BqCmDK16D0k/G0e*)
(*ZuuKXPMFkC2mxvulCRL5hz5hL79AIUs9JZXaZVw+anRRwAMirgweyIiuUcqb*)
(*PguISOg+0l1T2ccxMOkIjoMBA9gt2EJfYuoR2GBtqLqA3oEiBI2uI4+LBDzd*)
(*hdsHu+B/gjbxpAsdryhTe7EEyUUnBo3WB6e6aB88OcxqnymWCKFCcmBODCS9*)
(*LEu4Q6b1apHAqRXdRsUfqxWnGqXpkKw1gp3jlYMLo+cP7nrwxiOvv/+mtz92*)
(*1wtP3fuuV9713MM3PXX51D3n9505Nn/o8PTywdGpPbXKrGM0+naUerZ5Pb3e*)
(*9j63t9/uE66pMZpQnGVZ1jTBPiUL8nzkZy6ytuBjgduJYUGTDHiRtRdqMSdT*)
(*48F0BwkqW0ztWpZuFmRnGOSlppMFFhmlG4jbPxSC3v1otr9UKlnkXdf1PM+P*)
(*JQj8IPxvyNr86EKb71ieZXqm6VtWYFtF2y45bsXzK17I0fyi4/mW48YvDLZS*)
(*nsisQtxY9GfC1BwrJWuGmbxBavOuRt4TgKkZHFOL3woZfYMtef9jnrsftZEX*)
(*9srFwCuwlyhTM03ghBYPWo5pQp8F7Dpkagw6iFNgI/bzwRb6Uupf5QUIWO4i*)
(*z6BMNY90kXXAcbXgtfZVMTHRJYKYR7kjJT5ag9qBsnbsiv2so+PlZErT8Ap5*)
(*h2Rc2wXMlJDoTsJiQq/059/nXC/7I7Xi5HB1ZrQ2N1ZbnKjvnhk+vHP63Nqu*)
(*O08cuO/MoYfObTx4dv2e02u3n9h9fmPx6IGZAwend+4fn1weKk97Rn2gr7yj*)
(*19/R5/X1u/0Ddv+gFTM1/hlyggjOqtzJVN7EjLNcTI0opqKqiX3pkruj2qAp*)
(*fwWPDoaSIOidpSTyCxohYutQtpjadSeqCY6sOflG6eLs426AbH2GjMbUmrdP*)
(*OE5C1iK+Fv3H9dzoZSOeEz13FhMww2HMNUPKZoXULCRoRccPbM8zHYfZdnSx*)
(*LKFpUTOYXYj4ms0ztTayxsy258+4oGiZWvLiKcPAmRprb20BB7vwGwUdvpdQ*)
(*AOBGLEvdOB8jHAo0HTMBZmSmJisT7eNqsmUZiZAsCgbcIA6GniCT9l0Y2UGV*)
(*/Xywhb54zHMkhdeXu4Pe4TWPdJEHktGyziRrWFSQcIOCBUp8ctRqPjxZJXfo*)
(*EGVDzcIEhS44gCLJ0QWcaMJeXkc7CqjWfhxvvgcy8J1S0a2W/UatNDFSnxlv*)
(*zE8Nz08OLU4M7Zpq7Jsb3dg5dXR56sTK9MnV6eO7p4/tmT68e2ptz9TuvZPz*)
(*q2Nji7XSuMtqgwPl/v6gf8AbGHAHB5zBQWuwYCZMLfmZlRQKwU3QIzzXSIS1*)
(*JaeaPoybsMheECoRJ0UoFro1FmewSdayvqifDkY4wzSv7lqUT7aY2nUnqgmO*)
(*z2XcILJMdQ+3mX5NDD+Yq5haStY81w3X/OgDbNGX2KLvbEaXx0zTMS3Xsj3L*)
(*9W3Pt/2wuZbrMMdm0fv4mRHxsqiZrcbijdH2zdsgTcNK3zQsrhLiG0XUTI3h*)
(*uWBJGls3irT9Aoavw/ifwrEV3IilqOPzMWTFk0XVnV7GvL4KkgBM6wLYC9+L*)
(*WAYdp2DIClUOCAU2v4VoVlsAOWALfXE8eFJAzLizoHd4zSNdeOMqqEwxVYlC*)
(*D4vckW4QBJwpSnRgLNfJsBY2sUtWg9oYCh7lxkmETR+Fj7YBHRT4vXKJ0pGn*)
(*0sbUkstqnlMM3Eo5aNTLYyP1ibGhqYnG5Hh9arQ6NVKZG6/tmh7evzixsTJz*)
(*ZM/c0X0LR9eW1vfO71mdnl8aHZurVSeK7pBdKA8OBAMD/uCgVxh0jUHHGLSM*)
(*hKlRnhAX4gBminecGAfZrDwdVGogElkHx4kLEhAVQnokM9lHDZoM+CW7a4BN*)
(*BVPDlzK5y1WWLaZ2XYhQh9oDZb5Zqd3YFYnxY5ZlpiaQtfC/0aa2mWZapmUn*)
(*328J2ZnpuZbvWSFT8x3TtQzHNJyEqZmmG/I5ljRmG/HrKHmmlrygEv6cR/xK*)
(*fxVTa6loV8iYppnxPZJR21yMwJjwGWetcy3hT6EwkDrRrrp4aWlNES2oSkv2*)
(*AkEr6FO8kwNFsa9SQyYj4w61slAyQlRDfMRhpwq4MuIppQCIsIW+OB4iYJMW*)
(*DZV3SN2CeaS7TBlLBkz0QtVL2EUJS474gOApwOTwavFolek+0kNB7JI6lcms*)
(*DJjiQifg5YqVc501KcJ28Dju+265VKzVyo1GbWSkPjpaHx6pDjfKQ/VgpFGc*)
(*GK0szY7u2TW9tjq3tmfhwL6l3StzC4sTo1O1ykjg1R2zbA4GhQG/MOgZBc8s*)
(*uGbBMQsWK5hGIT65MAhotTNOdo0ehMRm+pQiroYg0eKUUTG1IMg7cVmuoo6E*)
(*+wJ4e8OQ5PAxkS2mtiXdEnnGZTpQEu2rBu2qK03L+LwGmVqyyCfrfPjfZEv7*)
(*rIm+tGmZTthsMyRrCU3zbOaaMVOLiZjbZGqm27ymtnlHdKQQXXEzLPHKO0u4*)
(*YPojj8DUsBMqyM1k1UmZWuuSHBRwIePsJc3UQC8QtGkXondyrOj6lNFVweGN*)
(*yF0Q4/TEqXzUKvCotDZzFAAdttle2EhH3DveHW0oEO+QuhUKlRKWrGPJmIle*)
(*q3qBBUkPDjE+QpQEIypgTP00nxaVSjmfj/igYC9kl7aSVYDxjXQY2rHkipVz*)
(*3WEMQabmeW4Q+KVSsVItVWqlSj38b7FSCypVv1oPhhql8fHazPTw3Ozo3OzY*)
(*9Mzo2MRQfbhcrHlO2TKLzPCNmKMxw7MMzzZcu2BbBcssxG/0Sk7qtRHQzjjZ*)
(*NWIuhBgi9amd+xScSM3wdjIVCTHpPMKsRUgZGhS8VyeDgrlIFLaY2nUkL1Z8*)
(*VDNaJZ1ULD9oV+yAZrXrP8jUeEm2C0wtaRazbdMJOVrc3DamZqZMzWHRXZN2*)
(*+1uGnNYb+822GyDN5oNrLR/M5u928UEh+ttKhk4cbLIzVbWkC3lC02JljKnJ*)
(*64awNvKR5AsAX3lU2DKVWW4LgqeyC8QylssJ15dH7ERNFWQwOFl9BFPfFdeE*)
(*oNFt5igAOmyzvbC1+CkKvGT1LpNkGiuTHbovoAKyhQIYVFaJ7AISB9UQlC6I*)
(*v/xeeh3mGJ2CjV7JKpHVVN1zI5SrTq5GiimVcnqMtloPMsRkzQnJmh94QdEP*)
(*SmHz/JIblNxi2StVvHLVr9WLjUZ5eLgS/rc2VAw3ukXb8k0WEjTXKDhRM8ID*)
(*u2sx1zYc27Atw4oeXNh8F3M7QhkzOPW0scJrCYwkblYVdhwnU//CJmzspDwo*)
(*HelFyMiCr5AdAjYVtAscNzW4xdSuI9liat2yaRAO6JZaeAWhk8maTC2+rOba*)
(*EVNzLOYk19qiZjlm2OKH25ovEjbt5K0kZqRgWwnvYjFDixWaTC1VTx1JaFkT*)
(*im01qWLzuJAQSUUQDNb+kFq6S1aW1w3GXlJMTbVKU8pPLidcX+hItI8fHSjB*)
(*yeEjmHq6XxTY9IiBnlIKgJ4Rs72wtYXK2o+h8l5ZMnmXSSijCD5S7GRyRKXD*)
(*FBMtU2SQvrwYHcxEehe8Y1oP9DrMB0BrEK9kPHo8JJWnLMvtByqEwqByNVLs*)
(*aHPB0uOkcHHNj5rrO24QNa/oeCU3Ym3lkLVF/w2iP8Ndtu1Hr3g23OjdYQU7*)
(*aWZE0CKOlrT2r+ZICHlITMGAtLHCa4mSNVXoQCQqnMIQslnVn0TBkau8IKpp*)
(*BV8hOwRsqpkaKEiXqylbTO3aFwatn6ryzlSx+KCdGwFtyu4gXTJPkOhRsoh8*)
(*xWStrSU0LW52QrjiR9uSP6Lra9Ftk9FzzwnpYvElNyu5bgcwNbPJsmL0lplc*)
(*oTMt2jW1dDXOdl7HoENAphUPjza+SFJMES3w1aXCTKnAtEumshcCSNHER9cG*)
(*h+KjMFCmaQJC0sLOGrEcBcCkcwZkRNbBmScOWDtupsoH002PpPDpMUG0qOSB*)
(*ZCOIwaxJp3fJZJzeKyvsa5Op4engBYStSqjwvbYcyUXqmZh0pCPI1FK+Fl9d*)
(*C5vteLYdNt92fMcJHKcY/zdmZ5ZnxZ/hsUzXZNET51YbOzP5xjM1OG78iQTd*)
(*XyFWiLKwi2g2NQ6mmChCF9WfRMGRg/AomuQFVSnaYFK8U51SIlHdYmpbohWW*)
(*nal1ZdCu2AHNUqZeKtrZwbiW/B2SNZttkjXHit8TGRGxuCW3TbZoWkrW4rcI*)
(*h8cNO+wT3QrZpHaRttliaimOZN1v3Slp8TSNMelEnW/cKiAih8Ilx0pYRvg/*)
(*hX/TFzpwuBxrJtGCUF1yGRMrOe1CX6jBdVirjI9OCY7WRzmt9MSBkLSwiUFQ*)
(*eUopANk7PJ701GcCjBtE8kiUTJGkMzXVWDJ4RGTNTDHMWiRZE6ctiawwrkGm*)
(*ps0IL/TpwzpgaqZu+SKakgHzffljt3Act9LnGpKXOEdvbQ6pmcM123StpG2+*)
(*mDn5kE704R2bmXb87dO4tZhaQtOEiKSRxJkaMVZIcOQEIZblpBMrBBShi+pP*)
(*umh7qQAgyvqVVCfaYObwVGWtK6a25EURZIIgOl0XfNDOHezEAm6Z6E4Gsyb/*)
(*riCOrCWvgkyaFV8si/6Rtmixji+fJS3aGNM0x3VsN+F1MU1zWsp8a8rmh9fC*)
(*f9isydQMxh8oBJpmmvxdj+0NiAYjHx3AONMXOtVwoCCm8I543gXM2tqQ3WTt*)
(*dBXBj8AAfUEUchxQQB+FsZj6FIjioOyj8A+VTSSAiI/I6GBhqIKTKfXaxBFr*)
(*CfROFXxEAUHCx5aeUKS0VAbBSOLBxGOo7QsizzeQbIFuWd5LB5YvSqouKo/k*)
(*WUPsKO9K9XnWr7WPjAhWO8VrFWZeR3U9Ir601moRWbNtz9lsrcOwmT4+nrTk*)
(*AQUrPuBGTC3+gpqZHoub3zNF8IDIKbHSxhnPl6yJrDN4RyTmKgz5bFICQlSW*)
(*/UUczwqJguHalK0LZFdCOiz7rggOrCvedWJEa1zlTqaKba758SUtI1mcW0wt*)
(*sWg1b1WMf7pLaFqTuzXvfYzIVXrPvJW06J2SbvTNl/CgYcUHiuYuOz0wJM3c*)
(*POi0MbUmbTQ2+RrAyBSNAe8WZtmvMvCxVZ3mIX0pKyduqsMaFlZvrZuyd9rR*)
(*iQH5/9l702DLsqs8MBupKvPdfe787hvy5TxnVlXWrCpJVUJDSSpNJTRLCA1I*)
(*CgQIkGQJIVlGFoOEGSSDzWCBAAPGlkXbxjbYgHG3TePwABg80J66o7sdHW1H*)
(*t92ODrd/dPSP7ju8d3LfNXz72/uc+/JV6a64UZX3nDV861tr73PWu1OtTAJm*)
(*3PI5apxkRqaJpiX3Ehl73phLjRx41rl7bFd0t8dJYYWsXjI51BQBHQ9GsYDW*)
(*woSHnJsozCG29ZCXBfI86FP6YqENeWBNYHun4orURzql22asE5s0nNQqq/mx*)
(*B5JnoeO9c6xbf1J89ofR/avv7LH//pf9H0ydv3dlfjGtP4PQvfVNX/FfOxdj*)
(*2kZHvtSICSeJasKSeTa522gPTJ9gzWKH2lC8pJskhNxjy/A8TWU9qa1CArFa*)
(*QUOWCdOfWZ3saa50OYTGNw+22/kX885+ReXge/PrYS2+PvSW3uu4P3AtJrV+*)
(*7+DVtPlbH/f/pDdY/FWvP+wPhrP30fcHVW/+XSQzD/3F9HfwatvsL3sHk1q1*)
(*mB3rwevgOX7U82ZQmy3fA8KkoJcCcatcACkJOJYYau7mH3JeEgJZkBeIXLcA*)
(*s6kJ6thZvrolNQHPpkMgGrnpkKmd5zzJPyiKSV1SH3AY22LesFszKRAXlEYQ*)
(*aOqAWniAvQKBenkCPINA2EN8vBt9+ilWSEYpOJtr4mWE14WZuxmlPhKc0vNZ*)
(*eICT+qTD+KD7KYbu/g/sHFxUD77eefFa2+I7vZb9VO5Xde3zbL4pFAvOqMq8*)
(*gRE6IlCNk1n1plvvuAkYOMRgMFeBu5Alo3jADk1u40fPbldoLEcQUq4wzcms*)
(*wSwhtxG+2z3lLCe5krXRsT6r+gekzUltJnpSq18a6x18rnnQn09k/f7infLj*)
(*QX/xGPX7m8PhZDjcHAzHvcGo2xt2e4Nub3+s6y8+8tYLB59oDvvvjwwH6A7e*)
(*8VhV9TdT+Y/1pGa8isTYJrPDFyMMCVOR5dY0SfIMSuldNE0wIiPsMMl5rGk6*)
(*THaaKTESpgQkddgDqCPDM1lrM51klQF+XUqvvkHtKgylsZpXrwBfdGakoL63*)
(*3s9wYNhVkhWlrMcYh7oiOIpuDx3F9Hk4JWh4b+na1u9/8esIihtnsSDkECa1*)
(*pLJZR127rFXPo63obRCDAVwF7kLGR2GSWoUczXHpNsozgA2mObP2B1IYYHy3*)
(*e8pZTnIla12zPquDnyWrgjmpma+p6UltOqPNvyp4/r1Tg+ljMBnuP7bHo53x*)
(*eGc03p795MvsW4TH08d0cBtOH6PhYPYFJNX8S6jC/h8GD76wfx7/1pjWTQ5r*)
(*T5tJLe6Tgl4lATPe+OggCuMWrJcsnrUJWIagjjE/SWWvUhrJioThIYlBm/O1*)
(*TuprEXhMzyDBZI6xwzImPagAvzD0CKmIZe4B89AmAzHKlTMsmHf4mhAvSi6G*)
(*pIlJUbwYSRMzilcUHnxWLrGs6p5WfgK8JK7mWVdf6IgdMuk/S9mrvoehczBg*)
(*gl0Lt4QXFG+DHhhTYg86XBYhvC0pJAZ9/ChMakcBQy1HB0mxhBWMG61IVsN7*)
(*yi2uGjNoGXXeRbk6mNTqGU1MavGFm5jUZi+iLWa0reFwazqjjYY74+HJyXhv*)
(*Mjk1mextbu6ON7dH463ZY3NrvLm1OZkOa1Pz+ZdAzh7d/uKbrPaDVGHxxshq*)
(*ozt7pIa1p8ekpk0abrke4CxvyehxFPHle0lveL1k8SxMct1qfmpJFl1nEQ7e*)
(*KVQToqvJi8dhVo5a2YRt+hR5YbcgRIxNg2GqzOcY6NekAJOeW9IzBp/lARe9*)
(*idRXAeuFF/u1GAEG5LIKwNo/rkhwhHTeBDzvYRW3cCF6eEHJ+1iT57j6cTPw*)
(*C7n2k7umdEQPw0YkeDPEm6Twnxz9Kn+bMoXpE7NYzbsUC+PfUzgKU9JRwFDL*)
(*0UFSIOb6Wl3j5UrWQvCUV7SaGlInenh5UqviV9PqSa1SF3TxObXe4ov160lt*)
(*OqMN6xltuD0c7oyGe5PNMztbZ3e3z+5sn93ePrO1fXqytTfZOjnZ2tmcPbY3*)
(*J5PxeDScznmzLyOZPeafhp79o7f4ce3ewaQWbg1r7kfVDPLLrg54p2Vss3pJ*)
(*7+RZLeQBZvzoy5N5ULQfP6kJhwwAzIBAYmoCn0AE/7roJjCT87KgXllBjkzR*)
(*QXST4crqqKS+UPBiBcWz51PnCBxiPybI+t8mzwxLXqa1gAXCuyJtk8JMaiYe*)
(*vRAA8lagmlXGfIIqZAVqAnh1+g2Fn9Qq6y8MgNssAgvY9gLF/aAvSWWboRbG*)
(*oQkmeSHAWa9iUmMwJP17CkdhSjoKGGo5OkgKxOvn241rX7IWgqfccDWBcOam*)
(*ga2oP5x29bc/7f/SGZzUDh77k1pvNOhPRoOt0WB7+hgOdkaDk+PBud3J5TM7*)
(*l05vXzo1uXhy8+Lu+MLu6Nzu8MzOYG+7v7vT39rpjbd7g61ub1J1N6tqXFWj*)
(*qpr9Uuf+y2qLsLNJrQp6TLORO9TxRTHZJmkPjSe1LFsMmPEjVmVYvnf1hJnU*)
(*VrTANWAvhFiMeG0GNUGYtGgPJBgmaO5Zb1sACEWCSWBkah4zQf0FO2uBMLUO*)
(*zSa1OERu+TRCU3ifWR2bFG8QW9rV62+f8D+7xOTSEKoXVFDhYTCrUNAShyOr*)
(*CMpc6/m7R29NHT5dXkRdcXJS07YgI7OpWmy/yrmlb33o4FNm/OjjhzAlJTEf*)
(*qeHoSIHJFXFZzL2KrVqydiFPc0VbWRl1xZNaZX00Wb6mNvv+xvl7Ffu9waA/*)
(*HvYn48Fk1Nsa9U5uDs9sb144uXX17M5dF0/euLB91/mtu89P7rmwOXtc3Lzr*)
(*4ujqxeH5i4O9C/3JuWp4qlPtHg87x6vtje521ZsObpu97mAKLMx/qK0/n9Rm*)
(*j+SY1tak5hGO6y5sGf/iqRAesL5IkRuyGTSosUV4fhpNajpToMwURXggwXhB*)
(*8Q1A8vZAFwgj7CxPakCYttdgAMIYDEkUgyQc4qRGUucJidB7SqJaHGQ2/3hM*)
(*8+61yCz4HBnxCPS2lPgs3peaw84qKBOUd3ho98Oh7UnNrGaWoXncvOrpLS4J*)
(*BkQ3PTNgittjIWStTWI9yb0EeFKMtljM0CLokRqOjhSYMglHclLDfVjgpy1g*)
(*wnkWdeSkVokxx7usL39ObTap7Y9pveGwvznqb437k2F3a9g9vT2+dHrn+oW9*)
(*ey6fuu/q3n1Xdh64uvWc69vPvWv7eTd3Hrt/9/kP7Dznge2b908u3Tc6eVd3*)
(*fOlEdebZnVPPDqeO90+F4V5vsN3vjrqdqjO7m+j3Q9XdCNX0kRzTWpnUCgjP*)
(*qjsDKdeh3o2ZO08volgOQf3q0NNiUjuccE3AhAaTGo/BTCH49zm6hZJJ8e1a*)
(*0Ni4pcNtndSyrIiMS0RAqupv6+VEXhGaYWg3qc7yXaW3pZj9vCLCNduH4xDU*)
(*qHUwmOeCQKJAolGThmTFO8tfWZnr09TUOyHffg0rwqzH4IjGnBRz2w/WGiyD*)
(*2lBMPo/mpNYWG81bqGH0Q9hOcyHxi5d01Qow7TyLOnz99U55M514Ta3f7e7/*)
(*xuagNxr2xqPe5rA7GVY74+6FU5MbF089cOPcgzfOPHTX3iN37z5238knnnP6*)
(*qa+++OZX3Hjn6+9/z1sfetfXPeeNb3/wZW++574nz55/dLR590b/2p2Dyxub*)
(*l3uTi6PRqUF/q1v1w/wr/BdvgOx1Dr7JX/+OQM2PJj88zSc1xqe35Wa1YhxO*)
(*RA/wrt4M0YR2BmeLF8SG4bLAeMSahkFdcIFbjDDOQvcJLi7DcEGvJjUrh3yT*)
(*/4LQcS0KyieEtyLyjo3T12vtOZ7UZj+hMpg+5jIcDGePqQxmP5HSn/8+8vKs*)
(*Br4/MAtDE4nrYpbJ1Gf2pRaxZdW9udpRmNRqBe+4h0EUiEGLeTYr3iEmNc9n*)
(*sMTcCUkwpkMsy15lrUMwwHuuCjDw4DWrhzCpmXJ0JrU6esM/ecUCCD8E0S1x*)
(*W2AISG0RslJuc6krm9QqZ1gTn1Drd3uD+ReJDIf92aQ27I4H1dao2tvqXzm3*)
(*fe+1M4/ed+GRe888eu/uCx7ae/Lxc29+5bX3f+1D3/EtL/7eTz71uc++6Yc+*)
(*97Wf+v43fuDTr3zF+++//6m9M4+FyYN3bt57Yufe/u7do82L/cFeVW12usNQ*)
(*9avQ64ZuL3T7ofuVMqnl+hQm/AWRCReKJrUVrQVxWVn1VpYMlwVGlB5fAYOS*)
(*pFsPg3aFa5q7P9/GWgduUtM0aipyUyCzThcxgMfcZPZY3vIMnWqxm89/Bnn+*)
(*rvHFex6GveGoPxrPfx9lczCaDOa/lTLoj3q9Ybc76Fb7X90kf5PLBnYoEpxb*)
(*Ta8nzX5uvRt1RLwkAeACwVdzTlCf3eqkKer5o8W1oBcy4zC5oYFdCyPRaIMl*)
(*neh7fclaF4vyX9e6exDl1l6HCUzsNhC/MDSfag+3a1ITGI5C9PWktlJIbRGy*)
(*Um7bpY7pqPSkNh/WRoPZpLY57O5uDc7tjW9c2r3/+umH7zn96H0nH39o9xUv*)
(*PPfON978xAef+PEfevtf/dJH/u7f+u7f+fs/8I/+8ed/9be/5wt//UMf+Pyr*)
(*XvbNN268Znj6RSdOPu/E6ef2zzy8uXPXYHSh29vtdDc7YdgJs2GtV/Vmr7HN*)
(*v8x/6bri7SqCtAK6eMJzN0YGUuyT9693XQYSDoEvQ55JK2tBMxAnmJtjMQAQ*)
(*LgtMgJOa7mTzLHALMGhvoKaiuEkkrdTaw2ymJhLxGANMaipyUyCzBrzNTy/d*)
(*Kd8ayuaP+vdQqnDrJ7O6VdXVOvPPDi9+jrLf2/8z2mjU39wcTLYGk53h5u5w*)
(*vDsY7QyG273hpNvfrHqbVXdcVcMQBiHM5rVuPaxZ2NLDWlttENaTmiXtTWr2*)
(*1yeHsP/ImtT0yvJ0mNKQq9KsuNgozChyI4g09cHOoUxqcYhl5AfLPcx/rqjZ*)
(*pOYlbrId1DYbP9URj8ikdhsxrCe1w4HUFiEr5TaXOqzAtFNiUuv15pNabz6p*)
(*9Saj3qmd0cUzk7uvnHzgxt7D9+w8/vDJJ7/67Nu+5sZHP/CCP/Mn3/6bf/3j*)
(*/+YPf+w//Ptf+C//95f/8//7l//Vf/iZv/GHn/njX3rLmz71wCPv3r7xht6V*)
(*V/evPjm5/OKd0w+Pt673+mc2utsbndHG9EZiOqZVvUFVNKkVFyWom0CgyYcI*)
(*q5zUhH8+axAi5E9qsU8SAPYQlDA5Nl+JcSwzHD6rvZmkiR5jGttzy3AukkoW*)
(*N6R2HiZuwfXLJN/rBJyFkGqZc7J8ldWHSRPg4WA0m92HzW7FOrPH/N+3ZrTF*)
(*u81vzWLLv2gZ6exvy7Mxrdcf9gej4WAyGW7vDHf3xrtnNnfPbW6fG2+dHW2e*)
(*Gox2e4Ptqr8VupNQbXbCaDqsVaHfDb1oUlsOUQ+MTGq5hOgjZuG8JjfbIBdG*)
(*LuZkpsUdAqTxpGYNaPUjbHT2HyWTGqOTVPZKbzqsay1+Rg0vZ2EL8AQ1XZrk*)
(*m+3HiPkbcLcQhW78OJjUqI7SOroEnmS5XchRmNSq2/qymn4TWnOfre8eudEP*)
(*bTvlIbUIY3XcZlHXVpWjzhOTWnc+qc0e40Fvc9TbGi8mtc27Lu88cOPko/ft*)
(*vurFl9/15gc/8s0v/Nxn3viXfvFbf+e3P/O//k8/9R//9z/7n//zL/xf/8+f*)
(*/8N//6O//Puf+GO/8Jq3fffNV3/75Zd98MIT33T5hV9/9dE3Xbr2ot1T9/dH*)
(*F473Tt4RNu+sRp1psNn39vcWP5C9/46A+f4Y5ehv6WVUhNs6qVVRLxX757MG*)
(*IcLTc1JrZQnEscxw+Kz2ZpKms4tdMe2XVXGRVLK44ahOahqbl4VpKDww5cOV*)
(*IjOStgd3yl01psWTWi+a1HoH71hcPrj/B7SDSa2/vT3aO7159sL2+au752+c*)
(*PH/33vRx5tr27sXR+HQ12Avd3Y2wtRE2O51h6Ax6Yb7HHuakZpoEblILywvE*)
(*bN0VCZNpQXskpdl9YJhfLzfkmBY26kcnGtZI2LlUYGVQZe2wrjWY1LS5sAV4*)
(*eDXdfozASW0xoPUOHou/5VCTmkmdLoEnSc/6+HpSaz6maQ/JcqxUshqjOIQZ*)
(*FCvngmne9rlS+zSvYgBeWaz637dGtej2oN9dfKlIdzGpTYa97emktj28cGp8*)
(*/cLk/uu7z3/g1Jteff+HvuGln/nkG3/qR97317/8sb/3t7/nn/3e5//wn3zu*)
(*X/73n/uX/8MP/7e/+6mf/ZX3fexHXvTu77z53u966H3f8+j7v+er3/nx57/+*)
(*Gx94/mvPXX/uYOfyV41OHetOjvU27+gNp8NamP8Odrj1mfcZF/Xfpd27CMED*)
(*T0iw3lhlspRVelw14JBErvU9QzKEByYrUwyeTI33LM4GVbgsAVd/no0qNanp*)
(*ZiM9B2dPMG1FUjhlHkl83NTXl7D6lBdCgDHvmtyECcwme0z5QD94hi7a6DWN*)
(*gzEtHDwOBrSgJ7X5K2uV/ANa/dbH0WAwHvd3dsdnL+xcv3nu5sOX7nv+lQde*)
(*eO2hF1+/+filyw+f3L0+GF+semc2OrvHT0xObIw600ltPqzN/xq2D1eNaYvN*)
(*1io9w398BwIKpHk2RbDqlYYJB856Ba3VBAxRcfMpdus9rfInNZXW7M2NalLr*)
(*LM9oha+pAX1PwdsTkiUwK+4VHRLixiLVAJikFExqGomXUZJDL9+kjj5+FMa0*)
(*6nZPaqtwm1XB1kMX91KW/+TBSu23PBi8OlaUXe3T25Q8hMWBFk+ja8N87+jG*)
(*w1o1HdZGg+7mdFIb9fYmg3O7g4un+jevTB5/+Ow73vDcP/rB1/3gp7/uJz73*)
(*vp/7iW/8sz/x3p/+8Xf85I+++Sd//A1f/OKbf+hHXvGxTz/yvo9c+/o/cvWj*)
(*n33s0z/6qh/8mbd9+k+97oOffuIN77nr0Zdunr1+bOvMsf7Wsf7msd7ozt7w*)
(*RNXfCN2NxR3DbOeaXWc6+/c58O+9osokJ8G5edYsZVU/WbJch9i/Z1uMmUeV*)
(*65zJjrHCOHEupug7AS9WErO4yYydJG8vGbdJc5EUTpmHUZ8iTeJTAHAMRlQh*)
(*WW4euekWaIJ+yM10MftEo5ke3KquNanVdwbd6Acw59+V251NaqPB5mT2vseL*)
(*V089+oJ7X/LqR5580/Nf844XfM17XvTKdzz/+V9zz5XHTp66fzS6Ek7sPeuO*)
(*zWcdH29sDHsb02Gt3+30up3uwW4alh5mvln8M9XRPJsSllvaK00yYhKPV1O7*)
(*oNbfBpMOTTXGinF4IJ2DSW2pqAfvqpMPMjRJWoG3pBpT8RQndiBTzYNkgiGF*)
(*n9TqN0DqDgHCcC68JXX0wSMyqd1GWTOQJWaLgtaND2Y1NrkwCxYLk6C3QXn6*)
(*xYEW/96f0+Z/De3O/+Damz/6s8diUutNBr3tYW9vs392u3fhZO/mla0XPXrp*)
(*nW987OPf+rrv/fhbvv9Tb/3+T73pu77jFR//4GPf/q3P+diHHvrkdzz68W9/*)
(*6I98+Oa3fNv1D3/7vd/3+Zf/xM+97c//1W/+yT/39d/3I1/zDR984KVPTa7c*)
(*c+zkuWPD7WP9yXRSO9YdPrvq3xm6J6qqs7ix6S3eL7R/V3Nw2SHyIjkRVIPN*)
(*0CtKAectOqyInXx1vRoDwP6LlyEOalaqWl5ESX5MlooRBjipeUGTBfJMvNZl*)
(*9o3i9iNt4+jYxDvL1KLOl2GP9Gb2AzBMKMh3GNaTWmf+Zkh7UusevP97MVDF*)
(*b5uZTWqD/ng8nGwP985Mrt88/+RrH/+69z/1gU987Xd8/3s/9ac+8LHPv+/d*)
(*n3ztC99+/90vO7f30Khz/tnP3vqqOycbJ0a9E9Nhrd/dmE9qHetPX2YuyQKJ*)
(*WoOznkOvq0WVeWEaTCde/1tA9XLUpIFOMHlg+go7XE5sQZp8zNTiMc0hAUch*)
(*9ZOpJduD1MGEkNyaT4HbXLHet7nwZ0xqZVzFmkyyvGEt6zllzQAvZqOS673i*)
(*GjI2ZJZhlk8+Rz5KMYDYav+tj7OHmNSmY1o17HcX737cGfX3xtNJrX/59PDB*)
(*G3sve/zG27/med/y7pd96L0v++B7X/wt737++9/+wHveeuN9b7/xze+5+6Pf*)
(*8uB3feIFn/vMk9//3S/5we97+U9+4S1f+qX3/9pvfuKXfvmDP/7T7/jwx5//*)
(*mjeevHHfsVPnjw23jvU2j1WjY9Xgq0LvjtA9Pp/UOr35pNaLPtxRRdXEBJKc*)
(*hNSk1nE+yFNWetGNLTo0wYtear1XYwxJ//EabA4jTlC7TXKSZKkYYXAmtcra*)
(*i8wGMENrnJ5trAYS8aJn5YhtRb7AxMwrTgeDCVz78d7MfsBkIs/BG9Y6VfSa*)
(*mnjTo3B7MKMtfkGtNxj2x5vDrZ3R6Qvb9z7nylve/apPfPabf/wvfOYv/dYX*)
(*fvOff+lXfv/nf+xXvvcbvvctL3vv866/9NzwruqOvTvu2Nq4c9w7PuydGHRn*)
(*w9p0Uusa71MwcwG9Ksg5zHc/Jm1Bg5k5BmeP6iyvzWmOQgdkaraK99RUBjom*)
(*LaayyV4SrYjCKAvkybxAjjyrQp/MThcii2dS/EmtEt8oYk5q1a0vJbr1sP7C*)
(*ctBL6hRJssfSQtZzypoBXsymwguT7EMzFrMMy5zjuDp0wxCix8Rbx299SC2a*)
(*1BbDWr9X9WfvtJl99+Nk2J9OaidH/TNb/atnJg/fc+7JF9x80ysfedcbHnvn*)
(*6x55+1P3veWV19/05KU3v+L8O19/5Rvfcc/HPvDo57/7NV/6yff9xS++95d+*)
(*/v1/7b/+0G/8+id/++9936/+2id/+hfe/7HvfMnr3nL+7geOnbowe0GtOz7W*)
(*GR7rDL6q03v2fFLbWExq/fnvYfdufYwiXc2sigc1qZEHQemTG36uw2SyTKOu*)
(*oldFUox/vjrBEe3H0+RTBoFyJfiTmo6YVSYvTSxJnAXtQdqKGnkmgIokk1m1*)
(*Jisb+yT5SXg+eGVj+RNhswDxpLb0Ff2R24WP7q3fue71B7MfUNucjLZPji9c*)
(*23vkhTff821v/v4/88m//Hd++h/9L3/z3/yXf/iP/4+//eV/9JMf+4lvet2H*)
(*n7zvqRub943uPH382dudOzZ7d456xwe9E/3uid58WItedwG58GyQ9zPJigsY*)
(*ySbxnPD4zbWzSMd0qJ/qf5dJjAEvAa9RecL5FcEoaw5jfXFcl5uBgRXMLsJu*)
(*TWzmKdxpol71U/+LUCp2WKMScIc4jSrOkWRpPaesGeDFW0dgz8laraZbLGXO*)
(*cVwdOkTX64KGMSc1JXJSq4e1wWD27sfN2bsf+7vD/unJ4Nq5nUduXnzyBfe/*)
(*9okH3/CyB5564fVXPnbh5Y+eeuXz9177wtPveOrat7zz4U998CU/+/l3/3e/*)
(*/Md/99c/+/t/54d+/7c///v/4Id//3d+9G/95md+7he/7eOfesUb3nb13ofu*)
(*nE5qvcmxMD62MTx2op+c1KqqvVmgWsGkhqPHZ0mHTLJMo66iV0VSjPMCzeT1*)
(*pSZBaGal7AXKlZC6uYrDgTKZ5h4nQJI4C9qDtBU18tIEVCSZjG2T+PnKmpCA*)
(*bdpz0I/9SY35FbNoTOsPBv3BsD8cDybbo53T42v3nnvRq57zgU+860//ue/9*)
(*td/70r/4T3/v3/1//+IP/tPf/Yu/+1Of+OK3vfFjr3nwDfdNHpzccXbjWTud*)
(*Z232nj3u3TnsHe/39ie17monNe9qlay48J9sEs8Jj1+0a4xfoxII6383v50z*)
(*1wVuPJ2aqZlkCUNilAVykyWRWhaGZPTc1EzkXmPgTtNZBzSpVftx4lB6ast5*)
(*WKPfEi1mjgyx1XpOWQ0DWS36NBK8jsysyT40Y3kLs3g3IOPqbSFEF47DnNRm*)
(*w1qv6ve7QzGpnd196K4LL3rk7pc+7+6XP+/6Sx46/8L7Tr7g5tYTD+6+5rEz*)
(*73zNPR9612Pf++FXf/lHv/Wf/cYP/9t/+MV/90//3L/9pz//r37vi7/393/s*)
(*b/zKd/+Zn/qmD337E69+3cUb9z179+yxanysMzp2fDqpDZ610b8jdO+sqhPd*)
(*sNHtdGZvfdw4+KhaOPgGSI5Akm3NM3PQKz1oxcq/VBX3Uuwn+JLrn+GwVsgl*)
(*nFTWVYgN46eaT5E+A8wEWWYr1iwIgXcV0wOoMhCAs6D9SFu+Rh4PmEnTYZLz*)
(*dnOsSrtlAd01Wf5mj8Wk1p/LYDAYjgajzcFkZ7x7Znz1vrOPPXn/uz74+j/+*)
(*pz/8M7/6+d/4wy//g3/3G7/8T3/hh/7qp9/92be++Bsev/qKK/37Rs86u/Ff*)
(*7Xa+atJ71rh3x6h356B3vNc90a3m3+ceOlZblbFhXp60T1x6E4DXPFi8cOZZ*)
(*LykRUWfkGRYITsRUZtYLTzWIklQ2wcQCMCQ9J9VI0nJzxCl49RLKGpiBMP7m*)
(*oflj+YNstx7W2W7oiIP7r9AFdYcQp0lytZ7UmjAA/mCV26hPd/FSLqZCL8ni*)
(*ja5AgjUsVJmT2tIY5hwvmNRObQ6vnN6598rZR++5/LybF59/89yjN04+cm3r*)
(*kavjF967++rnXXj3Uw9+5Ouf+L6PvvGvfOE7/vVv/cz/+Yd/5b/8z7/+H//H*)
(*X/k3f/CLv/3f/Okvf+k7f+Dz73nPN73ghS8/e+H6s8Ynj50Yzh7Hh191YnDH*)
(*Rv/Ozvw1tWo+qXU3OtWJTrVRf/3j02lS8zDgPZ+BLVxhW0bHQ9hQp4mVtwSA*)
(*2xZXZfN9Iwswv7GEIgE4C0gjbUV0s0ZJHgCTuUXPqmlujsmKm/5xajHgW5Pa*)
(*cDqpDUezD6lt7p6dXLr79INffeNVX/vC93zkzR//3Ad++C9890//zR/+E7/4*)
(*nd/4J971kvc8dvcrr+0+Z7e62r/jdOdZ2+FZk9lranfMX1NbTGonqoOvCwz1*)
(*/xp1i748eX3olX7xGoTQx7XGrZ70oNlOVgoo8z3WXEwOyQqSq6bKuYKYUWJu*)
(*AQaGNFKzoApMjjzbsUkOz/NH5+AxH9ycl8+6c4Xka2qJSQ20vZD1pLYKOcy9*)
(*4ohI6zunt6sUbHQFoU3x1Dw/YkyrlcnPqe0/erNhbTD/UpGtYX9n2N8bD87v*)
(*Tq6e2b3n4ul7L526/9LJ+y9uP3Bp8tDlyQtunnrV866866lH/8jXv+KzH33b*)
(*l3/sE3/w61/8t7/zS//bP/9r//p3v/xbv/ajv/Czf/QHfvAbPvjR1772LQ8+*)
(*+NjJkxee3ds+dnwwe0Ht+PDZJwbHN/rHO/PvfpxuVfuT2uLR6VT1m4U49kiq*)
(*9a6rdzat6ZVe74TJoE16idlsBSTSp7eZi38ku1TgrOjdifTsYebdmsp8aG1I*)
(*XsFDaocxoyetTD8AZ0H7xbb6vjrmTUT3eqYAv+CQbxITJ1DOahWGvdoKpKbd*)
(*1m+AnL+mNhxPRrNJ7czW+Wun7nro0vNeev/L3vj469/z8nd+6PXv+463vfVb*)
(*X/vSr3v8nieunnno1OjaKJzrHd+t7phUd4zrz6ntv/txowrxx2a8RHSNvHzN*)
(*Sc2sEegEDSM+a0ZPlgB4MCtYPzU9m+BNPysVkVTWeudXPZ+dFwWEJknLoreg*)
(*Cox/wXYB7JRyNf+CzuhmB77RMT2pHWAQgD3+Acj1pNZcvJdOvnIEJF6wZmtD*)
(*frdpBj8NmD8YS9wVsbKmC01q82Gt369G/e7si/oHvcWwdmZrdGF38/LJzat7*)
(*mzdOb948t/XgpZ3H7zn3yufeeOdrHvvwu1/zmY+88+f/5Cd+6y/92B/8rZ//*)
(*J3/nz//dX/3Cz//Ud/6xP/p17/+mV73urc993kuvXrlva3Tqjs7k2B2zSe1Z*)
(*x4d3nhic2OhtTCe0/fcBzCe1xeM2Tmqmpld6vRMmg66ulwQkxn+8meOd3NPB*)
(*bovxY1s+R5ARUMtCG/dSEnDu9sJYaScAZ0H7BW5Sq3Ua8oCbCutofY2zwLa5*)
(*BGdS867j9Wbe7/eHo8FsUtud7J7eOnPx5MUbZ67ff+Guhy/d9ZyLN55z7tpD*)
(*Z688dPb8vXs7VzdH54bdvV5np7sx6R4fV8fn39J/YjD7ov75T6p1b31R/8EH*)
(*gc1M+W4BkxruMVxN0ScmQlygpAdTP5ljWBbgcBViLh9yvZetepxpci2bOBn2*)
(*shguKAePoSF1UG2huf/IywB+92MMWD/Vot1/xQ4XLQr5zvBngCR3iVwTHIvc*)
(*bdol2QQM1hReX9htLYlJbfYeyDDsVZv97taguz+sjYZnJqPz25uXdydX9yZ3*)
(*ndm+78LJ5944/8RD19/wkkfe+/onPvL1r//sR977hc989Gd+4ONf+IGP/cCn*)
(*v/kj3/rmt7z5BU+++qHnvvjGXY+cO3190t3dOLF55x2DO+4cHj8+OHGiv7HR*)
(*m81jC8Szj6cd+qTmUar7wYyyOKgdmgiLe4ksulbm+8RrMPEPnaznFtPLQErq*)
(*cFdDu+IkDwxacR+CAZM7TO0NF4iHraNnVaS2Mic1cFaT4CFhaM8tjYmT8cBH*)
(*YZTrrLUO+Ivr4tTsbZCD/nA8HG+Nt3Y3t/cmu2e2Tl3YOX1x58yl6X+39i5M*)
(*Tp7b2j69OdoZ9Ce9atwNo15n2N0YVCf68+/nX4xpvcXmvgC0/KWUCjzfLXhS*)
(*S644b+2IPjERkpxjDxXdVHyXAivGLXAukvLYq47qa2oiRPwPDwOGWsHFBfzw*)
(*FTc3KMaQ9h9PatnDpnlcLL247mYLaSfrSa25rCc1cKqYB3LPaZ1kE7C5mmqd*)
(*rL3CPJt4A+T80Z9d8GfD2mTQ25q9uNbfHfWnw9qF3cmlk5Nrp7bvOXfyoStn*)
(*H7t5+eXPvfcNTzz6zte++Bve/IoPvP0173/rK97x+hd/zSseedEL7rr/gXM3*)
(*7j196e6TZ6/vbp0bh0k4MeocH3aOD8L0caIXNrqL7WN+27AR6sfhfE5NX0GA*)
(*Jui3Fh1i2GUmjD4pAd78mGqYFtOWbG+GkKDuG5mgfFORPJt94knrm0zVUvt1*)
(*4KQW/5AQuQRi5ayFTMI2cfL1aqVj49JrHfzemPmo1u3158Pa/JW1wbjfH3X7*)
(*4+5wszua9MaT2X8Ho25vEOZ/55r9unanV00fs/c6zh/7Y9r8US1iHeKk5tli*)
(*WsR6MRHiAvEemFqTyzwXg9bBUXhlsNaSKdRReFoY8XACWhi2V+df8JBFSxbP*)
(*fGm0uXk8dlhjNoMuRDtZT2qrk7b654hIvDr4s8U5kntO6wTiLIQAE8ZtLcuT*)
(*mv3od6thrxr3u5vzbxeZ/7za4Mz25qVTO1dP7944t3fz4pkHr55/5K5Lj99/*)
(*7YlHbr76qx9+6kWPPPXi57zyqx98yWP3Pf7cux9++OrN+y5eu+f8hetn9i7u*)
(*jvc2w2Z/Y9Q/MeidGPRP9PsbvV6nO/tK/tk41plOarce8y8pC9WtN+sUZqqV*)
(*+SsIU3pz3/NqmttLcemFZ8YWZFcsgbuyFACObUlmPKo9h0DNW2Kt8Gw2SXKT*)
(*WV3hyPYzbflJTXOoD+qzbSXLxGU8ZIUDZ73KJj/F0D34HsjZd/WPBoPBdGrr*)
(*Th+DxaNfDXrd/lRnHqkmcb6hHjwWX87f29/Z93/BrWhSM9kTx71+xrSAs6aH*)
(*ZIFID4wrM02TAf3UM/FweoTkKpuFIPeWOgpDMm6SJGOmf++UOB6zgekFIYAJ*)
(*mQsf1FTDywT79/CLcujSiK7QTtaT2m0Usn+OiMQ9BhRC5gaeDOdtbrmrKStu*)
(*W1mQor4B0nj0FsNavzvq98bTYW3Y3x4Pz+xuXz576vr5M3dfOnfvlQv3X73w*)
(*wLULD16/8Jy7Lj3vvmuP3LzywI0L914/d/f1c3fddeHG3Zdu3HP1yo3L5y6f*)
(*3z51crC1VY02O8PNjcF49uiPN3rDTncw+4LZzmw0U5NatYpJTVfT2+5MMdW8*)
(*nhGa9Vn8JrEkBiblcJQmtdwQJDMxEqEAPsnLfM63jOckGxsHYu4zyRZqIrpL*)
(*ef/YNliTmlhfwZnFGIbLkhUIc6MEeOkpACMIqc8ynzfvdbv9Xm8wHdamA9vi*)
(*d9a6vX7Vm/305Mb8caLbO9Gb/nfxpSHzbXP/y+IW09hsUjvY2fd3/ZxJTSy3*)
(*TurGj+m02nDaM+Cs5yFZ02AJ1vRcJT+n1qTfTJwYqqbX1MQVYSCB8gk8WYTg*)
(*TMlTggqSbe2KP8WXldTUKZBZxJyD6FjiftBO1pPabRS8QI6amN1lKiQPZoUz*)
(*rzJhlXeeq05NSJeT3nxYG/Tmw9qgNxkPd7c2z506eeX82RuXzt99+cI9s8f5*)
(*6ch298Uz08c9l8/ec+X8Pdcu3nfPtfvvv/ve+++5cfPGxWtXzl26dOrc+c2d*)
(*vf54pzvcDoPtTn9rY/roTTrdcaiGVejPP+venb3AttGdTWrzp4c5qWknuP3i*)
(*g+DmRJiYOgxaT7Bt2SUMSyia1LIwkNmF0knN86YB5PLs1Qj0CZAC6hicfPt5*)
(*tgJYfDae1DwetPPmmSbJB/5NZbB2SKgCice516W12nwrnk9qs0d/NqBV/UE1*)
(*GIRBf6M/e2vC8f7g+GD66B+v36kwe7NCtfih6/rDvvWYljmp6Sx0cZlONvnp*)
(*5ExqwVqkmPZk9avMDjR9gqdJt1loTbZNZVwUko3kRuHBxk8ri3OGB3E80G+r*)
(*AMi9UySkXOdaBy8TzyqJ38zCjNuB3wG1Fkb0/XNzn2WNfVsk7igN20ykSXbe*)
(*wmRWB+N28ZQpaFlqTHug2Wz5VbVeVQ9r00mtv7U52tvZPn9678qFczcuX7z7*)
(*ysW7Lp2/fuHM1XOnLp/ZvXRq+8Le1uWzJ29cPnf/zRsPP3TvAw/ee/2ua2fP*)
(*n907c3r75N5wc6s3mnSHW9VgKwwmnd7mRnfc6Y5CNXtN7dbH4+a3FrNJLXT3*)
(*x7RWJzVhYm5lpAd8c6IviK30Ei/haExqBRgYZhYKwD+/YepwWaUJxKSmAfPS*)
(*Vvl09CY56rMN/TdcC5h27FwYYvJ5qKZbbWh2aW0V/d1s/jpadzqmzfbGfjUd*)
(*2fqziWw6l81eTev151/E39sf03q3/tJV/7GrHtTmn1VLTmq66Jhks3UB/7UV*)
(*mNQ0e7qy2jC3/bDDJtK6T5Nq079ZEVEUALgOlEyByZHXydr9mtCbBXsVvaTz*)
(*ZaKIuvCQtJ84dLGftXgSHCnwsDqQbUlyu9AHi7PziC1mG1h15x89KJvUvKdV*)
(*xgvW3fgxn8Zmj558dPffA9mb/RD2ZDw8ub11Zm/3wpnTV86fu3bh3NXzZy6d*)
(*Pnn+5Pa53cnZ3c0zO5vn9rYvnj159dK561cvXrl8/uzZU9s7k/FkPBiPesNR*)
(*dzjuDifVYBL6m9MZbaM77FSDUPUXPwVyMKwdTGeh8n6VleEqqRxbmTXCdQ/t*)
(*TWok8lwJ1s1h86AhNanV/jUPZGhGTYQAyph2XPokG9XTf1Jj/Osc9dk4ZdAe*)
(*nn9eGXswaU+KSbsJiYEauzU58czNLA4mtf1hbTGpTffn2YtrYX8om/13Y/Z7*)
(*afO/cfXm393bE9vp4qW1+kNqs6fzb22qf/86WEsgrqNJXeX3Ns+8SYipJoKa*)
(*Vrntp8O1aGKyx6MyvTFbhFkRpiimWhMGGE0zr+Tu56XQXBlgFgeTHCadi9IA*)
(*PDFRjLIZrn4a88z7WQspBf3meVgdyLakIMcyZRDFXJWkc71DLk7VkxrjB4OP*)
(*j3QPfkktZSl+1F6Paf3FP+qbhEG/tzka7Ew293a2zpzcvXD61MUzpy6cOnl2*)
(*d+vU1nhvazR9nJz+d3t8ejq17W2fPbVzandrZzIaDXvTW4qqF7qDXncwnA5r*)
(*1WAceqNOd9Cp+p2qt/jLbnQ7EU1qiwST2eQXBSh7W5mooD7rXRaTsDHy5ss8*)
(*+FeZAgncpIZvDwqQgyhJTQ+JF6ugo8ibCqZn+BbKEi86WZFkxUO0NIKa3ZL+*)
(*swjn9Una9ecHPee5zckTrls6RNeL+pW1xRsXe4v3PMzf/DD/Isfu/E9b9QfS*)
(*Dnby0K1fOFvMZd2w/9j/ct39Sc1IOSyLx0P9FLcurkKSbZMWz4RvbC9fXh/j*)
(*9/xnAfOCYvY8woMjWb2qozRhwEuq3VqYmeYWwuzGgsY2E2fyTXYRZjg4CzaL*)
(*hLUwYq6yMg8rQtiuFCxYUt9kUhvGx3PBFO88SdgeGCrK/ozWqx/d/ens1qPf*)
(*7fdmj/mn13uzSW006E/Gw+3N8e7WZG9769TO1qntyd5kvLs53Dl4bEePrdFg*)
(*c9gbzt6m0+0Npo+pl0HVH4b+KPQGne6tMc3DSlazoCiesqg1uGzps7kbNZMd*)
(*059Z/gv8aLf4yrI4aFKXW1CgWUdhOPSQVCmWsghhkmJ6hm+hLPGikxVJVjxE*)
(*S0OUhqw4mUVBIyVJLpvUks0JCMdQPf/1K2L7M9qyh8V7EGZG4eDt64t3OXZu*)
(*zWXyEahJDaR5KzpsXVwFM0QMoK1exYaMf6GMu8Xzn4tNOCHZw+2n8ZC9akYh*)
(*GTA9e0m1XgsdqKxDBELQ1Un2PE4wAE9T19TEXK0ntaeD8Evg6SW5eXmbg+cW*)
(*rxHGf8e6Zc0tRLzW9L8pn2pSmz7EWx+nk9rsMRvTeosPsw/nw9rmcDAZDbem*)
(*I9viMRpsHTwm09Fs1B8P++PBVLM36k9N5q+kzb5getAbzL5auuoNQ3f6GIRo*)
(*TANYmXR4Gusty97LltnD7WEW1yx3ElUSbdbmbzrRR4qBhdSVpfafbH4PLa9G*)
(*Xt2SFRGxsvgJ3L2Kx8lKW8jE6UUBgQJ99+tVv5UsYs9MG8ddpNsPNCoArDFg*)
(*HZJqYZJM7eD3q5feg3DwTsZbw9p8h10MZZ3ocfD62uwlNrnqNHUABk45tk22*)
(*X65DgITkUGeaZZKsaTIQjsi3lqdZ3H58Xrm8aeex5FJqIseGuVFED+M21qll*)
(*gfdM6o/J1PpmBSu/x3S3iIMY51pui/Ar6+kluXmZO5636Wkp8C8C8Stae/ZQ*)
(*UQ6NSa2rPqS2/wH22eNgWNuf12Yj2+x7+5cew95sRps9BqP5YzwcjobD4WA4*)
(*GAz7/WGvP+z2htV0TJt/Nu1gUku+t9G+YAkFflcM8J4tdoXbAxRX74plUqNl*)
(*WhQ7YQ7yDsn14rW916V8G+tSkoC9iujS8/yE6M4Qq5E902ILmTi9KJhwpv3i*)
(*uqwiC6b3TDxJ4QHH+h5puNaMCShH8B+zNz+G+mNnVTSmyUmtfg/k/hsjl9mo*)
(*1IpgSqNTjm2T7ZfrECBp0iFkpkHtKoyH2BabZLWW56G4/bCyiTOrNJo0zWou*)
(*n6RhrnJ81mOpgDfToWcVfzuWCTg+yLCqeUhCXcvhC7+ynkaStWMIE2Z96QWO*)
(*3cYmG0rMde1J7Vl8ro20siAak9rBu2VuPfrTx3xSG8x/vmf+BsbFozvszV8s*)
(*682/w3/6tD9/DHrDQX82m80ew9FUhtO5bTzoz2a7qVa3O6xm3/Q4CKG3uEdg*)
(*CpTSyp7UeAHbrz7r7dhJ/Bhw8SUgN1CWckhNSSY/uFHJHha0JKsfiJUrguYS*)
(*wtTarOaqW8jECQJ5iSeLItRIt7n4dd2zbMmOwrQzMHCteRNDTcxl8jH7CbWD*)
(*SW02f5nve+we/MqaeE9D8RJg8OP2E7HMRgJFEbZ8h9RR+HxBcbPWiBbzLBPd*)
(*jIhBkklpZYw/SR0gzSw6SSZZCKDsOY8VPJZIkpPggVV972em5h0EqHJrt5bD*)
(*l2dkdQq6LmulkBtIjKE2mY5mJ5SIwS1ASaZMmhxYdtWwtvg+MWNYmw9o/cV/*)
(*h/3+aDB7DGYfY6v63dCffTNkNR/ZZp9lm/026/TsTIaDwWgwGPf3x7TRdEzr*)
(*zn46bTqm9UNnNqmR1cFqZZqk4I2O3LGTqDDaJpcAPgqPMyYHN6d3/QK96h3X*)
(*ALRPALhg5WYRwtTarOaqW8jECQIlaed7j6xOFv6suvPgzdJktR/jsMDEUHNn*)
(*tNmYtrGY1OaP/ShLL5/deh3NnNSq6C88uVVL4sftJ2KJLkoWRdgCnj3Yub3k*)
(*lZVfIFr0WTK6p9mw/UxljD+ZOw6hYfAVTNaiPlhASJymySoDwAyhozD5moD1*)
(*EZxpVu3WcvhyxAtUBqwsI37D0RuItw+IRb2YxeoB7fhc9NTGrHoBEh9MZd5d*)
(*ntf2vyTfGNYO3gM5f+tjf/aq2WA6kXXnXw05+ybopW8h6ff6M5lObLOpbvro*)
(*9WaP/TFt8YJaZzqp7X/9GMiFL2hZ6YErXIhak9yx2wXDZJrFYQF7NTBQNY8f*)
(*psRJ8IyTWJmpSOwni5MQ3RliNY+T1bWQhxNL0g+TaS6HTNyCtSAggbMk7ULZ*)
(*dItrzZvEmnUCxKS2+Am1mfrik2j4UYXFB9uWkDCsZnHoZWeWpj5YsBbCcp+T*)
(*sHN7CZc12WyVtYmJg3x0U9nrwNz206Vh1DzwJh6NJMmDaQIgeR2VJET/Id1k*)
(*lac6ySTOsQnbpOFajohklfuQpRhYc8OsZSX09Tqql7l4QU1PaounuW+PNIPW*)
(*YLjMjUlt8RM8vehboHtVNX9MR7buYP49kPNHtf+7Pvs/3rMY1ubfFBl9pq07*)
(*ndEOxjQ5qXUqnAtfzRabuS5ccuMFasKkXTBkpjyNBezFwLzCefzoiifxN08w*)
(*WRHhJ7f9mFrj1lpRC3k4gSSdtKiWpa/Zy6pRspdI2oWy6RbXmjcxy+NPalU9*)
(*pu3/2LV6+cyb1Iqbn+cQZ9ewKMKQb486Sm4v4bJ6eYnjQe2ESfJ5WrwOzG2/*)
(*pNss6kw8Hkt8Ewr82rZ2mEuImNRMSoHgUvJMxpxgt2X+13IEpWAhHJoUAAvL*)
(*0pZb7QG0vbeE9fsexaTmvcQGpraOf6+Vn9Wt90B29x/7v78zH9aq/S95ng9u*)
(*84+tdeufXuv2oumuV3935P6X+ndnj2HVW3w2bT6jzce06DU19DpaVjq8fjLi*)
(*QsCum6y4NskuyjLa4s2WZLKgeTBLSUJy8RenVisnATTpwBDdGSbTKWOMgdEW*)
(*zmQKud2S5ZnRSfaSOJ6E7S00Rhm0U9YS8DDojoSTWrU8qaXHtCMyqemIjEOv*)
(*yrg9zCh8yl5xRS6mT52vUeL8bcQ0MUHi9mOQmNGzqE4aZhEC8JsKJCGAQF4w*)
(*eA0J6GvqGE6y8KxlLSsVfn9r0qW47cXZeM6KXzirRzMh+lNs4BNtnZVPal19*)
(*Nb/1+lq3il9+W34sftF7Os/NXn+rZo/Zlz3OZ7R+/ajf/bj4fEQrpWE8eKQJ*)
(*ITdechtvnlfxZptLS0NgpDSsdbV8gWNchdLbA55nptbFpDWkKxcnk0JbkIRn*)
(*sldxLwlXTLd4C60hhqwlQGJYzaRWpb+BNyVJ/OZZsOIYh2ah4z7nO4pRBsB0*)
(*Rp3lrUZ8cV99HDBQxjMgPNl+DBLTbRK5KA2AnQXGNME6WeA9DhkpqCaPJOnZ*)
(*BM9AWstaViTMWibXO/bgLUax3MQrYu1OavVr8SKvwuz4SW3+Etv8d1fnI1a3*)
(*Ez/iSW0+ps0e1f6wNqiq/vKk1tuf1NorTcGu2HDvJV01zwtgaJGWLJwhR8rw*)
(*A7XYbYjudoArDUDr125zCRFgAOay9mvSQrk4V+3Bc5vVq7iXhCvSue5Ypv0w*)
(*BlBQ0kSDb39Sm79rAnMCeEvijxW87ExaGIei0AzPXo5CCjIVApKKo4h/kIAB*)
(*LYDwZPsxkLBbLwUBO6mplZOcmFQnqcP+dVm99LPcFmQa1FUMeDZNGEhrWcvq*)
(*BKz6LJ1kFLw7LY6YY1pyUsPzGpjUmmZHT2oHD+dOYX9YW0xqvW5VD2vzx2xS*)
(*u/WLALOv6J99SK3N0jAesrbZ5N5LumqeV/Fmm0XLijbwMvwYUkxLKJrUsNtc*)
(*NgIxvzTpvbZKw+BctQfTZ25L414SDsXTriXCnOyTJAZQUNIkLEvV9qS2+Dyy*)
(*9yW8TUqjOQTZmbQwDkWhGZ6TKSStksAEmFu1y+GzSXSNgWw/nYV5ELj1chSw*)
(*AQ86Qb4iwVn1Qk18oiQJRrg10yd5Ls5UawLPpgkDaS1rWZ3wu2uTLg2ExIuC*)
(*mdTEkUOf1OqXyHImtcBNatFjNqlV8aS2/8WPrZeGUSO32eTe69VdmxTnFUfp*)
(*RJfCVdCyog1cU9QcUuww5ExqyUzjmnL5uVbmUy1k1/FgMM6GDsv4IX3yyriX*)
(*cC2YSQ1A8uqI1cA24qUmOrbWb2tS6x35Sa2y9livrFo5C7xAiK2YHgjWnlMA*)
(*yYvObBFaDbRftcwnTk0UhW9vkxZPky+lVxETuV5ZwLk4C7ImSRbOeauwntTW*)
(*8jSX5EImdZrHipdGclKLZ7HDn9QOblHi7+rvpsa0qnJfUwtgUjuY13pLPw1w*)
(*6MJvs1nbL3bbVss9fbdZwQ95CUtePWN6sc/g34Dp2/UVbRTabdZFvyGYOmJz*)
(*h23x0yQ6sx49hPykBgBkpa+rzG8jhlrOw53U5t/le+sfPnI+2SR+j4fgT2ra*)
(*lgETll9e4aWVBaJd8d66bimWPDN9UlmEY0h4vyKRkHVkeGYWu6kcIjF1crta*)
(*0GKyylQEs9EidQX+17KWJhKWRZ+qcnYVvRGRDQ9gCM16UZjvgfSGtYJJTSBp*)
(*tAaXflsNX/6dE/tj2tKktv/t/vUj9ArGtCZl0lZaQe/t8XGw0en2K96xccpk*)
(*72FvvH/dVDrTJAzs3zNn1ExvGFJwqowx4ASTYIQf74gAZvZbLhsM2spqjCQh*)
(*TBQvXHwQp5D0iW88TD+k5ySfpJowYe6XzNQMtRoDM6lVzm49fztFdTC18Zwk*)
(*NQH+2I+365rKBUj4jdeuZWmrJHP0/DBQK4tn8yrjqXntZ37bSRIeAKNNTGWG*)
(*Z28zBLQzhONT9VkmhD4LMIigDHWmctJ5bMKAWYj5x6u1rCUpYmnoU8ne89wm*)
(*lwaDwXPb8T+wZg5ryQ+siUmN2egyGeEenmo8ptWTWvTZtLIxraKrHG+SzL4n*)
(*THRreRe4oPbwYgANUy52hZGLUzE/8ULgg/LpMAtNKDALU5emdXqFZzOKR3uI*)
(*RPePNgR5Ze0JZF1iNb6U1XLziJcsQRZZpQS0mFFAU4mqef5NzjHtZo0AbMrh*)
(*7HRiWDvQZrZ0NxBZGjJHocxURDReVh1RbssmDCQzisjX9OY1SS5UL7SGLWAk*)
(*S6PfURDzj+HpDjFNPNL4ZJmkeNhmLI1fODT9a9LIHE1lTz9LWYM3FfREtp7U*)
(*1lImYOl5ewLplux2jEGDqdfRhhJzWNOzG5jUCja6Mn4K5GCFd5dfRFOTGi3M*)
(*xpvcJPE+GZxrpecqWFfD4LyyVsx/i4XzXMUHTdj1qZgfkTIflExHVDOpQ0Ly*)
(*SpPEg5PSns2nnodgibnAtVrsIWtPSGaE1RgToSwgeRwWrFlTWbPEJBtDjWsB*)
(*/PC0m8paX3hOkqDF0/dMgL6gJVkaMkehnKwIkCRgoQkMtVWSEy9fcVY/9XjA*)
(*CPnoZlLJ0rQyqeEaebCTyeocQVI8bI9YAV44NP1r0sgcvTo2V9bATIX1pLaW*)
(*tgQsPdyESbdkt2MMGszCrR7TvGENvyvSnNSSC7A5P56AJWx+8E0+ckTse2Yu*)
(*5t5IbmWxrW6tpCttGyzJSrl1yeoTDdvkZ9WNh801QiYW00vFqIJ/Y6Z585AL*)
(*hDHtwXlLDzDh0yGpq5GQ1fdI0+ZZpUkqx3nFdx0Yee02Nvf4FGeTnJg1Akhq*)
(*BW+zzXJYbFLllKYgx+a1zjJhGoAppdkqZqBYzF4KyzcVyeg8hti/Fq3ZcFKL*)
(*owe4+/GrxjSpVIlFUjxsUjTDwH9ujjoXoG9qJnPEautJ7StHyIZp6N/s4Sah*)
(*vf0kF4MGEy/nWsCwhkW/6VFEScJutzTUpDaL3XRMq47kpBaWLz3aVrdBbtYe*)
(*zjKfSRPtPNYHOfKASSQk5jK3ca2Lr+Paqo4umkRHMcunFXTXVX4DABMmkSzq*)
(*BBLSuSbN47BgzSYvCm1Naqbos16U4GwmSbbXk1pQd6fFgJkG4DkxBeiY+IUt*)
(*CYDEUB2NSc1zyCSrTSqrK3Q4EzYgDSDR2YEsYmxMjjHg3CWWZE9EYTQXkjup*)
(*rce6oylm6+Y2Q244vPTK3OZesLLCiTWIX1ljJjWx/AtSbkWISa01YTYxoZO8*)
(*JHm2urWSDj3b2HlxpYK67hds0bE5PhuWrzU4xyQAk1ieEKyJATOQCjhMQmW6*)
(*hclLewA5Cp6zGBYIScKZEGbPCG8gcew/S7mVSQ2LmYs+CBrDRBKiSc2sO++w*)
(*2KTKYTs3x9xab1jfeJwFmGldUrJcxZCEIX5acavSVMA9rK3iSa1W4PsEJxtL*)
(*lkNg4iUFTDw2ciGZEcn0MWNZS4wvCplXse16Uru9YrZ6UlYEw1t6xUFD5kZU*)
(*EEusQS3J90YuJjVmS1kd/1myntSE8yaJB2v/5zuWRCLO6tA6xyQAj9hW1ppJ*)
(*TtJtQw55z6BbmLy0B5Cj4JmkovLvN0AUjMR0HpsIbyBx7N9U9vTFmOYtVaFQ*)
(*i1lTs0Agu8raTJJtIJ7qKLzDYpMqpzS5ORbUGpSPAcy0LiNxh5DKul2D9Vdu*)
(*r/ReU3ln4+Ne0wqTJq+p6bgg2QKHpolOzYQt+DTZ4CEJSnXVvPSTlSpYYiSH*)
(*jPAVWcsRFLPVdVPhVvR8JsUzwQizsstapGUSuMu9ntTil9IYepMUrSJN/SLa*)
(*elJrMfFg7f98x5YVXYfWOTKsgvWVhES2uqdsGpZxyEiwxIzC5KX7DRjqWEIw*)
(*5tgwucQwEsyGJgEkziNPmsSTGl6qtdsYs7er6AJh4QGbqEzGch2WYeBLk+Uf*)
(*91tBdMaEb936KfZfVnptG5ZF25qwRccKP26/Og6bT2raJDjLnHQImDGJNdMH*)
(*PPM5CuX4xszU1HjMLARUftXw7UcKX5G1HEFJtlZ9Fiwo0yEpAAk+TmbH7//F*)
(*oleiJ+LFNXP/wTi1GqB0RbKe1FpMXNSRTEp4yK27Dq1zZFgN6oJl+mcwJBEy*)
(*/gs4ZCQ44kVJ8qb7jUzKQ4Jh14bJJYaRmISY+iYnfGk8loBJ9fSc1EAdmzBQ*)
(*gIExyfKP+60gOmOCWzc4Yupkld5spKBWhA6KWao9m7BRy65yUov9m+zxDjUe*)
(*cdzLKyw3AOCZgaSV+UlNm2u3BauGbz9SsiqylkMTr2NFRzFqQNmMizeQ3D4E*)
(*sRjb5NJoLno9ehyCbUf4BB8HEyZMUdqVp8ukJt4TpfvN8ynobX3PjJMSdUwm*)
(*ZXpIll6c1aF1joxDDThwt/pJHZGU99S04jlkqKsUz/VBL8riqblMBMKYdiap*)
(*4AgGb9p6OQIkpnJ8BHxYLKs0HkukiadW68Q8eLsKDm0SqE0wEg0JOCT7Odek*)
(*yilNlv/AXXzN6Lq1xFMPsDCPC11DEtXX+iJBD7Mpwr9JnYgIWAKBNA/J0rT1*)
(*jSJmgoLApEPPebW8Ory8BNWeK41cxzUJAQ0Q6wjAOiJZmtg22X6mxJcbr9C8*)
(*t7UcjugCmcJrBqLtawVv6zA7ls+ljIfk0mhFFv71ZhKcvTq5ZvEXdwRrw2lC*)
(*VJasJ7UWExcrK5mU5wTre6u4fqpzJB3qntf+GUggL/20sm6Vq3wOGeo8tMHZ*)
(*W5i8zG3QM4xNgiVJ5GBTMmEDNW8WC9FwappnlcZjiTRJkh9T4e0qOnRwlk99*)
(*MBdtjCHpkOznXJMqpzRZ/gN38TWjB7WgxFMPsFep4NztdKw1JRL0MJvSIa7+*)
(*AiFgSbvCaHFpWp/UQDWTDpNkVla/1anhbvEYI0PjBoh1TOeeq6xVA9rPFD2p*)
(*eayu5eiI14G6arqjvK4znZuhva3D7Fg+lzIekkujLQGLQiwcb4EfBTH/MiOe*)
(*PrMnNVEXs1JM+ZLFNQMxm7nnhwejQ2t+SPzmiuYheQoCkldBDIkvQZJqrROs*)
(*vSXpkCENmJAt4eFMJoiRmMr1EXC2yiyNxxJpkiQ/LpO5pZgSlAjnuqZJAgUk*)
(*oJMsisbALIE4UNIkyz/jsHIaI/gbkS5crCDMPQ418+IgTtDjAdQoCVgbMsc1*)
(*YIC8xW/pZ9SwpjAxOfRSAznq6LgopiSrH5Z7W6iZrnJXTa3JcAiILajIWg5T*)
(*vCb0+srrIrPEfKclFxqfSBkJyaXRloAVIXbIjnU9qjVv77ehfoVPaky3g0Jr*)
(*nWTiYfmCwmzmxeFAaM1PrGC2pVmUQFwfGQUByasghsRwyOt4zaOLmGwMkzTP*)
(*MDbhW6IWcrONo+fWDj81E2f8k8tcmyTJj8tkbimegPqGnFussCxedkEJ8Kkx*)
(*kEugUuwBAnn/jMOKa4ysXjKVNYcm87olTOY9HkjqNGBtWx8xewkABkw2/Jwa*)
(*r8NoChOTRi81szoiO5MuD22tI/g0EwGANQlkaWJboUnSiBPMLcpaDkd0gZpL*)
(*bmi8xPg+bNJjgbtYrFriu9y2lsyKMlpPagyxyXXB+BE6DA+kKwa2CK35iRXi*)
(*n6wSrsCKxpBIAsPy7MBQWsZhEqfwFqy9JagreBXxoEkzcwRJBdXASVp0LFOZ*)
(*R+L9O8DS55bG4wrrm5o6r1i8XUWI+AIoADhZkeqgT2IMJjbgAbgV65H047Fn*)
(*5sj459PJTVzXmmEbLJ/cHM1ieTA8h8BcmCSziwXAbuVb+j3eTM+8N01OBS/Q*)
(*4iCJnEkkSYsoDcMGvyqZ1LKKtZajLCFfsG1B9A4hjOcyDLVtcmkcgjCjTe74*)
(*04QWEkZXidZpLqJbzKRwR3k8tPLuRwzbU2OcCB2GhzIwQkeva4+fWsomtSaY*)
(*TXLIopRxiGHoxgjW3hKsK3itoEljcoxNgmrgJDMeJC/TJBLA0uIp81UqrVdT*)
(*sJRLbFKSk1qWxFD1zpOsadJtwRIIqWul3k5jZX2ZqNSew2DIbQzSbVbhCno1*)
(*6S2oO3BTTJO2YLf7e2rAhK84hh2cftYmTCBeMC2iNAwV/KrUfeL5bD3rtRy+*)
(*mO2hxat4ULKK6MklBjCQCM0FdfgdDr6KpxiPsF1FdvrKuwqpYYNNzOMtmXLS*)
(*EKwLEjZ5Ngm+xlNQR8ZE56t5SBLLUNcKZoEBQAI5kv6xW1wvYSv40bZepyWR*)
(*mKewlQgK8tU4gcMsEwyG1Of9m6X3zIUJloaTmiDKXDi5JTCfem4ZhExpPJ7F*)
(*xUInC9KpneDcTQy5qTHKub2Ea6cdmmLyACriUWfCXkiLkxowIYvoOTSpMwW3*)
(*t9YnkSQNTQDAf8ic1GrneNXw+LNIWMthSlzr5ObQYtzpVkCGBn0ostA9xndg*)
(*UBvXbWlX8FU8bUFaRXaH+aG5QNwnZCVo0qtpL14XycbDcbVtjaegiMJh1vfD*)
(*x8cZhEnqyjAnFZL6OkehD/7az7jNKkpcSs2zuSlp/96L2jwGUVwzl1iNzFSz*)
(*R5Y+cONAtVxKHpJZei8psyKeHM6kRjoRR+KnZZ4rujQez3GLesliWqrlVZPk*)
(*ga9FrnJuL2ETTZonOlB83AsaonWN634Ik5rw3Nyh5z/Zq0EJiSTGg5U7yzs8*)
(*1uSXpEgwCdvE7wnvbS2rFtHM5M7QYvRkXG/z8VwJTZEdXq1m6OY5FnQ+KErz*)
(*BbXSxZiFjcQgvDH+7a3HF90ewbqW6aLwaXpqZnagD2Mknlsm5YUmmNRMJGCR*)
(*ag9ZJs0JDKV/bNdM4kmNoZ1MrfI3YVGFZCmbiEmF9o9JA9kl+xlAwlGaQ4pN*)
(*PErNLDxpPqkB52TRdYfoUnr+eYQFpdGlN5GYRRHpMIBj/wxaEYXkAcMGJp4O*)
(*6DeNUOfoBRXUmbAXcgjvfsx1qDFgK4YWLFo5fpqso4kcdyyDBOToKZieTfzx*)
(*QS/oWg5ZdGmAJNeFluTfdZPR619+T4YOzm4scsSrycw6K2XTbXK5eVa4FgVu*)
(*VyHJe1rPkMdflqkJxhSzPYLayvRBvjlx44m4ZpRYH0dnkq2t8KRWRd8ygSVY*)
(*17UskyYEmjXC/kHpMS2Y9tzUdBYCkghaP433RpP8LAxT5Y25YPCYNMZE8+M5*)
(*Cc6W3jqk2MSjjunnWlY9qZFOcDd6URj/ydKYn1MzS2+SxhSFXGt8e5D9ZpoU*)
(*wMbgvX5LNmdyKSVhL6TdSQ3nyDj0egkYMrR4NUoezAVTcR2ro7SYo6ij7kNx*)
(*HOSylsMUs2Se8MuzdQxM3OBss8I/3jdyQ3srHegwJtowS7Db1uUQ3idWkGyt*)
(*QLa3bo9gXVK1w6xSMmdN2OZZzy2TeG3l/Tml9sxTZyYlBJg0JzDkLDGBJ6uO*)
(*nrKZclaOorKARjAO5IaurPHf9FBMGugWQCYTpTmk2MRMPFkOUZqyJq+4XYt0*)
(*KFCZCsX+k6UpmNSETu25diLSCalt0Avh0aJLyfCgYYRULzFse9SBajK19qjD*)
(*BMYCig5sGc+MK5MQ7BzwrAoeQtRyunDiLA+m9pBcYiI045PJsfLXmtkYCwFx*)
(*13KYYvYbKCW5PLGIT1J4GHL/LBmca4fwj5e218A4KLnVxHjaIrMqur60K8Xf*)
(*JcID9ro0WU1NjifaYbAuqfogkwJWE2dFx4o+FGiBQ5Mx7TBZOOyHqUUMzMSQ*)
(*lCTPWiGJR7DUvI6eW+zT8+/Fqv2vblIDhBST5rUfA4kpfRNIevWV8VmcqenB*)
(*9MY7TGI2nReUxlRoMqmZ5dBnA7eZgBCmSTI1rQ9cmb1Ewm7YS2bQsLy3BLjV*)
(*iCxqSMxayMLGLy7dCWTdsf/AbTUxEty3ySjJNDEGEwwZvZb6TRRxY8QKJIa1*)
(*rFR052Npd3lmYWDiemvNXN3YAxM6KMlNuS0yi5HcduEBex2Cq5kl2mGwtnrd*)
(*SyR+rCni6nzNszh3ck0x2LArwQYuiokhKSSBQS38pE+ml3gYldrT+CYRsD2r*)
(*2jk/qZGwzWp60XNJ89qPgYQ7ioFktoepbyZOFrE4U51LiCTLYVACkvIWMgOV*)
(*BwP8mxh0CsFaTYHbTLStIKcstThB4CpJO4Ct2RPVZBCaSTHtYeYYVjOpkT41*)
(*BmBC8iyUGbe6LrEtGSXpH/jR+lk5mhKsNUViWMtKRTcnIyvCgIWJG+CVl1lN*)
(*3urzlFexa31FCd9UXp/gavKlMZsnpK6SKyq96FgBjImOl7CXTpIcc6+IT+Uu*)
(*MZ49BqSoXbI6Gn8SD1/0YL1fq0UJ84+VeUyWscEvqwLSyH3VhMR3lKesGQjO*)
(*7Y3JFVnE4ky1bdw5WQ7DsiST6ijJLQ2ZlLkWzDTrp8ERgQEjIWuXmxqj7NFe*)
(*UM1YOQthMU59VtSFDJ2FLenW7ASgWbZqSCp0dZJRkmAK2pXsh2AtdsGP0CEx*)
(*rGWlEqwtNCkrwoCFieutF71gwTLkQ9duV0FL5e8Jh1CUJpKFjcfv9QmuJk+O*)
(*2TzBuqR6CbZVlNrczJSPArrF84ldARjx8awlxrOEQYosmKSqnJ2BhOFB0ib4*)
(*IOm/YFJjSsNQXUAaua8CSFgHQ9JJBef2hq9Xu5maxBY4NGuNk2pYGpIQ3FHB*)
(*eiWxxqwzqrjNxDTMTc2klOEBm2RVU3QFbt1WcHpu8Xos8yyyYxwmlTFXsY7p*)
(*1nPuaTK0YDDCPzii9cle6vhS8xAfBN7WcjjC1/cQYOAWIhEG57Iu/OOe50Mn*)
(*l2fDHxdjaLnt5dPC7HVamXHr5Y4LxIt2GDIvqa0UxVsRGmeBT4ETOBHEgkpp*)
(*GnFRyljCrSJoIVkSPAP/JIwswB7DvH/ApPCTVRoMoJi0gl0rCcnzrJVNwhnq*)
(*wMFVZCoWey3iOONQN4BHS8PSmAr6c2oV/Mk/ErCJASCJOUwm5aUmSsDz4PUS*)
(*w7bZALo9tIm5BApwAiQ8n6Tn1ncG7R8kngvbVCbBJHPUoRkOGeqCWul6VxE6*)
(*6eTXskoRC4RsyENA4kmTxSv8457nQyeXp/6S2zQdlv+k3MbymRKWhdFkfIJN*)
(*hoGRFO0wZF5SWymKtyI0zgK3gpYkhpgKz0TTiItSxhLGLGghWRI8Y04YGFoT*)
(*nI0jyl5cT2oEpLjlknuCJtZrErMEZF2aZ6pTiH0Wt59n2EppTAU9qcWa3qRW*)
(*qbXAYABISFcgNdFmwhvmweslXWuv30T0WN+zMn0W4PTAkKu+4sgX2bWyMwAM*)
(*mpYCQrwUGA6TOYLK4uhJ6oJa6boDhU46+bWsUgqWRouit2izf3QvYbfe4hVb*)
(*Ae55M7SnTO5aWateWzGS5bn2X2DVrvD4Rb5kNbNEOwzcMhGQmq8p4DBwe3LS*)
(*PwNAUOFR7fGZ9AzUKueSyrg18QOr3E2GUUuK5oHHUHsA/WaWL2u9YOQFpBUs*)
(*EEyL6RYri45iqAMHV5GpBym3PQRsD79WIEPE7WS+e2R6ELg1vy64DEOSZ+ww*)
(*2Ri1QlyCEK0sEN0MbXYIrrgX3Qun3Rbg1Gdr50yBBJKkpgkbmJDKwRJxltHE*)
(*DpO06ByTgM1Tnj7Js7dbBtUnCwHe1nIIErgt7nCQmP2D28lzZS5eEQKvJjM0*)
(*Rs4AK2PY2xO0FHsuQNWukDBEvmQ1s0Q7DDl3AmTb8JyYDgO3JyedY3PdWsDK*)
(*JJN0DjTFWawvHGYhYXqJhMGLZozHUHsA/WaWL2u9YOQFpBUsEEyL6RYri45i*)
(*qIsPMoAbZupBym0PkYtXVq3At1+tDN7n73kG737kYWDSTKgAnnYb/EnNU2ZC*)
(*mx2CK+5F9yIK2zKcJkvhsCa1pAmjrDHr8okqm2qADZ4WkhAvOj5O8pzcLYXO*)
(*4qD3juW1rFoCt8UdPhJP+MXrLUawK2IweMGSu1ZS+I2ieZQqtTM3j9LQA9gT*)
(*eKKycgzWpVAvE9ObaLDma8pz2Ep7kEtJ8ACsAneZSGIQR8xCJ2utMTMwkjuD*)
(*FyUrQeww5NyoVCuY1EjkMVRy9xMmfLcE6xbLJC25Tr320Mok/6vIFFQT9wZI*)
(*RG8gnmHNdkV8yDo29DZqD1jlTGpZ/U+aMIUWp4La0LATUGVsAjpWhMNRvKCx*)
(*iYcf4NQf36jdJgukMWgytT7fAKSy6dYkJPhi5qUlSYsAg3nTCiFanrluhRre*)
(*EGKdxcH1pHa7RJfsiCDxJLlyq6iTzcXFuDLB4DWlHXpvBcF9zuwSDSX22bpz*)
(*M0qx5HIF1MiIwbmmJHe2ytoDG64pz2ErvUEupVgHBw05dxHCIRmUrHWtwLMU*)
(*U53UJ93yZRKayU4TtqDfhIfaPw8JK+TuzKFogZjVNxnTK8Xzpj3nMrCiTHE1*)
(*QWNoikww2LY6+IH7cDB84Vuy2FBrmoWLZRWTGsYp3AKEwdrQPFSmMrbStTbd*)
(*xrY4imcbm4BaeDhbn9SStcjaUphu8TCYhHggA1xuJC06R6Bj+qlD4ByZ6Ljx*)
(*Yh1xdj2pHaYkW/GQwejrGolQHE9qJvP1QpvmDQnUPkkeeIReRCbrLAWGOpKN*)
(*+gjeE3jnaaZ8tGW2GhUJVSjrNhAXJg9w0nlSU+cCbl3Ms2SO+Ii3IhjAXgjT*)
(*UF+5PG9MprWmh8TzjzMF+hpS7CHWN0nwDAFpTFEAydjEJEenY/KQlaOpxgTF*)
(*bnHpPVtceqbWpqGgKDhLOKjeNndgoc9zyPDmqYmDvGfNQK0MDDUVQDAYcUSA*)
(*KSCQydQ0AbZJ57lIqtR9nV4g5M4Q42EWO9AEdGVlGkfBHIIlLHSywIgcAUKN*)
(*wfMGEl9PallSPNsW9OFKJcAVLRDi7/XFUch88RoRTpIOs14YYnjIEi8ik28T*)
(*HRM8z3kue8AzAA+kjl5mrlHxaCu1qXrOhY6wxZ7rf/OkeYHMs3yO+Ii3IkjM*)
(*TAiB30swK9Na00PiEVj/PpqZpgemFq2Pc8Q0eqRV1l0HSUiyiF6mdTqAvVw8*)
(*QMeMrg+aJnrZAiSxOS69SJDMSFOUpDF2BSY10Him8xieecpjjLTF3JrZeVYh*)
(*c0PDeIK/4YAQuWkmyfTMgX9tThJeEZOa3h55z9oJVvZ2Hh0aAEvejWAwIbWE*)
(*K7UJJMnpwq9XBVTgrRjXYj2pZUnxW0bJ5dBcyCgBXmdjtOAzyPWR+myL7YQR*)
(*AvFqJLaFLAFLGC/qyil9jQSYm1BNPwWotK3g0OQWeNOaJLHCEITO6oeaYTOK*)
(*mZQJTKRsusW0MLXwcky2n6lghvZweibJSmlCcIt6JgJhVrdgJABMUhmoJSF5*)
(*xfJOaZa8SpmNwRCCqdP+secCMGbuWEdHEVa6QMCzFwjXMStBkCmGLfybF69a*)
(*bWMuoKYebC8oTiF+WlDrgo7KKp9HMgaD3Wr/WUiS4Cv4JwIvNSDarV4R+lTB*)
(*eiGrySibkMLyqg8Hkxr47Lzwr8lJdrvJDDBpOKnxTa6DroWUI/7hvqx1Z65Z*)
(*rUlOaq0zwyNMAhawwaoEq5UUPrt4kzGdkAu8CbYszLUJqUYSKwxB+bL6Ia41*)
(*xlzzYwLTRdFucfX5JvFIAzX1FHRowACgDlTKUw7OjYdnEit4DPB1TJqYBHoF*)
(*NX0mITHlKCiNmR0wj8EzUXRRWgRT0QtBMKZDaD6zYJi2Xh1BdD5NbaJhx8hX*)
(*MamZXJGNoQHztS7oqKzyZRWlIOWCipPOAS1mC2ERbs3qdywpIDBZzemZufL+*)
(*w9Q1IYVn1qSGaffYM+XIDh1rKRBy0VXP6EmNd8hLk7geGHObZXZd7NCLgjG0*)
(*mpwNniSWH7QxcmYjBVBBUYJ/dUgiiZGb9TKRYAFNUlZiz21WdkLBPCIS9BhI*)
(*YvAw86X3qpwU0792i0VkkVUUkhOmAQK9uKr89VipTS/Xv47inU0mqz3jOnrR*)
(*s4qLAcQYDnlS44XnWVth/Wp51QA14Z8/G5zF7plX9P5JsgfAmA47nJg1wkhA*)
(*V+MckUnoLh7zMa0KnSqa1KrcSS1Ju0evyRuoQpJqD4NmG+jUb7DvpNrPO7We*)
(*1L4yhV+t60kNrNYmYMC+YQLGGJI7GzBpSKznvIxY5m9oTD+IjTQXanJ/5kkz*)
(*rwVeA2AkZskwLcWNkUtILgCTSdw2SQz1TWzSRIQzMQMk2H+A90sADFAAXYQd*)
(*MjwI2EnPJiTehASTTDmXEOAZ19GLzgjA4PWS3gBj5YJJDQflJbf3YqtkaUJO*)
(*r2IxyQ9qVSZtk3U0w3nsATCmww4tPNum52SC2lCaHIxp+5PabEy79Zg+DcH+*)
(*06tGYnIIONfkY35MJ5hbEB13VK0jJrUkz/r4elL7yhR+tR6RSQ2s2TKHYGHq*)
(*xdskrgcG7BsCMJN7AT91mrxz3j/PtjA8ypNa3Bs8IWY7eQ0QK2gk4rjXq6YI*)
(*Jxit5sQzMYsSB/WIEkwKBshuEdRtHAhjUqnGNnkDeJJ9UiZmjUwwJrGmCdbU*)
(*5JP6uSZmakANp5xLCHZrKmdF71irD8DwMJiTWmzS4qRWIGZ25lOSDQGbaQ8s*)
(*ZjiPFmBLQvKSBbkHuDCbVCpJtdl4THWCtc/Pzy1mtF79CLN5rRs63YNJbfa0*)
(*CnZLC7cmnx6eStVa+zTdAmVNTpJDDyciDfKsj68nta8Eqatc3wZ7q9W0PSKT*)
(*WrsOwcL0VvohS3A2czDFZOGs0yR3jyz/PNvC8OhParpVklSQ7SQAa/8eAK+H*)
(*4xLHHkjeSMwmpDqKF9FsP9w2yTrmTmomJM2ekKR/nDIWz4MJJquUWLk6rEkt*)
(*S3DKuYRozMk6ZkUvpk5gAFdSQThDmmgqE3OWMD3vLQHMCc4ry5WO7tECbElI*)
(*NbF8yrFnbdKkUlnLPMdqYXjrERas3Ho17WBSq3rdqj/978Gw1jUnNY8NwSfD*)
(*JF9rRlkzs1CLV2VWL/EkA1lPas9UCZHUT+Oz5FK9jZOaEHyccchvdORKXJEI*)
(*DEyaJi3eU9MEO8/lwWRbvDPNdNjW59R0+llQTZMCDJV12fVMQPmA4Db2ip4k*)
(*jSFEZwdweoYCnpmOxgCowHGB8PSSfUKK7iUN3gSDExQmSUK0MkMXY1JQCw3J*)
(*ZCmLkCqzvT3/YXl55mKoUqUBl1FMuNdgZtBi0V2K45IS8q8ywJVJTrLiwpaE*)
(*VJB1gBf34koxGMrqFcRHzzqL2c14QW06o8VjmjmpiXACAwkMqHmnTIf1QUCp*)
(*F5rsJe0qSbiQ9aT2jBTQeHiNa1e3a1IjU+MbniQkXt3xwVXnJaDm5lib6D0q*)
(*PliWS3JHAiZJtoUhmNTIji3ODgOrlYtLU9BLOJw+FUvswXvKBC0mJHB3I6YJ*)
(*7pYshMViRmGC6loAzj0edK3NlEHWuSyBTmP8J3MsKBBOOZcQEzZfRw8Dz4PG*)
(*YLYHOalp2GYv4cQLRPMfLMEMgNQKbM1MNTnJigtbElJByq1Xqph2Du7i3YzR*)
(*R89mY1rXeEGtfvfj/lsf05Na8v0zuFKCgfIU567MPyYna8S0Rye1w2NZT2rP*)
(*JBFbpddyYKVrn0dqUtMp8N1Obn0mh6vaAH2ouTkGTkhv3qckeB54tnXooz+p*)
(*heVblKR/Uc1ceF644N8paQ8CPw+YIcQsikDuGQoTpluyEHqYAWMgihlU+DH9*)
(*YwKT+l7KIGtg4uVLetbgPROGAewf5JtLSAyJaR5dER1FK/AYCpgJaskDt0zi*)
(*BWLmG6yFkCWhvautR06y4sIWs43DiVMxP1WrlQqW5HMGZflzZ9FHz3r6ITRr*)
(*5fkLcEsJeiwJBgDtmgdPM8mM5hxQWh9kOtasTm7J1pPaM0nwAhfdZZ7VPo/a*)
(*pEbCZmyTPJArsXURZWJyNDc6b0/ADvGbD/kUSLbN6Ic8qTH8iCWQWxqQci5C*)
(*fVzrVw3qKABj2LVDjxDPvLYSfct0SxZCEzPTS2YUMyizrEhIoKa5S0C0TZKr*)
(*kLnnCGAA9opo0dkxsYqbB0fBPJjKBbQwmRa0ECnakKQuN7XmrsxuYSoe24bU*)
(*qgThxKmwvFFgQ7NSnjAOm0r6NbWl736c6WzM3iTZWTapLFyix8BBbejx4Gli*)
(*ZuI+JytetnvETkgP60ntmSR4gYvuAus9lvWkRq7EFkWUiclRF6V+GizRx2tD*)
(*r4481dXRmNTM7LAaMOlGv3cZGtwZAn1cICCaKC9KkhCRYBbsjrrxA3iESQw+*)
(*2S25CHVoppfMKGZQrxa8CCQkmGTEGJg2NDuH9KyBeSZNaAnwVlk0Gwm7uHkC*)
(*XPUCgwAcHMEgkzUCtnzivHhWSeoYCe1dbZPUJdkLK57UMHtmpTyJnWRVJFO5*)
(*CktfJ7IY1ipnUgv6keQHsOQpJ/e02pBsrWRphBrTHhqDTiEJbD2pPZMEL3Cz*)
(*vc31HstX+KTGrMHWRZSJAVCA09uUWqkjz7YwbGtSy9oGGYkntYLSgJRjzdht*)
(*lmAnAkySNxwC5KhNPHNhIsDjbqltcS8lecZ1rJGbSBhaeNGeedhMmXQuWhmf*)
(*9cSso6nGePNgZ7UfCTi3ecLyyspyKxCSxTJrlPw9tdYT17ZMFrkS2tuuPeqY*)
(*xGNbD1JwhAfGNIDedkyJ/WRVJFN5wUY9qbm2sZpQ1urBWlNZtDP9bHLVkJY4*)
(*OlPNoNpPeACxDuHWei2HKXiBe72Ne3g9qfEh2hJRpha3l8rZ7oTOelIDPstK*)
(*A1KONWO3jJhNazoRKSRzTDaJmaM28WyFiQCPu0VQmltl0xaD1MoMLbzgqmHY*)
(*TKXqU9rW9E+mFrsFJsVckTwLDKRybvMEa7mRbjVChq5YR/vPpbQ4cW3LZJEr*)
(*ob3t2gSm2UvaakjBEd6hKaZJhxPdJEkCY+ANG8DUNBHioogszBp5zCfLGtTu*)
(*mqIlwaGIDqjwoJoeTCeHdne9llZEtyjQwc2g1w7TJyYModP1v4lCmHgRPWAi*)
(*F3ObShLI73uMxJ7NpEhgJtRA3zUl4SX1y0BqtyZ+s3wgeu6khkXv3k2yFnUh*)
(*209XE2gyOZr6Omvsh8Gcq6+DMiaxf7KOnhoJ24Saq+yFMP2Ig/ppcNYLRmKK*)
(*x4MmU4QI3J2YCZvhsIYBfJohgEmco8lAEjbTqyILr+7AbX0W1BdnnSyfJkTX*)
(*t7mYDZakjpFgbdfFrkwCmYrHthoSJocBE6yKeCaCeW91h2iBA50D1QPF0DmY*)
(*1OqDbiIxhuRiN5VN5yIvnb7JCd79TEjMtoYZADmSpGmoRnGsHXI9pj1dxKxp*)
(*sje8JQOahISR7HkAu/JXhJdmLGa3kxyCBQ6WT3JZmUkx/GDemBwBUdh5HaIM*)
(*oee2cjYxETGJc0WTGklRMs2s9tMmQDOZo+dZZ41dJQHj0DjHZKaxSeycrCPQ*)
(*ZGCbUD20nrLpnznoPdXOk0iYQsfe4lg6ivAPCBQVJDnERQEhgNtYyFYXykyv*)
(*6nDeWc+tpp3JC4QwdYIjSYUCATjLJFjLvNiVSQ5TcZGgVsacAJ8aGDDUzsHS*)
(*jnVSap2Dx0YnbITZoxOsnEw85GI3lU3PArPO3SQE734mJGZPwwyAHEnSNFQd*)
(*MRl6LUdZdLm9gurqm61S1g/CG8AAwNROdHvjxgbdXsZhQxEry8s0l2SeZzMp*)
(*Jm5zhJ5DDcnjp4J/XTcnNVK8SlURsQWJt/g5tdxqJp2b6ZtPY/5JwKa5cOKZ*)
(*MFEYPFkOkxh4nhkqtL530DQMOXcRnVKpPWPwZpok4Ri84M3zaYbAbr1kcY3I*)
(*BsgCY7oVtkkSsEJY7haGEJwX2VQm8txqYiloj6QrcZChJbYN3M5TAIxsBs/E*)
(*O0sUcn9MW37sv7gG8Aj/JGbQPLFPkJT2ltWogDoPdjI7D5K28mADMMnQaznK*)
(*ossNVpMQ3M+5MEJqtZpLjFw4ADBemGUcNpQ4R517BSeR5jx7SZGVLWsAxlvw*)
(*7/fMf5uv7IMvn2TErFSVsxVraXdSM628aiad6/TBU9Kn11emH0w7jsLgyXKY*)
(*xEDyHBNoKmsrk17Am8gOUGEi4SV27rVB4LrUIweD7yy3kOfWiwLcgmRBOQA/*)
(*xWBMt9qcIXZhDlI2nZiEJJPK6p84bm41sRS0R9KVOMjQEtsGbucpAIZbNGki*)
(*zlb0/rA/lFXzR/yyWgqM8J8sU+2qs7xhgrzMU5W11XSsn6g2G5XnOc4xKzvQ*)
(*VJ4OBoNDr+Uoi1durRbUNdHr6mQ3mjBCarWaS4xcOLF/xjYrBc1hQxEYNKRc*)
(*hFk8e0mVRWwoTNGBSetINCfibHFovjQkJKGZW02t0LwnTcDeEsjNUUdh8GQ5*)
(*bIvnmiu+KJp8fUofjN16zvmieJUy20CAYXIEVANaGLcmk4xbUHTMeUddaDQG*)
(*jSeLk9xMYz8gZROJSQjGQDaVRmhyWyZmCXADmKTpsyBTXMc6wSSHJhIsZI1w*)
(*auZxr1jKajGpTVUXwxp7ocH9YIIHvWp6MAHzbZlKHAmv7EES5ib4+FS1/vr9*)
(*Z5aY5faaXzRM53AntSr6mwBYMh1181Bl7jbMgsIcNhRzVTYEmcWzmVRBuOaS*)
(*5AGYCIWGG5egruZEnC1miS8NCUlo5lbTVAjWAsQmScDeEsjNUUdh8GQ5bJFn*)
(*z6eHBHQ+OBK71WoACS9eaHEwK8csWpI6mEnsFhTdo13ABpwzSLRbjYTMFMfC*)
(*TJqEYAxkUwGQZEF5BjxagIlnCzL1YMe2IbXzxKEZugC92PniiPhNT5Fj4O6d*)
(*Zopz3fmk1unc+uRao0ktpHY24BMD9nhLWnnwkmkmlbMg4Vqvvy3kmSRmuXU7*)
(*mZ3fOfRJzVQWnWx6EKeysDHgzcVVLHhPEIUgEZoLHHggG+MQJE5cs+HpY53c*)
(*90BWftfFtk1YIrPTJh4k4dZsrWI8JjlkguQS4HP0aGFyzHKYxGCqec495STh*)
(*yQp6gE0TvihJhx424R/AMJEwHDIdWKkLgWflEWIm6zGZhJ2so+lWI/FMTNqT*)
(*KXvVwWwAh1hiVJ2iJYCTIgXAjhU8YAwtsW2AO09MSC36XstUY2oEcjdPYZKV*)
(*586tXzxTGEz2dFAvokgZQApqmTck7XBEA9P8eBnFjHnfrH678lpLQ/EaQ6uJ*)
(*xvB2D7x8AIzAXeO0MliPHv4sbAx4sOoLRK+7OJ1wcEXLQqgXOOaZbIxDlpgE*)
(*oJPcl8xff9A7nhbNSWzbkCUGudb3IAmfXmslwWC35lPGYXIJ8Dl6tDCQshwm*)
(*MZhqnnOTCq86VjMizzwSvijYIQAm/Gsd3BsMh8la6yiAQ4BEe/OY5GFj5F41*)
(*+UxFLJyyqWASksRgcmgWV9dF+w8pwVSQ5ibVAW50mmeMpErtPIKQJHVYh6dF*)
(*n/KOeGLiwex5/kG4OgrWMVlqQtohiNd+giLBgFZYT2rPMPEaQ6vh3k56SMII*)
(*qWucblQsnn8TW5M2ZsDUQhJYwW0tdzPx4mLGmpe1LcGl95Q9BeCfYSmoRi2I*)
(*iGFkwcZlEpg1h0kYwK02wWiTxGpgXo4MLTwk0mESQ7IcWYR4GXlqsbKuHYCh*)
(*kWCJHQowZsqYFoEWh/M4xDlqZgCBJuA6ivbmMQn8d5b/yFlQoGSmgEZtG4cw*)
(*dTyHuRgwKuxfVC2ZXf1vXHFtZXo2lU0TXMcaElD2cvRSxjq4RsFfs6YAb8Aq*)
(*6YT0n4Qd6+jG0FJA2kpFAPOoEwwIk2p5UovP3q681tJQdK+azQ+6upUmF/4B*)
(*BrAwwVagO9lUKEDOSy6HIJdcnsGO5JFGNsbhSIzQ27s8E6GDv6UfVCQsX8o3*)
(*5tKB9z9lOfIOTczaNlYL0X2CF0Jg8NyaJhhtQUd5OTImPCShZr7YymDIypFU*)
(*jgthNklQK9esXZIuXmKHTDicqTAHEU1yGKo1VM+hB7gOob0BJr0QnWgDAdmB*)
(*AiUzBRx6DQPAeA5zMWBUpH9P2asvpjcJO7ZlyMGwa0gFOXopYx2cbPC3Ss0k*)
(*w55JV9JPQRQPdq0DyieqkEXaqiWuabI94oxik/Wk9gwT3atgzeJ9Ay+cJIyQ*)
(*uuYyK53Bb3ooRs4LyWHHv+jE20sWYOGE2Z3IxmhLmOKG5ctuB97haN4Wwvzy*)
(*NeYnLE9qoKmAgIHR7AFAi9c2Hhv6KaaOaQDhLdCSJEpgSLJtcgiUtUPvbbHe*)
(*IjUdMgA8n5gBURoTg6hdkgSNBEjtTUQBWZu0AB4YqnUFkx0V65Cl0UwKb0yl*)
(*tP9Ozp96eLc602QWQNkkRNQFY8BlFeG0vpcpVvZE5+tlCswZcjxaYluvFl6O*)
(*yewCV+tkjsB/ZfU86TnGliQnebb2aZpk5eX1JMiRF5wUNmEIiVkV4OOrWJxa*)
(*K3mt5fBF9ypofrOrk7YkjKD2JVMn2bpJ/G0tw1whOYyXHtheCjYBjCGkLs3F*)
(*xeWB4eIGtVEX8FDfgddbGV+UOnqn2aQGvpRJrwKm55kCFTQM798skBY+tIcB*)
(*sx0vEJIT7bDdSQ2nxiwxM6P6oIlB8MA0Bux9m3zNtpcIrkgyOm48Jkcva8at*)
(*fkoyCfx3mk1qfI58FphJr8pMdKa4ZiN5tHjK8Vkh2jxJu5dUsoFxHcmOYnoJ*)
(*OEzW2kzfpE4Ty/AjDEEWjJhIkrQAE0FvVmMXw+ZNmMUVs6rBrye1Z5jodgXN*)
(*7zU2tiVhhMx9KSmef8a2OBE+xySNZrL6aVsYTMZWzYkOx5wVWZiGPGZASBwo*)
(*qOsOYK8g8bB8hRUYgC2JoaCCJs9YdFKMfgEGRp9R1tR5n8X2GNDRyRxJTjwG*)
(*grpXEU6yYJhLwFsRwMqMWECaTjlZQZCjlzU+azKZ9JkF22NMBBUMZ+UYZwHW*)
(*RYA7Scjf9EwT3DAaocmh5kSA0YXzaCFLbJp4mXq0eLUAyriXAH7sP8lA1lkt*)
(*HbVN6RRwOFBH7TNk1ldjy2psXkx4SRO+cAx4odY0pbXcJtHlNlsLNEbSloQR*)
(*uGucB0Z0r7nkk/hbySULthe6xbgkBm+7M5+uCJjn3wSDK1XrJGFjQvTO6bVf*)
(*ceJmOMat5iGpnIUza9Uw5cta5gU5ChO+9LGa9w7/zvLtB4+E5NxTBhhEjqaH*)
(*JAa+ygEuAb5AJBVka/G9tGppF3brDAe4t+BVZoIhF1eyqeK+Ij1r502qHzs0*)
(*/eCyYmJFlNDepIYz4pk0IYl9g6ymKYuXjzFpZqZ67+JLby4xMqm2dhKNnzFh*)
(*kgKCeW6a0lpuk5htb27UBRtvFozkviR2laSU4W+YCJ8jDl3ri2SrouUfAyB3*)
(*J72nJYM2RAXMTTB1jUwr3A9YE7MNlAskLF9QstxmmRTg9PwLtBg/FhIArrVp*)
(*xSxhE0nWpIYz4jOtYIF0RjyrSQAiR6YbYxMcHURMKgDaAQydeBa2JqLxYE1e*)
(*p5UsanOw4ZunABgcjrzYheW+AnXUUL3rFwbP06JzMT0wSOLoOJzOka87k45W*)
(*1vzop0wdRXRxvIrWvudQFzo4S16HwKmZSSUxJ6WAXuyEOZUshLZanAVo13KU*)
(*RRfdbD/dWmZXAw9JGNqnhwF48HTI9aIlKwsmRz6u+EdzbKtOtswPg0GczYJd*)
(*q8WfUKvPep8XMyW+e9dxu0oYn00qkmW1oioH/22BZUnh7AoMcxPUkxpIBCMM*)
(*3MAoYPNnGX6SPCzOMlcB06SA4TJI3l2cUBBnk/y0KCuN1Yrb5t1SHAsL6Sc+*)
(*onsDeBD3KuZZz08czvNQC0AS2yZzFznyRUmmg4GZSXl4vDqG5YsCYIBc4x4t*)
(*HTUJehzWQU0yPTBJwfR6LJkcVss3GMB/rKA/6xp7E1exznpSe9qK7k/Q87rf*)
(*mA40HZrOeQx4uzDDAWUsSdg4uzIMtbIOhIOCs2WZkmzEgHOFSTx2jg+a/uOn*)
(*zA9eV9ZlBQcqGNMADwyZJnLMFVYmQXbU32fIKFmBeELaClfgnD9r+kwexFTg*)
(*fAE2LcxVQHhm7lVIMk0dE1KsrNX0WSZQLlrThNFpIgVuTTBkFu1Gx5ILePFv*)
(*0B7ag9dC8Vl8U4E9xGomaSILTIgISt5TaSsPsFcj75R2TuIPRLJg59HAhAmD*)
(*P94ZMLBOvgS4InDKwelVoQNSA1Jrekyu5ekluj/NguoGMLvCbPhkh+Bm02re*)
(*kmm3D3FvY6i3UVqHVHN+OJnG+LMYJjX1MOW1n0ai9SvrpTRmTBOv68VgvP05*)
(*mbggLXYY+9QXuKyyBmsBHkJjJCGVpZMbBScbnBsDrVaGU1QzSzluAOYOBKfJ*)
(*sOEZBn+8Ajoek1iBAZPMken2MkLaQotNeCvM86qXOdneZmmCEqHv+cxaGpiB*)
(*OoR+90Xt3+t2IXVE8xfSvRp5uXiws9ojdutFF1DrU53lC5B+6hkKeCCKxiMC*)
(*aYc6utdLQJKMCeUYmL5V0LSYUbKix0+B/lqOspArRTeGPqh7LLmavCimvuef*)
(*jMJQQSLRyk3itiIxEhIYCb7mvKyO2gSrFSSSlY4eqTwwGpWJPwkMYKjU/lng*)
(*2YQd1MWoPm5eiQAPOhy4tBWwkSU6OzOpFYWukyV1PDzFOHU1s5RrrpKCncd+*)
(*srIwMQgPWsfsTKGmCTGVzUDJHDU5mO1k+kz5PNsCEy9xnpNwOya1rNIAbr2n*)
(*Zock1wXGH+CkZhJuggerkpTY0INqQsLZYSQCqpmj8GDmKEB6pQfgdSCz4s15*)
(*rpwGA8p1lOJJTQf1FAQwoL+Woyy6V+PihvzLMXa4CsBtRakXiF5cnvLR6XyB*)
(*JwkvmaDQZBgmNxmhIxrMS6StcujXv0S4pAcGTxJDr9fDn4RiMGhIlUWguPpk*)
(*XYmS6Qv/DOyCfLUtOMh4SIYzzZObYXDuZDwkxRiYbRkzZu6iZClF3VvPQiCM*)
(*swCAhR/VYq5CMkdvszKT8nyaSWWRVty6HhKPE9OkrNYFwLx6CTWz+tpWuxLt*)
(*JDTBukgyUAcyP9GMm9DLIutsHEu0mfj7pF5ZZEXIVanBCGXPVhgKbCYGDzlw*)
(*6CXFVBlQhKMsqhAfMd9+YxKVjO4xtpZnhiRXSm7rYoerANxKlHh16PUFTIoj*)
(*titZC9bcQ7DnjnM7ZLrFRRE6usHMRABaPpdYxAtbVc4uVxBOh9bISZ9aM36q*)
(*T+kroxeXQaJ1yAVYEAvY6lM8aYy+6SG5GQbFthmrOQZmW8Z0mbsos8yr5SW8*)
(*iiwEwhqPhxyTjHnw8AOWTBNdeiYpnr3invFcmbx5IWr95tGTwHBpdAPHysI2*)
(*Wfo4KVBxcsVVB5cS8dZ6D4mXsj5Ino118NLQ7JlqWkxDvCTDEZjUMHW5VS4r*)
(*n7ZKuk3mCIRMYS1PCzG7NCwvsdzWBQ5bAWwusYZRgnOL9XRpeIEWg8/KMYtn*)
(*URdTWTjEDcY7zK1Xk0nNdCWOMPqaWCa6yUb9b90JHXVV1Q3gSRkYU60gloBd*)
(*cCUF0bM8VNxmGLjdrzkGkgczUPO6xxVZRRai4v8/e28aK0l2pYcV2V3Lyxtr*)
(*7m9/9V4tr/a9qqu6upZeq/eNbPZC9nBvLjNcxSY5Q4occhYP5VntgT3wyLI0*)
(*smEZAw8MyH/8QyPA/mVLlgDZgmHDP/RHsP8ZsATDEKxxLJnxbt6z3HNvROZ7*)
(*rzrPxDQrI+495zvfOfdEnBeRkTokyLChgXcBZhQ/EtqipijsyhBVCL95JGGs*)
(*TurW19aUaQ8rxh4YFEm40Z1qCp1aKdRTbZK5vFCproDw9UfCIdSp6Mskgz1d*)
(*oZo86RgaGCQwfIwVykdDCQ/bKcpwLkOjHj7dNKoW4mQAQEcolyVOzWVvinWl*)
(*OKWuVWEjgNElVtMKTPL9ld7o2pSMF46U86yHBh1sKLQmmFVhYCt9qMCnH/0i*)
(*jr5RRPJeEZRYiXWYq4EWcTQT9KNoklPiCobx1MOQPsDjTMpbl2uAnlrHWNdL*)
(*TQwSHhh/6wddwoafFzDiOirIsK6Bd8Q4yuOHWcfTrmwLoVLo2ql5BMgqHqoa*)
(*sWs1QUVN/yhcYgGofnAnTB404sIVV8mUOjXKlwBLEp0cBZaYkENeLRzDrFkK*)
(*GIOE8lcYeooByimnKKNzKbYVODXr1lG1zBgmQBCGRMlc9r5YV4pTgbIqbBa5*)
(*IU1pawrhLMWDDeFIvQIIo8kjMRRKEqyawlh3jSDVqUnmonq8OzWeKHQ/RZ1B*)
(*AvNRKFb3lewC1Sk0+vgWJkJgCpwf64gSFEMYGt00FU05NqhfONjPfSof9NC4*)
(*aoZhNTTA0BumW/RVX7WToVqYS67pZyWkUsh3ajBdqSh8RATmHgyHdSFAPlHN*)
(*VMTrrCNr4OQ6dT0wK4y1YF1iBoESGNVEKmk91iwTTQiMsUJxBcfoXvDCU8Fo*)
(*YJBAWqjBKAMUEsihAnnCKJnLHhcqysZReZR5hY2DbyoPH4JkdmVDOLIc4xpN*)
(*BomhUJJg1RTeupP78OnH6h+SPgvqce3UAlDtKV/gIZQ6YzzzUS5CF6jQ+CnU*)
(*pYWJk56godsBSlAMYWj0wSgJQloo/cLBfgxQ4dND46QZDSuVNtQpiRdrNgpz*)
(*yTX9rIRUCplODWWb2f9REJh7MBw8JyiZ1b+N/WjE66wja+CcYsosBJ0N5bLE*)
(*5AAoX6BRGDIJTjgRjZ0w9Cha3S7k0BCeCkoDAwOlhcfMwwjoFcHQOJd9J1SU*)
(*jaPyKPMK5zI9qeqPMF7C9aur9avqvEIJ4GqKpH5aK2cp8n5qGoK+UUQfwB9C*)
(*15c+GM6ljgqFcoQfBo8KzbVYkeOhRjr5aNDOW4c4eUMS07oSp1VTpwgz5vRD*)
(*TmrlXugjrcGCnqL+Ghp4/BCnFbCHQgMn4yMcgFqhpggH70GBoec5lGhguEUj*)
(*ToVeEgs0MWDQqY8oSIYWlCVUp5UQq13URzhA7VKnxmjQ96MWJZqZUqALSgtl*)
(*RQGxuqawWPPg57LvxLpS0ALlrXAu0xN9zUoIF65ooxQ4RZOpY/wZkJoit24t*)
(*d7vYqel2GZDMfnSJ6eOhWuqjXCh3+DEehlo2ocDIYbv6GMiKoSJOmowJq10D*)
(*sNOq8S7CvDn9kJPaAFv+fIyoDOc9lcRdbl2Sfn4KIVQGvzxXJdr2i4AF5HOB*)
(*IaGOiTgVegm9aGJUs4zpwuxFndLZQCmCauUZpY+BUxS7TtVe6tR4koVs6E7x*)
(*SihmhBgoGKgJ+XKYy74T60pBC5S3wrlMT4yyIBwvrAkNRhPWFh6wECc/Cw7Y*)
(*I51a4N416OxVT1IZE2EmGEfl4nRCRMFDhcyZqyUQFAzUwMCGhiQ+SnIV6uQn*)
(*Wu0GxJKxLnMIhrditagmc8lDrT6dyhY4TBL6aoAcA4+fyUYeg5NCSfT16U60*)
(*C3neO4KChF4YTEpWroQKJuJU6CXEokb1j+U/Quwn2ChVvBUUNsMtzyHKG3RH*)
(*VwIHt7BiiKKFViBvHqFnxviNr5xilKAhgGQyGqhhuglILKPW6tdc9qZYV4r8*)
(*vCBR6Cq79XDafhThajXGW+uGa210wkmdAVGQ3rbQuXu/U2M4qXhbKMQ4EQTY*)
(*yjWOSsxVkZLw75RLvDmroPor05JchYasPkJKrWoNSAxs3i7FjBAwNZhZAqhF*)
(*I5ckGHiPhIMloXcFY53CZKMfBopSOQ+utCsgEkO7KEKc8mUO1TImmIgLV1wl*)
(*xpri/Wr2TORUKCqXGXhUChlPhsD6oH9sYcXQuiKg0Tqhl4h8vOEyqoeKgsQK*)
(*RTszRhJrq19z2ZsiXClOqe56MkIHzJPKSRQhrlOoYfJoCqHKz4B1LDJ++Z0f*)
(*PVaE1TRFCFNy0XOxDgzWbeOohziRA8dX+ynvUB5QUeDc7QHe1UcluEhWoK3Q*)
(*nWJgMAoNJcJVg4IxBsy4U+PZpvZYvQiI0PDxteKnOOfjyETTUChJOdRHYeiN*)
(*GDnZ2i3hM4QaY3XNGAMzQRc04ijtjF24pvz4ZxykSEBdoExXLjPwKKqNV3Ix*)
(*QdFNQIFQ1WSkIOfoYB68lWrX8fxINbn09ChAfnj9vBWGdrmeuex94VfKbBRS*)
(*63GeV3IxGHMqBfwUvdTUTw+oUHLhMQ3Z3U4tiqIGOzVYjRXbqUm883OTmau7*)
(*Kck0RqBTjMLqkNNrOVHXrLmqptmpoXGXAKYGz7JT41OLSRirFwGb7YxFHj/K*)
(*gJPLvEI+7oyPwtB7xGjvCJoP6CFmpERbMJkqaLiZJUDplFcYKj+tR6kMR72w*)
(*JrmEQ2OYUU5bWC8G51JlBF0X0HFjigS2dUyd8YyeEiFU62RCOJgZhkZkLvtO*)
(*qJUiFFShcCScAnfW984VTCP6a3IoNEohocbweqgp5U7vCwzKrvBUMj3ZrU4N*)
(*7RdQQigT1GA+wYSJp7BeQ+4dY8KaRWhiUJ5STvEkoHcz5a5ZcxVlT5/IwKNI*)
(*049CJRLAOmz5XDWdTo1KAAjMmMKYY4hlxBoUJgkZ2Lw7dVYWsxCshMgNTUl0*)
(*JFZgzFFjv8RBaBe1xQcdXQKUXfilM8YdKqAwiBSHVheYwYq94RUIVq4VLao2*)
(*oIuMokk2psABFCpqABMO4XhKqGxxxWMdD4llEArtzmWvCVwpcmkq7tPLItS7*)
(*Bg2hpWbaHBpFwADTbBGAPtaPFEpas9FH+6+QkDpWKFWUWgoDSgjFCTVYP0FQ*)
(*6UHp159jmVJorFkkWU0MGCGHsFMTOqgEJ3HXaqBb58HwwZWAUePrBAlL/CLV*)
(*jzqlh2Kv91AGUC8Y/fIl4C2QBwY2ShqFUEKdtwa51KmKlOhE+SVPIxgkS0we*)
(*ekqVR6fG67eSpuupvrxcU5QmFA8MvdYoU5oZkuVgKA28uGYmhd/Vbh0RYp4Z*)
(*nrlMQ6yliV/ITWFwWkqo1B/sjdxJ6nNIeeHqnZAQA7bEBM82SkWDQWFk2p1a*)
(*qY1RS1l3ylI0i3RWGdqpOIaT3w2f3jKXI5TUHJ0rlENJHgodVIITohU/Gjjo*)
(*C8WecAGiYAw2qEwwzKHk60ed0kOfxURE6AWqn2EJdcpDIA+VOTr7cNqt7FEa*)
(*hNP9ZAadGhXrZp0yDMF/w5HC0EPlujh1aigh1EerHnSl8MI4q4+RYzA0o4MD*)
(*ushQJPBTeEgoAHQ89J33lCGNV8JwIhwv5FkfLIQxl70mVF5B4atW40JdSBtg*)
(*XBdCs+KxrKbHoUdNkC9wtJBakTCDFbgAE8KuKXU6NeqOGCXNWq8EzSJ9naK0*)
(*83HULy2mnaJChKgYs/QcM/INVjB0otP6tRJixY8GDvriSh01xXgvaEt8IcFn*)
(*gn7UKT3U5IUQahRGygO23ClXKSlFzaHYKOSMF5AQQ1xpd5XZdGroGJ4QP6Mw*)
(*H9AYSaKviOQ07MJOzThKXdjAtDE+WrPFaVUaGSURiUKeNOtgigRqCmNFCJtC*)
(*hc6FGHjGKD2MddfBklmuPMxlTwmfYzDlJAtwNoCNNdKUWmHaG7PkJqbHoRVM*)
(*dZTh0Bp6icsSDhWodTVcn5HshTYt2I1OTZ7kVuRyhKgYs9DUNQ5J9guz2pqr*)
(*Vvwot9AXK3UKXL1QYHRPK/AoM6g5lHz9KE8axQ+TAIoIsVCs+uXRQR8hYzq1*)
(*ACt9+kcUMOMsVEhNnLF4YFAg/RpRa0Wo5wMfC+GCpZyiAPAhE8ZaLqi/lFit*)
(*QFQS2nnSrIMVXRLRKboVhg2KdioKaNpADDyBqAYrgZKR0Fl+llztXPavUMm5*)
(*62CawuC3sjyWlbCIeYgVjO4XrI3oIUrqw4YYaipsVoStlrxTa6pNCwTtAJoG*)
(*6BI2/KUSoKnFXumXIJQknp7zRv7Dhcz8oVuykJWg5giXD0osjwGGzzhETRHq*)
(*580ZRvWjTomh2E6KQUJlCxRGP+qUEYtqAPNlHybHaopEYYPmvMUDgxLcCpwG*)
(*k5IVxycGGnreKcq01WVDoQQYk/9WkdDuFBSUTF6zJED8FMNlj8ChhEAaUQxW*)
(*cnRtcgKtI11lSmobEdTr6VHxEAuanLvFoQ6mKQwKE/ksuQlJ9fYTKxjdNWup*)
(*56U+bIihpsJmBTZTTm2aZLo3NmuM0DSQnF+oBGhqsVf6nazzeVKpQpcwuij0*)
(*PfIlrwQ1R7h8UGJ5DDB8qDtwilA/b84wqh91Sgw1eSUpR8IcguKXYPr0Uqhm*)
(*DZIvd0for8RrnpymBAXjkUtKcLE6DSaZQMO0kSxYwwTqFKoQ9ctwWWEdhBUS*)
(*9ILyUZdAVv1cgwIx85pRdyjTDCF8HKnAMcIPQAHzBEqYdGU7EJcgV7WzFBS/*)
(*BxVz4ZNNmCpTwiMf2ThCYhFzIqneQrsUGOtECgN6VFL3/FxoVmHj4tGalRIV*)
(*Ek6+CrLqzuadGm+d9w6dZUw3RB9DQRKuHWuuCpcPSiyPAYbPOMS4xjjFOCIs*)
(*FHL9xizDBTiSckfCEqOBCUQl1X60WUPRUuaE5MhFYVJflb5fr041TQQu2VLf*)
(*FqUQDT1/lMoTQz/qFGXO6rKRvQZ1lECjQg6dCGcAGEoU1uZQCtGgUPCYSFWD*)
(*5YETRlyPBbQiIdBKBRxpiwZCCMNzMLVy1JRAeK5UzKUUZlXK83AaYITDpoSQ*)
(*MkGJpHo7WYT7rXMpDOhRSd3zEMPQbNLGVbzbtLJTC8GrIBtx0xojNA2M4ErG*)
(*OJ2MhMgVfSEdaDksTDw9561LjzEncVAJroKEywcllocBw2ccYrzj/ZKYM4zq*)
(*R4X6jcgyjqMRcQqoa3q3Jq8qJVEz1OoaGC8aEZQKDyuMBuPvSDW9MOIuhORt*)
(*jlIII8sfdQo94zI110BoKITAqLirJlalK5MSJNRRK0tQDz/F4IcPHD+M0gmd*)
(*QgHLCawfEegLOldody4Pt/gl7cwEXY8oQoVJHStC8aBLYVc7gWyNozUKFjGh*)
(*uCJHvfDmgZE6d6wMPd431AwJsAD54bTmGxodaqnCFBIq9ENuzR8UJzVL32kM*)
(*kKSrcdQ62Jqr1tAwxLrSYhxivKv2yPMNzQSKW7lCdCITOH46NF3B5o9SgRCG*)
(*T4EkbNXo1FzJNHx0igKEjaZiU/VTTS4rSB0c7+2OFYkuDktUFnrUHD/XAGYo*)
(*hGjliQQ1WEVCoJUZVysUS4ouiegUnR/rUUYD5RTDg5zAQLbS/RRaCXRSO5eH*)
(*TGCe7LVkQJckilBSWJysyEuBt1NoEeMVomUKVSIUV/DQC28eGJlGp4budJJg*)
(*791TM+KIpgel0A+5NXN4nAqcN6udqC+8ReOodbA1V62hYYjlmYG0GIeoWRRU*)
(*XtBMQLl11QnnMoFj5jIBFS4BGAhh+BSRhBRgJ06slBo+egSi0oOmolHuvEUH*)
(*pmOWTPFwR45HGGVh6FGnUCtMxiot+VtYWbBSBweryesEXiSarcygOhkTFEvM*)
(*XCZ8avc6NSt7hjtWTlx18oFwCvSuy37BuY+EX2V7QdAlSS0Qb1/kC18IRmKO*)
(*KmK8Qqo2emDgbUkGTC9zwobe5tF4p1ZfmCLMk4mOMcKEpkeD0WGygvFFqJBh*)
(*hjeKYkAHWyGh7PHLXwkuaQIsfJQXKD+Mp/JwCKFaxZjOwBPqgWjR6QaH3mJo*)
(*rsMGit9piofRSg+aitPo1CpzdQA3JTCx64QedQpVjvpO5XCgrWvX3Gg13am5*)
(*ciXMTIolZasMjFHmaFCvPgdY5hiRkohizyPCiKCEoJE1PBKq3UVxZeCjI94X*)
(*mfwq2wuCLkxqgXj74rr8rWAk5iA8SYZTtdEVQ8D+ud6oFYwXBttNJU9TnRo1*)
(*3dBjPWS8YERuFH5Eq7ERVpRJdIxBO5oeTmvBKkw+oCcXq90KG0WL1SiKAR1s*)
(*hYSyxy9/RV+WQKgoLQxgJsroIWqu3KhEUDzMAF4JBZVyyilAVNRc0codcZri*)
(*Z7FSgjo179ScQo86hSqnfIc5HEyyJ0wP3SlqdVAiVCtnyaqWYUnRJZFBwuOs*)
(*mJR7QYHRrQg5NLzWIVFsC1VRYCgqhCB3UVz5/OjIw92poSIcWdMKKmgB8XNK*)
(*uB8OQKPWYOAkNKpd7dScLkUk6wI9VLVpU+rUqqNGWJn0gITrg2eTHqhAu8IF*)
(*UmGjVpw+htEgNGRVRXnBiASGh3cKnMEDrAig040pVi8YzJA6uacUzwwh8iXg*)
(*LYZm1DUFlifji9XNmkoYzUK26+hHP8o1NIsK6jcyxzX0cGdAF1IGiTHGSCqr*)
(*BugO9A6GWxJ9ITmULStgVA8kAU5xCp8iqh/qAg8GYkDxQLahHiaIDG/64BbW*)
(*LTI+StTurjgx8JGSh7hTC1zOR/KRkrmUoAXEwykGgxUkVaA8kFhtUWoV1qk1*)
(*ZV3SqUlaJ/m6oAZUr4JE1VpNw48osUZYUTLRMWrySoNJDytXNQXalSwQnQrr*)
(*0uM1WH2UDGO8sKKy6pc7ZYDRR1YTJdlSEWv1wqoB/Wh1k/GOIkTt3tOPKCFC*)
(*X3gHeT2SUsbrb1atrp/5KJnuTZ2rCWFiQI/gzoAupAwMY4wReqsG6A7lmhF0*)
(*PgcoX1BmDHPW8FEsoSTAKcBHbjN08i6gYIJxAvOEUCGAjvMR5ANNhdvqo0Tt*)
(*LgrF2FwokVzQSnLyIysUOd50WTVQaquP1SGqtgREDYGaefwSB5148KDLQwwH*)
(*A8FjjYYGqlMLic6RQiJcd+hOiig4gBKYHlYkqHhMgTB45fpHq0IrDMpNOMU6*)
(*BoKXMyDhjQkNHNbCrqOslxbUFF65IkKjAxaagzqtQamm85DqCxMaymidjOL1*)
(*1GmpeOuSuQwz6Eg5GIZJNjh2PKhd6tqbKYaMIf0QtVp5wKizEncCUIis652p*)
(*83KqKXHCqU+B0/XBhhF6swtf2VDMkFj4w4uQc3ng5CMh1RDewlisamcsxpWV*)
(*MG0+gsJwIvnL/1wooWpC4woVOJGhO/WPaBmBgym7lC1qirfL01MotEK1aaXw*)
(*O5m5HmpRnM24bfvDMmUIJgaaKn5TlKxTc1LOuIwqZExYx0Dwcqi8aUM/M1I/*)
(*Qet4mAsJSAucwu9UWOVRtTs1IS3UdHn4eCseRyVqPeZWsovnaCp8/DCJQidz*)
(*vMgdQa+xrcXQaksRq7UpWuROVUoUtrqt+p1YlQ82cPJTDMCVhXyGCoktO0Ry*)
(*iCrkwVDZ0kinJhRDIfxoAMvkSCFNAWhKqE5tt3HtOZnTMiWBa1letaAwh4zV*)
(*alRdZgw8+6DLBK1darK4oV4IXZZI4woZKwaxsJ+CLKG8VYJeSlk7NSFODzdR*)
(*VdQppiXu1CTZDjOHEVdIaGZSXClwDeNEl3UMxECNsZLGsE3xUCmsLh6YqwiJ*)
(*6Hb5AKnJqwU0KPDfEusULQZCqFNh9c0aR5R8j6O8WgOhh+xKp6ZY4QdYp1t5*)
(*RqPM5y3UidrlNVDYrLDRKFcW5S7bwoLMRRcR6rLVBMoYw48QuRMMLEyq6NRC*)
(*lTdlUbGFamKbuLNmYAvAiQONvpUHNGFQPVZCJNQx7gRYp3ZkLLzd2Qt1FTSX*)
(*ucxG4MJ3XaF+q9U4KTBjJiodNhidYlQhFF41QOKyRBpXSFlpaReQlSG0TXOK*)
(*lLVTg3fcrFAbocKIJioSK2hS+SVGHUiSJYACFjIpoR2uDtQ66qCEFtRHyrWa*)
(*DZoBTI8dFSAFrhYgIfDfEusULcYwBpJrKP0Gy4WPo1D4cjGl6x+eEIUJf1QY*)
(*a3SKNXOEGFC1ktBY2UBVVebkLluRoPoZYuEAxgpDGorT6p0cJzV4NCPfAjW+*)
(*iZZ3Z9nHiQ3BBj/yKSSBRClkTFt5ZqiDU6B1vU3bg51asKtPBczFSaocc8pP*)
(*p0yevcCFL0FbOSWpFczydKpIfA2ppuhH1eTlFgpM6LJEGldIWaEINzo1NDpM*)
(*9jp1akKojVBhwJafpIz9FCfoLD6OKBIqY5m51qyWKKToso6BuSHx0Uq4ESlq*)
(*ZKVwNp2abkWnXaJTbp1iGyKE0yk+mTii5KOxkGSFFbwQgxUhhFQHodUccwgm*)
(*DwpJzqQxRpI50LpVJMkjZyMQdGpMhldjGP0SYLy/xh5em5Vn1LoVpGSxB3R1*)
(*VdoDkPm/W4Ga/KpaNdzAxrhm4Een6DS2sJMOdEpIiIQ6OAUSpT/6uDc7tWBq*)
(*f1CaS7OCJrw1RZ0yefZCLfwG5zLVxrUioYONKYYeKzDv8wtKiFyh959oGKd0*)
(*hQaBkF6IcM92aoZCecbCvEIzirJi1dxiRTLXmtWVtrLRkLPE027g5xeIgUGy*)
(*2FEfedfqi27XwADBQxiMTrl1im0DIZrGkuBaY8q4Zs0KK3hXDMZ+CcP1eZAI*)
(*E1OGJeOLKpRmJsq8UX5V8hxKXBamKJzFk2MsOisSIVTUKO8FnCsJrlUnD4kf*)
(*TBMe6DrGnZrzSQeNl2LrG5wicQoF4xRudEr2sfqe8h7v1OayL0QRIpwyM5xO*)
(*UsETliBjrkcZRIsYMwYtL+h6h2zz/MvjKJQK9jTCXYE0MFP4YUyFtOiyjzo1*)
(*PsTVR+aEBa0w4FEk/AnRgMQvASfAvNcS/OhaMKC2ptapNSW6XaWtDnSkEIYk*)
(*0IZ1lEk4hoIE+ZQEHcYdNSHXBiMlmUvlHkqO0lYZRd2UhI8pD4lHCB30Th5o*)
(*nVIroUsOm3EHnS4Bz+ihBjDk8N754UHVGvqFS0kfTA0zjKJIqI9M6OEUNNn4*)
(*8DE8UIacfDTGLACRAJjLfpQZPERqLD1rojql/S4KUrAclyo/l1qtzBIu/+1x*)
(*MtpdqWCXUBvJyapFEtKr7+epk1TRgH6pyCy/p2YopK5zrADU3ujU0DEoV0LA*)
(*vNcS/OiqNLS1tE7Nmo36LIYHOF5CLEM4NEqZMBimjDrhsVrh5/qFkhrMOy6X*)
(*OnOdADM7p2S3pjSoXM8fQ5WRHvpOPnkoYNYxrrNQJcJsZwZb+ZHjNI4amiUO*)
(*Gjj5KWjgJIAhTqhBeXVqxst1UTxCKhj8/BjK5Zb2+t95p/Zwy7xTs4oCwhxy*)
(*WoYNiq7Z6UpG2eqVq3ceUsFuULNTp2Z4J6TO+Aj58e7UKrV+vlPaqBO61boC*)
(*5ziGUuGFAXktQuiHGAyFksESlvjBMEN0r1FtavJ6yZpUMJEotagwxFoJb2FN*)
(*kyE6w4xRORirFet0v1BCMnmGeVW8co9ZrmPQWXUcoXhgFLqOp5ySm9ZTyFCF*)
(*ZheVe35sG4BRLyQKUWySxSIcY+yR0M5DpbRRzhrYJIMpDNRHYyeqAa0bjAan*)
(*UmOlwmkK5FlhgTMQCgHMZd/JbDo1PdPkKTpVVHKhFjgcBouMtxWjuholjjKE*)
(*Ll6qvDAajCImUVhHUB8pEWas8c0Ia77BsmytzMZHWFTrdGrNCvTRaYnpedii*)
(*L2/kcaQIZ+BRyxAFQw0WumkdI88WIS1UUlHDGD08sQzbTqTpMBS4EkMV8tat*)
(*7lAK0bmSUMqHzVLkSSiBDRmT+1tnrgdsj1gYyUbtl4gTbD0VFag8fgolKwWu*)
(*Lx0JXBH8USGZci+YYcIUQonlDaGwFdap8SxBDZBhFIOcMddZkoi4Rm0u+1dm*)
(*2amhQo2fKiq5KOwSl4LNF0O5FaMmGyWOMqRjoCozX3wM7yQK64vuY7OaA0E6*)
(*oT5KKrM1pbOVFUXRrrdpAXG6VJOXCor+QwrMGYYZ6+k4eHg7NXS6hBZjriTB*)
(*qEM8sTxydKcVCTNLbp0iBKqF0yk+G4n4tIUh1jpFolzCdp25wiSxwvaIhcS0*)
(*q0iAlR/R9ONVMQolK4VZleiKgIcYwELwTp5CDBJmUC8kfBqEGE4xPEBfUHpR*)
(*DHLGKKjU3KbGzGVfiPXKcJadmlFt0OTfa1mHrnEKNrOirVaMemLwZpQRpupK*)
(*KrOkbgsV1hcjGZptZ5h0gpmJBpqiiE/Usk0rpdqzpzo1OIBxSuIymqvUSJRw*)
(*CiGMkWLP49Xg6lsGkqTlvaOQMLDltBimKSvGGJ5DuVTW9S9lyCe2JnnWxdDP*)
(*HKUIgRogBmtk+WjW0VBfGnfKUI6GzGMuxRU1jBHKnHcs+IxiNEPwEmCGLVRh*)
(*NQVFoh9FE4AS6Aicrtgygk73I18y0cAgH2x4EciuVBUr1lgLIaEW5dqgSKZI*)
(*9M9l/8q8U6spSnays65oqxW0pins7EMZguXIOgY9qlxKfX1hkqEp5UyaoT7C*)
(*KFATKf3w0ce91qlBpwJ29THOBpMJTI3RB1OEo9kOYwSPUvr1DkLCkhW5NVuo*)
(*KYxywzRlxRjDcygXlGHhxAqJR6fG04JqoDCgc/lwu46ckqB+NQUJ1SxnxnUi*)
(*E2hd+LnOTmrTUaiMZuijBJhhC1UoIUH/KF9xOhh0umLLCAQsiQ5DCz/RwMCb*)
(*MIg1lAtPnQznrkvMmIhOgQwwhKCohBgErs/l4RF4rTh/+pEXJTvZWVc0HGyQ*)
(*gJKDGqUMSRgWHkX9kpc4J+HzoRHlhqGAOMfpgv6MFAO+2hMCMfY366BEUE+b*)
(*pVrn0xpHhnYm21HwfBrza5ZywTpGAhuqZZQbRykrxhjXW2C8KFaowWiAUA1+*)
(*tBjaUNh+odwjQtFrnSVUjoZGDsyIkTCslAY+1n4hY7BZ7apd6tRQfpyWKkTi*)
(*etTAYIVdjUfBo9RBDMxISCyqXIFA8KarAdBTXg8MDWqIsgIH6wPky5zxUb+c*)
(*sKqay/4S9Opxqhbhitazmhk/VVRyUU13ajwhhqBGKUOMZmYYPMoz0HhoGDBN*)
(*KQ8wrw2GDfHu1ILxsiq/pEY1brMU1NNm2dYz1hpKhnYm2ynw0By/fKwuWMdI*)
(*YKOaKeXGUcqKMWbvdGoKlAg1uej8CFegU0ORUJqZOO4dkTtlTJE4SAVODsxI*)
(*XT5JhINrOoVOlGCz8kONMaaXH9EpCms0GAf1YU5LFSJxPYq607LVAYptPjrC*)
(*9DOI1R3RB6DsMYEzAKMsGXqMnZL0gLRQw3iF1BQ4QG/TeFVz2XfSwKVj/qPw*)
(*oy0QZAeVydbBxjB4CBU3X1zAV0sMtagcy5FEoQJln2eJ/+jEoZ4bCrsMg9Yp*)
(*K3KSBQHxF0WcAqizIfy1YhQhemhPdWoVQsqd+vwzJiihaEfhoWNQAJQViYMS*)
(*HiRueihHI0IxA2mxsk3RYk1vyC3DP8O2nCieFmsmQHM8Bj9gDQoVEQp2QDSw*)
(*lHImhbzRopjRjEIdoRT6hUOigdKjsFMbo5/fyeyXuEBxyNNLeUpNp3hADQkt*)
(*yl3jx+uDGZz6R2awPkXnBPVIsoeBZJ0Ix0jYaE0WZ2NwKHu79Vw+mqJUqHaa*)
(*tTBAt4nxykg2PjnRpWHNfDilCU/xJUYhlJREqJk6tcGjDDZjP/rRiUDvTo1S*)
(*qAtsWBiumhKUTEWcnqqfkrSeYlAf0QZtb3ZqTJi89UtO7ijtKNXoYEnWQZeF*)
(*jljHCNcCnCs8SlGkm+BhOJHPg0fnKox/JoKoMGxQtFgzAVrkMXgDa0qoiPCw*)
(*hbmHaq7joIGBEgoYNG11ygqYDqMzP+gwqIF/5EyCGZ1CcWilF3WTms5j5gNK*)
(*sS13jR+vD2Zw6h+ZwRRalEO4k0ljxgQTIBhTueYAy6t5pzYXUvI2bWLDOzXl*)
(*czmKprd+iCoj1kLk6asAg37UFYlVoVycPHLlsLJijJkGwilJhR8CQxkoezSj*)
(*X3NytmZ31iBpfEQ8ImUMM5jkn8fjmUcxUCOtY6BmIVHWMU5qIWNCGIYY5tTk*)
(*6V5unWfeKhT/FC0SnXJmYHah0yFOAyGfKkImGxEUmJU9IWxUcyMuWPEIzVmD*)
(*ItGAph+aZtZUhLYUyKXG/+BG5QDcb0ULYVvzxEpOa7IyG8AYDNA1K2bFljUG*)
(*aoAVOmiaooXJPSESZq5BJhzDsAEN8cPm8hEUpCIVXZhS0bhNi7DNp1NDs9o4*)
(*Klxc9R03IDEYqKOShcMrpDhhWJJ75MohnCXExoOc3j0m454gBCOkYkETudcQ*)
(*g5N4RFaoEI2IJFI8PCGZkED0EDRnTVGraYlrEgYM2E2phYNRrnQ9ir2kMXQa*)
(*H61xYYTin6JFqFZIzi52ak5Q5YICU7azgBA2qrkpF3g8QnPWoEg0oOmH5phr*)
(*KmbVW9dc7axNHuIC6riynXYZnRSfKHsMOTAQxn65a1bMhjkULYQKfYEMoHxK*)
(*co+CAdmgCIRkCtkweICDUR7m8lET5FJzdMsMbdCa6dSYo8LF5e0vDwnFQB2V*)
(*LBxeoTESrSF1nHLlEBYZQyEaQT6ss+zUWuBcgzpuZcaoutD9ysS0OzU0P6mJ*)
(*1X5qjHUuH+gA9A78rIpAaz4rwXUpOgYGzolPZoxcLR8U4ZTKqLFTzjal31DC*)
(*c8jzT9FigJHjRGFbkUBy+OlChYF4VboKCsyKAYUNZ6Gam3WBJ9ZqzhqU+hp0*)
(*PRKhHGw89NCEBLA+hYFE0aKwlcvnmw4GTrRGR4kLJjpYHjVIkaHKIx+MwShp*)
(*DCQ+KOgYOJjSJhwzl4dPQvAC/5l1arzAhcYU5GaNKvZcTx2VLBxeoTESDqvj*)
(*KU+mR5FhqhMjM+jUYL0tB6AMGPWZOsqLAcDje2oSMiUYmhK5FSE5gct6UYLr*)
(*c3SM63qR0y5X6xcRY1Zl1NgpSUtev+ELzyHPP0oL/CaFECEF2IoEkoMilLs2*)
(*bUGBWZMKhQ35RDU36yBPrNWcNSj1NRj8SAT1cXqJQeUAXDJySBQtTl5UwLxp*)
(*MVyzYoaDKTEGQDwKVEiPfDAGM7B5HgxIklgo7LrFY8xcHj6xdWphvj3snRqz*)
(*8CEG6qhk4fAKjZFwWB1P0dqFFjE4RT+EwoDDdlFQ2AFWM3VhUgumB/SUadOE*)
(*namVOmjdj3PJXEiLnxU/hWhQjMFUNI2PQiqsY+Q8uBKFIoEBgoQwGcvrV9o1*)
(*D18KIAwrLeHke6SNoLgSQmFDxxtWhIxRwPziWMc1fgoTHaicGWAFZp3CEyuc*)
(*DtPDSYMwrJUqlBaeQDkhHmI4Dq3wwJxocQJfAUNtMbzxrlnNUbkNRXfKQEId*)
(*lQcRgmFgOymUxIKiAjUtsT6Xh0D4a0vtIvOj0qnBJYBioI5K1g6v0BgJh9X0*)
(*VEKpYQUlhCkdVA2hGpZp3F+jMFA1k6FFSLhsHTXmXUu7zPZICWuw9GHe6Udl*)
(*jlwhFS/qqK5fCJVnQB/jBLtOUPij/OJlHK+UV/e8Atm9SwobRUuV7XqCOQUF*)
(*1W8lH1oRMkYBk+SGXPQKQLnGTFeTl3CNQEKteKwISYyMSqhbcYpyBcAprGpS*)
(*JO6jIqRRItTysU7h8cvT2wqMX2vWo0LX9MFCBvTBBhL+qETkYFwVStRC3hpP*)
(*vLnsO3Hr1IJoZ5thpyYUJ501bRkiqUh19FNSk1VYz/UXaMDxDIdWbEy3MuNO*)
(*DeKswzMcYHjKt2lWYqlZ3mdh3ZDVRz1PJGzw+lXt6zGULsqKUwQlY5xg1wkK*)
(*f9QAA53lNUgUohqgZoqWKuehfldaqrmodwqIYQXlChWhy3XkYerUMqFyDxXG*)
(*kP5v78rAh1WYhBBSIC6VlB6h44Z+xiiPAWdfBptS4u2jMJr6YAlgiivJUaH7*)
(*fsXKqtDwUTJYkrGNgJzLHhTYi0VjITu1IAqDuNxm1qk1LvJly1eM6hBcUNbK*)
(*ho5RhDgpkQsKviXu1Dxkj3Rq6IA6DsK58k7NmOuUnJIyXl/0PHGyYiRYxbN8*)
(*vVR66kyRLBYJ7dAdyXhmgDeSaqQrLZQtNDSoKmiCogXmvF8WGVB5L2C+QYSM*)
(*TG8RVbIvOjVKwCVBwMBWAkGn+C1za1ip9EABZP+F5dopgZmM5Y/K6ZqB1DHt*)
(*FE10sNyuMZ7/KFTYbE2Aucqnh7w67VZuzGUGgvZikSaCTg1t1h62To2v6tR5*)
(*AY6vjPJjhMuzkTJiQLIWyb1w4nASCqSO3/iHn1M1CYEYnJLTIxOcrBh562QC*)
(*IqTyjVflOkW4KqGbco+E45kBPBIrJA9aGFtQIQqA2gMxzKBTM5ITsoEiZMQD*)
(*WB1BgRmwDcfVdDo1edaVIu/UGKqtU6xIIOw6EtgqsJpCp6aPqT7OPjkZl1GE*)
(*cp3CaKKOO/GMRhDlWQi+WdqN4FrTQ54Arq7NZa8J2o6hDdpkpxabW5gNiIxO*)
(*rdjKZyBD7bWQ807N/xwEB1jrZ/0Vqquy1iV9WE3T1D2mGYjEU1eFTcXC6Qzl*)
(*fR73WAKUFf5GITxRGgtBkktwofFTqNMcP0UCw7qE4XhmgNAKM9LJR0NC4t2M*)
(*vEJqD5wym04NBhpSB/2yTpmNoMAgbN1xNXml1yASJx6m3alBx2t6xyePwbAu*)
(*ussNouKD2xo/2TKb5ET5qTkymEwA60SYLX6Q1OTJ3QmwobZx2qnUYqxLEqCp*)
(*ZTKX3RLjQYWAv5U2+t84jhJjy3aG4agvA53auE0Lxl9heyg6tWoMs0bQ1WQ9*)
(*B/FjjLJG4RSud4koINbBjZyt5p0aqkd+dlCOF1f6RDlgqxUqiDCv1OQfOeVn*)
(*ZLjQGp/ilPxyDB4pAa0wI+WVB13jHqFhTFhpUeLLNooWCAaWX0id4ZRkymwE*)
(*BQZhGyETpp8rEj8emCk87a65WtM7JnngUcp6g6hQH9Vud2pW15zcNxJYotlI*)
(*DycxLHoANvBMg3Yrz9VReXXyc3Aue0fcOrXRHbQkjlNzy5u1JG/WjK3s1ArF*)
(*RRNXvmnk4enU+DWCrib+HGQdwxydtjjRUh/h7nZqdfAbywcerQNMfnYwSrrc*)
(*HSffrScLvbY4AeDXgjEeri+nKVYrfjVBMt41zSSVpxoprzxQAizfXH2EYJgp*)
(*MI4iRgRGUaGckkyZnoTi76lVR3VKJTx7iF9odPxU4jFUM7ka1K7SlFp9p5xJ*)
(*uHamBIkhbXrJycfRCts6WM6wkR7ClQsHq8lF5EGdkJDGZVcSYC67K+hlJNGm*)
(*RXE8vpsG2rRi29mTdW1RmG1lv1beTcv+JwpHzdq8U0OUo4WIUqgfVYTUIIBz*)
(*WUjLlDDMRmpy+BHp1NBTBjNxxp2a1YRkVRqQXGuCZLxrpkErzEh55dGR6P8w*)
(*rKA+GjqhwoCoXTxg7wXIMIDqRzOZnzIb4ZdYddSVZz8kOgYP/FTiMVQzuRrU*)
(*rtKUWn3nNJisCamSRpJTyCEfRw+FxmBXDC2s+eKXrTHYSCFKeNh7pybsCpK5*)
(*zE7CIAttuY3aqfFW/m/xyGNYtmlJnOxsI0mzLT+Sb/m/07TdTjvZf5Ode23V*)
(*u0ei/dKsSUqHZFE7FQEPhcZOtC5JKo/VTVda6pzdqFtpu3V/zcDAwEDvRxtT*)
(*at4o5AMKd+qJYcTRqtmaNgrrj5igh9r3nhjveDA8EmOYhCurfgkAfSS/DCnl*)
(*jFqrFWYkesXiagtSCh2kZkligU5s5MIDDYEVm2QKaqgmWkotX9J5XyT6JeOr*)
(*AWXoA5fvn1L1Qe4UP7i+d9R0p1Vjre1OYPhhQtIkEyUOeugXeoeqRadXaK0X*)
(*OYo4MXlMocDvYn8E0UpOvnPZp6LgVnRqo3Yq+78o36IoiKMwjqI0TtpJ1oBl*)
(*/83bs0673et1er1utnU62adO0aR1ut3uIJdhvz/sdvpp2ilaubj8mlve+e00*)
(*a+MnIRW97QozsooUsOVLWBzkCim1ATiHWkuTExVGIWI0GDCEvsjBzCVwuaQM*)
(*sIgERHoLFUIwHicLdBgD3gmJVQPvsoRwq1/WZYhO5EmD4xvv1FB4BmzDR6tT*)
(*6Fwntl3JESqEmq0jhbC9oVI65VeblCNCcoTpwWQdBYzJFh48qrnSxqc0BUbA*)
(*PU6+ZKJVoRAMP5LSxiuHHMLiIHRBgtmbDd5l4UUOdWIyzPFTGPxC3qxUeAhE*)
(*2xK0lo3DmAv10JSfHupo1aC1djq1vIUK8/c4Zu1U0abFKtviOEjiKGvTull3*)
(*1ulknVm/1xkOektLg6XlweJi1pf1u91eO+/dulmLtrKyvLq6urKyOhwudbv9*)
(*rH1LkkxBqXfU/5WWwJsh91anVme8ZOHUWTuGBnTxelRjaEU+hS+kVhd2S4Rr*)
(*rZH1CO16r/SKbfRcQ519gsmmxlDFpw2a4S32ch36qIiLHx0DlS3UUXQu6pRH*)
(*sikgzMjGFyADSaIQZYAaL1mPMKOs7kC1QkPK1jvsHZGkh7fOFrgMM8xR+cns*)
(*0ZXL81Ofgg6D+lErVroY5PI1RdkV0q5AOeVnSdQKqUaDCwfw4OEAPu586CVS*)
(*aZbQxYSGclkeTcNNj7hTNKKaGeXWAVZUlE6n2NXBMBdKmurUeJno1MquKH9r*)
(*Y37/rNjCKM46tVYct5K8Uwu7aTrodZeH/bXlxaPry5tHV7Y2V48eXV5bW1pa*)
(*Gg4H/axNGw77y8uLG+trGxsb6+sby8tZs7ZYNnFlsxaPmrXythrz69i7+ctr*)
(*rouLX9H8rKZAMuW3TjV2osLAUE2kNOyv6lFzSRqLmv8im0TQc4pBvgLX1UFD*)
(*nZquXwcggc0oZFKUOmp4yjvll29qUqyuNbgAGTwShSgD1HhJEGFGSaZQySPx*)
(*UZhXuytOS8BPLUqgYm9W8hONLJKnB79IUUGtUIzxvkBtDBi5d6hp4UTKEThG*)
(*CFtXyFDkAYbnkHfBKpVmCRuMddQFp2gabsoDhAo6RqgZ1SMUaiIaQYl3rgBm*)
(*o23/ygzatCAwn3tU0fiGWv4Sx/w9jlGi4nghSVrtRLWTYNBNVxZ7m2tLJ7dW*)
(*T5/YOH1y4/T2+onjq1uby+triyvLw6XF/ury4vra8tbmxrGtza2tY+vrR1eW*)
(*VweDQaeTPxuZxFnDF8fVA5Ch9gzkvu3UqJXovTyFYuhHFy8qVkjQESdIDVb+*)
(*PSWuq5L5zhoUVzD6+YI5xUAJsIy1Jg+V3sKMMiaiOq0KqaMK9A6MU64JCVli*)
(*NDS1AIWoJApRBqjxVgeDwLwEkixzqFZu6OErIxJBV2tA8AaPUhmrMPFID6c0*)
(*Rq3w5qAjVoXUSLl3qI8tx4t8Vx4YB4X0eotf6CUiIY23jk73i6ZH6KF4Y6D0*)
(*CIWaWPFszSVjiisAJ1T7S5p6anGq+kup2rSdF4mUnVocZs1anIZxopJkodNu*)
(*9Tqq1w5Whu2t9eGZ42sXTh29eObohTNHz59ZP3NqdfvE6vGt5a2jK5sb2X9X*)
(*j22uH986euL4se2T28eOndjYOLq4uNTr9dppO43TJMqbtZ1OrWrW5p2aoxj6*)
(*0cWLirBeeXhhYHgIlnNNQZdqzVtpAfEHw0B2Pg2wjOWTh0lvSUZB8Gh6WBVS*)
(*R9XUOjXXtdDIApQDkyhEGaDGWx0MQO5JljlUKzf0ESwj6IKFh4w91qOocr/0*)
(*cEpj1IrVHJMhFGx0pNw71MfW7nVqjKpGxC/0EpHwxltH5/pF0zX0qL9NkcZY*)
(*t0KC+yW5ZFXlId7u7CmZze2whqV632M0+g20KAmTdpi2Vbu90O+pxUG4NIg2*)
(*V3tnji9fOrNx7fzmtfNHr17It0vn1y+cXT+zvXb65Prpk0dPn9w8fXLr9Pbx*)
(*s6dPXzh/4czpc8ePn1xZWe33+512J03aSZRqnVq406zt504NXSnTzmdDP7p4*)
(*UZGsaL5m8hMlhXouroVC59OItcfpgEkemEhQLYy1kyOoWqtCZqGh6Y2uCFeo*)
(*/FqAH61Lr5FFAROAAS8HIIRHpR8/HvLGG6qsNMLYLMVIGHQAM0YBQXca+ykk*)
(*1tCgKcqMVzPp1HQx6iSqkOLZwxyT3jBwMCJOPAg5nIY4kcNEEGpQRIWXW0f5*)
(*pKZY01UYIGqKwio8OgwC9gBgTGcOOeWSq3Wrqqa07ZbsvzYt0Du10Q+gRWnY*)
(*7kSdbtDrqeXFaH05ObqSnt5avHJm/cb5o7cuHL15cePW5aOPX9u6dW3rxuWt*)
(*y+ePXjq3den88UvnTlw6t33lwplrly8+duP6lctXzp45s7G+PhwMup12O03z*)
(*22r576xF2o2FeafmI4Z+dPFS5dRVrVOJs1bpuZQirxVozYcnLKekpZKH0o9O*)
(*l2QUNI2qtSpkFhqa3uiKcIXKrwX40br0GlkXMEAMeAiA1+xhnVdL8WZFovZh*)
(*p6aAeIyBR+EU/ZAVDDMATVFeodNSgknolJAB+KMWqpDi2cOcoV8SBSvPTrBn*)
(*I07kMBGEGtRe7dSEtOheGBOVS6cGAXjAYI465ZLcdE1sc5mulD+gVv52WhzE*)
(*RafW64WLg3B9JTm+3jm92bt2evXO5WP3rx5/6nq2HXv65olnbp+8f+v47etb*)
(*Vy+uX7mwee3y8ceunn78xvk7N6/ce+KxJ+898fitm1cuXTy2dXR5adDvtrtp*)
(*2o6TNH+vSN6ejX60bf93alRhmWo+G/rRxUuVU7k7ci+qkdYqPRdXgaUehtsj*)
(*Uk5iaEBNC62jGVIHDHq0/LdT8lNcBfS6UNh5HGUGhUc5JUHFO1WpreM+Y12u*)
(*GSXK6nJlwpWcXRQDM4qcSQn5SGMPpcTKs6rXqTnF0boiAvZxcUohvwScvOP1*)
(*Q3GqLR5TpipO5MDBqBjMOClE01uCwZqukqCjU/S56H4F1oJEp6t13rRT+glJ*)
(*4MWV0rk0KvnPp4VR8atnURAnYacTDvrRymK8udY+vdW/ur1879LW87dOv/zE*)
(*mVfvnH717unXnzr7+rPnn7938u5jR69eWL58Ye36la17j59/7snrLzxz+6UH*)
(*919+4Zmnn7x768bVUyePra8uDvudfqf4cbUoGndqavwL2/u4U6PGTzufDf3o*)
(*4nWtbIZmZfubLTpRUrvm4iRonTciLmfb6XSAqlWOnZp+raXY87gHGCE/wuS3*)
(*koZ+RGlpgQs83lNXMFan9GELhXi7740hwLiSuFzpdyVnt6Ryiql+kjHUFGa/*)
(*ZAylHM1YHgy/6vnGajLlTUN7v1NrgX5EWFs8pkxVnMiBg1ExmHFSqA9G04PC*)
(*YE1XV5LRFFWESPKKSXhmZAssFtS0U/o58WAF2Yi2uThKcUctyn/0LI7DJA27*)
(*nXDYj1aX4hMbnUsnl+5e2nzp1plPPX35vecuf+bB5c88f+nTL15696WLLz95*)
(*4t6N1UtnOhfODq5eXLv3+Jnnn7r2yoPbr7345JuvPPfCs/fvPn793Onjm+uL*)
(*S4P2oJN0k7gdhUn+LTU16tTyF5rMOzVnQSuJsJy6KnfCg9beudQRGA6UbVdt*)
(*xhkBPUplNX+mNizKOzVjTJ1cQnF6JyS63NTkHQ0hbJRDj7UmmQutWIPrjYGa*)
(*zmSRRL9H6CltlOONiBFWSeglSGCmoR95c4xy+UJDwcPx8Bu4fJJYQe7u99So*)
(*hWPlQaiWB2NMFw4WKpSQgzrOSNBEhafyhAoK46Mrw1Q0jZ0w+hLNEgxM4rVY*)
(*kWAQ0GAXiTv78n0dMxSDH56r8VE1/pR3apkkSdRuR71uNOyHa0vxqc3eY+fW*)
(*n795+p1nrn7x1dsfvHH7a28+/tVP3PrSmzc++/qVV586fufa4rkTwZmT8eVz*)
(*gzs3jz//5MVXnrvx5kt33n792Vefv/f0nWuXzx07vjFcGSTDTtRLgk4cpJGK*)
(*wlbZqRUQqp+6nndqUoGlw7qW5WcHD/CwnkzV/Y+yoKXb+5REnSX5rKZSy5gC*)
(*X3SpHopODd0vhF0zfNA1Zi4FiQ+uHwbXufxgNDm9hc/qBsUpvZ2QoPhruiPM*)
(*WMMWn3Xw90eYRJUEZe90augY1/WysLDgseobT1rdxxISasJj1TgtAZRh1Jxf*)
(*NOXCewrX3ZQwoD6iOSlZAgb+pkC6psRcmpCc6vL7Ylmnlow7tX43Wsw7tejc*)
(*ieGdy8dev3fxcy/e+von73/9k3e+9ubND16/9rlXLr37wpnnn1i9dTE9vXXo*)
(*1LHWxdPp41dXn3ni5EtPXXjz+RvvvHbv9Qe3nrtz6erZjZMb3bVBuNRR/aTV*)
(*iVpp2IqChTBohWWfqKhmbTc7NdfxsLBMNZNh6bCuZfmKhiLBg1aYZrydy6To*)
(*1duV6mqwocHQTGU1GmUm6A9Zp4auu4pPCez6wAwNzFwKEhVc5ihFCOOF1YrE*)
(*R4/Qo9rq5JKTIauDil0vUBulHDUkj2DguNCMiPPKnTo14yiPH2YdBcbJO6t+*)
(*b5JdYVNzrXkiBxO4FysnTyW5xFhHfaGmNEWLAoIeRQdblQtFEadXQ1qY8DAa*)
(*xOmREnOpJyrQvixW3lFL4ihNok47GvSixV6wvhRdOrXyzGPbn3rm2ldev/ud*)
(*d5/5xlt3vvr69c+/dP7d57Zfv7/x5LXO1dML2xsfO7l58Px28NiF7v0bqy/c*)
(*PfHGsxffefnmm89dffDEmetnlk+tJxuD1nJnYZge6UZH0uBIpI6EqpVV8fFN*)
(*vWDvdGquIlna0zbKLGGPFQ0rkgSPxzloLt5CFcyQFokGPuJolJXt4u0h6NQM*)
(*tShdQtj1gRkamLl+TDa16pnCKCxEfqHncTaicAZgmChQhxQmQiQScvTEs3JY*)
(*rXpmCqqQxy9fPnWS32Oin1r5XGtcnEAKffRYhqp2hUd9gVOE6eqEnHLWlV4/*)
(*UYKLKJQHay41CJ5fnnOZhoTll8WiYPTSxzgqOrWw246GvXgl/w219MrplWdu*)
(*bL/99JWvvvbEd9556utvPPaFF869+9Sx1++sPn+z/8TF4PLJR7fXD2xvfvz8*)
(*icM3zsf3rg2ev73++lPbb79w8Y0nzzx3c+vGqd7pNXW0f2ilfXCYHOyGB9Pg*)
(*UJw1a8U9tXDeqbmopY5WRcYqkhUNRY5Wn2L8w0Mz1GBF8hGRKuIGLd4v/zd2*)
(*UoNhLrnmSc3zuJN3TskvV4vSJYRdH5ihAZ1LxUsYIznhaBaheiBsPgfUQ9ep*)
(*GUGx8kwdVV6C6nFaaLw2ZhaVqAYbwSRFMHkMAq1LwLWMQP0e/jKa5ase9R09*)
(*GmD5IMEjIQeNhVAzM4W3jnoBpwg5lBOixwhad2UYzpWMlGS1ay4FdCWZy7SF*)
(*+ju5y9zyPfkqyju14rfU4jBJwrxT60TDfry2lB7f6F45s/r0jZOffPrSl197*)
(*/Jvv3P/SK1ffe/rEq7eWH1zr3r8UPXbm8MVjHzu1fuDU0QMXjj9y80zrycvp*)
(*C48NX7+78fYz2288sfnc1ZXHTiZnVxY2u4+spo8Mo0d6waNtdTAJjsRBK+/H*)
(*ileKjGTnGchwv7RpwZ7v1PgS5GFaOEv/yGOTKKzP50MmVUwNWlxrAhM11Jz8*)
(*7ECZq3ked/XLEFfAlFpvi/WZNDQwYGpyaIj1Lq0VNloBqMFoevuJ2kudWlNI*)
(*qgSjVFkz33WhGaokCeCEkOGHGmNdAlB4tPUrD8ODEIxxFA6mpkt8dMJTsS3n*)
(*Qe2ZTo1SJYGEThFm0VQxBF5nEFfMc9kLondqozYtDrI2LU7yTq2dhr1uvDxM*)
(*j652t7cGF08tP3H56Ct3zvzSi1e/9tbtL7x65d1nT77y+PKDG/2nr7Vvn29d*)
(*3T54fitr0z5+/dTB+xeDl250Pnln6d0nN95/5thbt9deuDy4eSw4t3Rwq/2x*)
(*tfhjS+HH+uqRjno0DQ4jnVoQNN6mTTtFrVWOQUJVS1Qou/pHtPq5aobK/XiA*)
(*eBhgVp1OkOAsq2m5fm9UzUrllwdy46PCrgFQcUowCgN1Hnc1RM2tjvLwUFXC*)
(*oxSxcnE6z6LmhBcVBodWtajjroJqgF4zjlfgayKBphtRCPVLdKIRYcJnfJQI*)
(*qoe3Iow7HCDv1JwwoJGihjXlnTFFEiO5UEgYtcZR/iNqyAMSNcypekhO9Gom*)
(*nZqcDV2/lQ2hQjhLjgGyBxXKeQjEBapBqXMvaS7BxN9Fx21a2aklQZIEaRq0*)
(*22G/l6wud45tDE4fXzp3YvHGuZXnbh771LPnvvD69c+9evndB9uv3F554dbw*)
(*ucd69y5HN88evnziY9dOPXr3wsJLN9J37g4+/+z6lx5sfvHZzXdvL710sX3r*)
(*6JFzg48fSw6sRweWgwMD9bGueqStDsXBQt6shdO9c+axsqahX77i0AoG9cPS*)
(*x1c/dIy1IjnxYFSMcs/CpOhjrHXPACyHBKnQraMKXeMIRcpUQ+JBDpozVALw*)
(*aUllqSSmwuS0mmMACzPKGGzgrwagdIXgN56gUblTTvkDQ8+MNLzg1XpDQhHy*)
(*MRJGqpHF5bpSPPTLF6CEAWqpoksM3emBnNcAjzp1avKREncUUUbqCxWjOlam*)
(*kXJWc41YrNiwKqyMtibPtlTGMgyj+OEUKyonHqadUcIlIPGRSlErhrqeuMi8*)
(*U6svWKemsk4tTlSaquI3r/NObWtjcCrr1E4uXj2zdOfyyktPbH3qwdl3Xjj7*)
(*9oPt1+5vvHpv7eW7q09dS2+dPXL15MeeuNh67U7/y68c//67F/76+1d/9Z2L*)
(*335t+3N3Fl8+H91ae+Rc98BWeGA9OLCsDgxbH+u18k4tKTu1KT/jOO0UFS5D*)
(*qvigaxOuU6gflj6q+lFjGOROJa6aYlQMyrVKs9KEIU1YllEwlcA2rUWcHXhC*)
(*JCInrY5Q0XQSqsJDAnmRUKEbhdE03JGYYwBTUUCtKCwHDH4Mi8Y5CPXXySkK*)
(*sMQLZi4VC2qwNyTKNKNfGCkheCsYJnnqi5BkPv3gSKgfDShzyAk5rwENqFWt*)
(*U/rxbhpj9GjKbaEDDAbQLHUl1mp0etKguYoQIbEGgVRcIMn6ACr0rkFxSgmY*)
(*USKCBGzLFQp9RLPUI+2nKvNOrb4QnVq+JWWnNkhWltqbG4PtY1mntnz59OL1*)
(*s8P711ZfvHPs9ae233xm+7Uns38ce+2praeu926dU9e3Dz77WOdzL5/88Rdv*)
(*/9F3H/zxdx/84it3f/jWhc/fW3rhjLqxfOBUemBDHVhRBxZbB/qtj3fVo211*)
(*eDb31KYtwmUoX3HCBWgopBYvM4aB7VqsAqJTc60nKAwJYApMJZJOjbFSIfE4*)
(*OiXRyZEkUou4qkEBS7QxfBqaq1fAVQK5ErpAxUjJugxImpEDFD/VP5y+pSV3*)
(*yiltDLXMXCbE6GBvSB76hZGS4+dNW3O+Ef3CkdPg2c87JueFEyVq5XisRl0r*)
(*A4WKglrqoZ7BaMqR/SIey1CxZ1JjDBo4NG34KQx4+TBdrdxZuX70KPpiZN5H*)
(*Ha0wOZtdhhKZd2o1hXj6UZXNWpoGWafW68XDQbKx1ju5tXRue+XS6axZG968*)
(*sHTv2trTNzeevZVt6w8eX39we/3O5e6ts8Htc8EbT2189/2bf/C9V/7sZ2//*)
(*Jz964/e//uT33zzzmVvdp489eql/4ER0YL3s1NTHe+pgRx1K0TeK7EMRrmuq*)
(*+EhOPRKF1OJlxvCF1HVpq3mnZvtihdxxoY+6UWEuoSIhUCJWzQZOON7JEAOY*)
(*YhslDQ2ZVZVTjCQeeatl5jrlnpBDb0GpEEaqvmk+4ZvSz4wpT7owJZrCY119*)
(*kimucyWa3dywGXWtDCgkfZix07pIp5RCe1M8lqFiz6TGGDRwaObwUxjw8mG6*)
(*WnmIUaiooNNn06kF7B3wacje79SsUZsBBviSLkyCsOrUoqxTa+WdWjtod8Ju*)
(*N+r3orWVzvHN4dkTy+e3ly5sDy6fGVw/v/jYhcVbFxdvX1q8c2Xx7pXFx84m*)
(*N04Hdy4kn3ru+A+/cPePf/jGf/bzd/7WD175xRcf/9aLW29dDp5YO3CufWAr*)
(*OLCmDiwFBwbBo111uK0OV48+zjs166lHolCyeI0xDGyPXNULnRySVacQMAWm*)
(*EqenH5naKD867YVvGDXEI6MMzGxW4kwqwTm6FH660BykomU7z6KkoXp0W95n*)
(*HLlTTulhqOWdleeemlWnJlkXRqSaRdK4WD0Ki18sDSd/Xwwms3IUHoaVN5if*)
(*e5xtZats1oyC5FQf0eSEK0KfPm2udj0WFQnyxFCCswCkF40Io1aS4cwYeEiB*)
(*Cxihs4xyAyc62OjUGFqg/qmW65qyxzs1IwHQkM2AUoMlg66dTm2nWcvvqSVp*)
(*kLbDrFPrZJ1aP1pZSo+u9U4cHZw6Njh7cnhuu39hu3/+ROf8ifaFE+mlk+nl*)
(*7eT8MXXx2MLNs/HLd9Y/ePPSjz57+7e/fPenn776zZeOv/tY+9kTH7syOLCd*)
(*HNgov6GmPtYLDrWDIxNt2rxTY4XSjGYaP1dSBJycMqYYRiWQrDqFgCkwlTTy*)
(*PTW+ckKFLaIjaESgUd1WnYySpCXKJM+SYQudLjcHYRuqJKQZgyGGmlGTO+Vk*)
(*yFDLZKxT7jXrO6Nfgk2eS3tBFBBjgLVT8xYUiXUhGLANMM2S06AoW2VjwDPU*)
(*6TwYY+CKqOZKGK7p7K6Hw6BFOMUaDj7xqMSG60UCHo5E00CBCxiJpxQMmGwS*)
(*zBQtKBtqyuW6puzTTo2nfRrCUIR3apHK3/047tR6vWgx/7ZaurHS2Vrvntzq*)
(*b291tzc7J9aTE2vRibXwxJo6sdY6vnJ4e+3wpePh3cvD1+8de//BmS++ePb9*)
(*J7feuDF8+rS6vnbgVPfAZnJgJTwwUAd6wSPtQL+bpkoM+1pciwbcyZx6mAWI*)
(*Zhp/5kKLQB2njCkQsGulQmEIT8QomEqsnZoEiVCoKXLH5ZDQqiJESCn0EKEh*)
(*/ZBkusQFRVRX1E3UR0WHTBGsBoIX36GeMgTy2hgvKE/R3ODVekOyog0AvZJZ*)
(*rT3fO5RCJWEl+nULmoF1BIKRUw1zaS8TXsGjCJRrgPt1VcZOdEUoLD8ZGK6s*)
(*7oVYVGzLkaBMMpolgw21rvjRwOlGdTBOnhoa0LyixKqWH8wn567LHu/UArBU*)
(*YQ7sLqXE049B0amFaRoWzVrUzZq1bjToRUuDeGUxWV/JWrbk6EqysRxtLIYb*)
(*i8H6cGFtcGil98ha7+PHlg+d3QpvnOnevbD45MXFJ850bhwPL20cPr388a3e*)
(*gdX0wDD6WDf4eDs4mIRHorBVbA9Dmxbsh06NGsPA9khUJevUyv3mY7i0TiFg*)
(*CkwlNTs11BdUmClCQ7ow/FTkQP1yhKhCD/FgAya5jOAJzboqlASJjwx1zP69*)
(*36mhUeDVekOyonVFVfno5MJuCZWEujCdGrOChALxCKmGubSXCa/goew5aYD7*)
(*oSol7tQUyHChXStap/GNS8W2E8OSoKCJJ1Trih8NHFx0rktAEUKNMSw6qUWH*)
(*TaNcNyV7v1MzxEr4jIXu1IL8l6+LTm10Z60dZFuvEwx64WI/a9mi5XLrh8u9*)
(*YLG7MGwf6iePDNKPL3cf3Vg8fGItPLWRnN5IT66Gx5Zbm0tH1ocHV3oHB+mj*)
(*nejRJDwYh4fDcCEIVTBq0/ZTHCkRRpZZxfilm20BQoVUQVCTJxFJbfRIVyXo*)
(*1OTaXAFTYCqp36mhkIQxYoot3K+PZ8odSo4HydAun5DCXKWyHdXPkIMK1Abd*)
(*RwmpplhDg86qJJB1an7UWQWGnhrjqtYbkhWtmqxCQs49vNgVUS6XkVRieHjK*)
(*8CMk0G9F7KLA5HcCTI1Xvp0anELp3+PEomKkh3CKMJ8rTqxx1IPuxCGa0goT*)
(*j4xCFw4Veqt++cVw9Qcfg5Y9lV37q1OzBnGqghI10anlm8q3/OnHslOL8ttq*)
(*+RakqUoT1U5Vp626bdXPWrZuOOiEw07236DfXuilhzvxo934kX774FLv8Npi*)
(*sLYYrg2jlUG43G8t9RcGvUO9zqF2ciiJDkVlmxa1VKSCKMMx79Rm1KlR5hjY*)
(*HumqBJ2aa/7LAVNgKrH+8rUfJCZGEt+ZrFAz79Qo7+QCQy/ULyRQ11l9NNyH*)
(*A1AAfFxQGDrgYM93aoH7H+TVDDs1j4l7WdQudWoBG2V04aBjnFbE7gpMfifM*)
(*1Hg179QwMdJDOEWYz3ppZfjRh/mVSqjc2O+3DPUpzEQ0Y+Ew107N0LzXEmyf*)
(*dmq7Yh1yZTx0ttOphUWnFodJ1qwlQbGpJG5lW96sFVsnDbrF1ss31U1aneRI*)
(*Oz7Ujg9200P9zuFhtzXsqkE3GHSytq7V6yx02ofbyeEkPhxFR6o2TWVt2rxT*)
(*03aSV2/0ulZAqJ2MOQa2R96qyUJq1EAGFa9TCJgC48GtEyTm3AEZYMag4Hls*)
(*KDmu7qBqJdShTEqsG7SgnqJjjGGo7zoGilvleAcBRRLsh07NVfig1FHbSGbu*)
(*iiixyEmjEgNmLwqGOmoFL/GOsY4imb0YbLsioaZAHnRDVJmiAsfod3Z4V6Ui*)
(*QQ4epcWqnwqoNQre+GHyu+o3MKMTDeUSWiAwXr/3WpiqPASd2gzwh7zkjz2G*)
(*0WSnNm7Wsk3FcSuO8m3cqQXl1knCdhwUm0qzQ/FCGh9Js34tXWgn5T9anTTv*)
(*6dqpStNWnCzE8UIYLYRhK3/osWjTym3ntSb7XIQLBB0GqxB1+rYWGb0g8EVD*)
(*UjE8Vr2aLHRGgeKrDaNTCJgCI+FWjgdC4mu7wQA1AAZXcsrwJocXIXV1mIQc*)
(*UunN8Gz1neLWNSdRJMG8U3NR21RyOkn984tyETlpVGLoLEHS9D1CSq0ZDr2g*)
(*rKOzrJ5OQwy2XWEw4FGGmRWBwqD07y5p3lKRIAfvFB2DZCoP65dKPihGUjkp*)
(*Fy4WdJlbdVpNOLE9S9nvndps8PONWlR2asGoUwvC1rhTy7c437I2bSGJsl5M*)
(*pXmPFhZblMZhtiVRkMTFlqhqy5q7KMr6MlXcjwvjJP817TDOu7OguIlWNmij*)
(*l4lEoztqUyVhNiKswOgwWIX0YsUsbXQJSxa1sGIInaIg8Qit0w0RljhDG3ot*)
(*RFEtpI4RIS3UURQ87ywkR8KMVSDtciadrBjTmaPoMGtiUNxC5U48lxLsgU5N*)
(*kn5OwgeljtqmVDlJU52aPIhC0pj0rqYbwaULj2fl0ccEYLEwa4c6OjOpmfnC*)
(*idUwJrhq3qkRUyAtvH6KZyLlG+vUKNhOynlgiu5DecBUfWCSUAh7NvLR7tSU*)
(*bHPo1IJQqfyGV37Pq/i2Wrll7dRCUrRpxRameZsWJXEUR2G2JXEYx3k7lqTj*)
(*pixqZVvxu2zZx0J7tNOm5Q1hpG34ax8nXNgvIqwe1CqDqxLWLlQ/o5CCJFHr*)
(*5JTQZTk5qEgAQ4VorWOqn4Q6D1r4KVQQJbUXkiNHJcHcynQLN/e/56l5p+aC*)
(*YTZCBWWPnHBdMTzcnVrLtuqc6pVkpEf1m4ZIYDChd/JCWKYkCvcIe64iTDZj*)
(*ipwWYwqziPwIlONXXi2P1VnleAFTAabqA5OEctizkT1y4pBIo8uzaGEUuYVB*)
(*vgVB+Y/qe2AjrmCnNuqWQtUKW1mzlr/oo7gLlrVdWacWhsUNsjTvxfIXjCRZ*)
(*mxbnnVq1JcWWZluYt2ajZk2Vr5Es+kB9qx61jMpHLUGnhvSb+0KcznHGYLi/*)
(*OkpNgWq9rUCd0HoNYhCEDFThVZAQEuOy1TTDjF4tGYY9GDB28pWZFwk/EgKr*)
(*RkzZN1UWoVHtoTbWC+YoPFXBAajvcvZ4KvxIpkPkjMFD6nta7mzqbFvfx93q*)
(*1JqKYwVG0X+dQ00Lp8C58ks4VJuHj7xyj7lCqIagoffwgp+i2ELNq7KariMN*)
(*mqjJWMCmFjULHexHnXwujwEFX/5DX5LoYOr8xSiXXwKpPdypBe5Fe5ai90d+*)
(*2UVI0Y5lfRW1FQ8Y5pdEqtjye1kTBQt2akE+J+/UWuW7PuJRsxbGrSBaiJJR*)
(*p5akUZLGSdaqjSXK27Q4TsstCstOLd+CqlMLQZtW3spT5Wv6oXejrbWPOjU9*)
(*yswwffU1lw+ICapWVMKs6EZz1SKwKpLtma2HcjKH7pdYgRHUh0kqMM8AigdV*)
(*SBlqNnxq1KktZJvKt1axMNGtsMj3aFizJoRhBAglTXix9JESuMQ8+GnqCZb6*)
(*0fGA0WCn5reTAqNkNcfQL58Cy4jUYUxPJX5FuH4SUgqZMU11alYkThFs0LQV*)
(*2AysCO1KdvKAq/TzcMqJCokhXaEC5yZ0PH/+ojAIL4HUvFPzFapTM0h2z7qs*)
(*U6PbNNXKvwQWVK1c+YbFMIKPPhZbXPw3yOeohSjv1Fpx3qmpJGvWWkG8kG1Z*)
(*vxYmKtuiJMhvn2UNWhSFUfH4Y74VT0PmWxTEQZA3a8FOp6bFZ8L46Etr1KOP*)
(*k5d/e17knZp1RdcUZvkr2Z/+ZlnemVrEiB9CvjZCJOhItH4qcKKpeVKQgKEq*)
(*c7PhUzud2pG8UwsWBJ1axG72Tg1ySJ22UNJmlr37QijenJTskU5NP3+5zvKz*)
(*WAoKW76TAiOsOYZ++RQlK/hWUbS4zq1ZwxnNHhMDwSlbqFC+uCoeZlCmZmCC*)
(*saubprw2RvLRVGyF51U55Ymeq6gGBcSaAIpYuYyzcAqz6iHgPSX7pVPTpU4K*)
(*lTNsnVpxPaRG27hTi0YSjh53LNq0KC72Fy/6yGaO27yi4Soeg8yatfz+mopa*)
(*5XfN8gatvE82fl9kMGrZ4uy/ZftVdWqju2njbgt0aug1m96pPYT31OpcL0mk*)
(*SieYfnyhgxoax4baomqRVZwQorWXR8KcDuogoRQaNaHByux/ma3cOrViueYl*)
(*R9Xo1JizJJoDkLSZZe++EIo3JyVOKSQf7JSW4G+NU7FSU6zFcxc7tTp+GWrl*)
(*CvkK30jlrKmnvlCndTTr0IL/kImRIUb15jPWO59Ro9RHCX70HKSwm2iSrHZd*)
(*7NQpj5q7R9bCwyQGye4LtvyzdcvYJju1YLyNHnHMm7Io3/K7YXmrFBS3xco9*)
(*2YdwfCUVqjgMsp4rDtXoZSCjFzYGozfqR9WbSHa+a1bePxvfKNuxOj4j6eir*)
(*Zm38TKTpHdj2gTTbqSlCGLWwngg7NXTJu+ekp1CeOoncUP1CquuxxtEJmBGU*)
(*Biuz/5Xq6JuvqvgO2gLfqamqUytfITTNTg3NATXv1DCBueSasa53stDKA4Pi*)
(*+geEh6NTMwZLao73FI8VweP3qL3GeLh+JagYzQ0qrIMExTDv1PSPTPUW5hU/*)
(*DDWqj5ETbqQWVGgkHrokITynxY5qZuZCwHPZbcEfMAqDnU4tvyc2vmUWh6NO*)
(*LYmi4htmo0cXo53bbFWnVvRcxU+p5c2a3r5F4bj7mujUijdF6r/EVv5EWvke*)
(*E+y1juZ5Hz2Bzjs1fPkzg2E9cerUYEHby+sdLaQ1pwgLqVNonIAZQZFUZkmk*)
(*alymjt9IVFijb6U10KnBq3qDWIN2NIHR9J4LeroX8lOnM5J0auUjHkJHqE6N*)
(*1+DaD9YUp+IprDmofkN4/U6QeIUSuxLATkQxmhssxXWQtOadmiYGD0akdKLQ*)
(*0sTTohNoNerHsI4N1WAcRV2D8Jw85fmh9D/ESbUPhfoqyOjRxWiiTRtt+dsZ*)
(*i9d+jN7cmP/S2fgbZ+OnIYvnGOMof+F++c798jZZFIxeuD/awvK9IcX1WPla*)
(*/53nn0YXdyHegWky4xPotOUh6NSgePAAUUkqJ4OBEadTs3UKSjgcqeuxhsYJ*)
(*mMGVFYwwUr6rrOzRRrfSLZ3a+Nc91OjD+Gc5ptypGQyoeaeGCcwlYcZ6tEWB*)
(*1n9JOjWorfHYzfgsg2YmM1hSc3j9zBSnFSFUqC83/R/yKVCDn5TTGyzFcqPQ*)
(*kda8U9PE4MGIlE4ULE3WjIUhgBGBGDzwMxllHFWTCw21i+YqA49Kb8bTOi7P*)
(*ZQpi+dJ+/vSi3qMVd9OyHq2dJNmWJnG2jd/imN9kC0dtWtaBRVG2J21HSbv8*)
(*dbTyFlumIMi2MKmataJTy98LWWxh/lCUUguBKpu14le0LTfD2FP//J4avkiZ*)
(*wXDZMn/ZrsYbe+SndV7QQseUEdRfvoZD/R6QjAGSQuoUGidgRhAlYCTid6Va*)
(*TCpfOBTrnZrCttE7XIsOrFXdU6vXqVFZjYpBWv0EfpgEXVlWfrxvYOVP1Fd/*)
(*ANQwGEExtOn1kxnmKrP/Y6CSVXh0cOOp67Qi0EIktLIrK67xUuxhlK9I805N*)
(*/4iSBkvTQiF8KCna9Sk10xLVSR3lB1dTnBa7zg9lDmXDz9+5TEHKax3je2pa*)
(*pzZ5T628m5b1aJ2sU0uTNI3z30Qbd2pls1Y8GZmNy0a0k3Yna9bCOB3dSita*)
(*vSBKg/L9j8XWKl41km8qaqmJ22qt6ufcbG7I2rT9kXj7sVOD0tTVAlVkKM0G*)
(*AF5QtFbAxhR0gKSQOoXGiSsjiAwYKuL1A1dJWLzaVevUCjvjrRW0WlWnFo6b*)
(*s3zhl7+TqH1Ntvqaa41OjUpXyENTCfwwCbqsJPy4NmtVmybp1AKt/lf/MIYJ*)
(*20OrF95zPURNuVOjVjpcL4HjiijHeCwfSeUxBjRSrCrATZViD6N8RdrjnVoj*)
(*UZBoZkiDpUnv1GA+S8SAUdMFVINxlB9cTeEXO0MaZU4CdS67J+a7H41ObfT+*)
(*xZ27afmttE5abO1xszbasn/nko1IO0m72253O2mnG6ed6hnIQk0a5p1aqoqt*)
(*VXVqKl7IO7XRnbWqX6vXYqlg51GreacmHQyXLXORU+k3Spz11CMUSqFkikQM*)
(*JiUIdUrRwSjhcCRkrOblgUGUBEw1ntEAhUoGmCflJXfxtqGk/B2PkaFRmzbq*)
(*1Fph3qblW3UPrejUdh6TDvLNu1NDP1qZpBLmIyswl/iM1RljmjWYTlSnRgUC*)
(*qjKGNdKpzVhgZeCpltQcdIoxTKcOLVDWVeC9ZCRTvBe1Vac8sRsRw6jhBUxg*)
(*RsOul6ZGosBrhglpCCxNVaeGXo0IT83GfgngRryTzLImj1EM+cUu8WIaIZ6L*)
(*XUaXSwthvpU/dT3aqu+pVa8QGd1NS9NuO8m2XjftdpJO1pS14/zuWTv7d7vT*)
(*bXd7nW6/0x10u/3sQ7e8rVY8BpkG+VfaspatHURtVWwLUboQJNnWyv6706nt*)
(*NGvu/RW8j/aR/j01tIjxgxU4Cco7NbgHFSdCPDQwpqEetUudmoGz/uUBjIUV*)
(*jHLu1Cy3QqpMKbbidlou419JjIoHpIsvro1XZtGvjdu08Va8eqhup2Zmizz9*)
(*rDnz0RSYS5JiUg3g2rTJ7n7c4O/8GoyusKWpHQ0ej4d9+hTpmLLAysB4JK85*)
(*cIqiL970ILpWSA/+JbOMAY1EWXfQmthNiWEU9UtfO4yGXU91v3A7aaYkIMLX*)
(*cunUIHKYw/LkFPKAeuFkxUgeqMeonFAz73sd7+bSqIw6tbxZC1qTm6rekV8+*)
(*99hO4k5a9GidpN9NBv1862dbL+73sv+mg35nOOwtLvWXlofZNlwa9oeDbr/f*)
(*7vWyLWvkwrQdJu0g6ag429rZlndqYVI2awsqv7NW/Oha+Yd17RtqoltrsEdT*)
(*k+8r2B8JNu/UrMCaFVd4OqXoYJRwRq1VoZ8jEjDKoVMLteti/FWrWo8WjH4d*)
(*Mc5fLFS0avnXVvOvskblhXUY7DzbPPq9xvGLHtFOLSk6tTh/ItvSqY1cKf8O*)
(*VV7XG/y4Uiq/+t1rIkxmuTZ4OURNh9lI9mjj10aV3T3eqZWpoitUeewjrKez*)
(*yn65syZPP9eaE2B1D4ZM/+ih1s/f2S8xg+f6pdjDqGHOoOKh7NQkswwf0Slo*)
(*+Cgx9DBZbdhiAPjx4KEfzjW8COgFqO/k/bWKPkXi6Vxqy/gRpLI7C1ujl+iH*)
(*xUlw9DL9KL8TFpedWtztZH1ZPOjHi8NkaTFdzraldGWps7LUXVsZrK8tHt1Y*)
(*2dxc29xc3zi6traxtrS6MlxeGiwvdReHab8fdboq7aik08q2tLMQt4/kzVpx*)
(*Z00lWadW/DZ2/vPY42YtHF2P2b+xBlsz8+d0Z0ZrHdnXnZpeOiQrXSjeE52U*)
(*C63olKKDUcIZtVaFHr4IwShrp6aqF+yXP3FfNVqR3qyZl95R9RsdebNW3FGL*)
(*0yRNkqT4Lcb8FxmLhm98lV5teKeWFJ3azla0bNZOrdVIpyaP414Tib9OnMBc*)
(*4jPWUE63aXkOjH6XM+/ry624F5slTPX6R/Ae4PIkFYs7NdN6c9K4wlL0ysCn*)
(*n2vNCQQXZsYYD7V+/rrOqi8Gz42UYlejhjm4dhgNu16XPCIuzBPDR3QKGj5K*)
(*DD3GTqgWBUzB9iDBgxMIRk8hBmf1kXJWIt7OzqWG7HQ3WZuW/4hZcYk1enIp*)
(*37Krqjh/a0h+oRV10qjXjQb9aHEYLy/Fa6vtraP9E8cWT51cPb29fvbU5rnT*)
(*x86fO3nx/OmLF89eunT+0uUL5y+dP3Ph7Mmzp4+ePL60sd5ZWgp7/aDTU+1u*)
(*q91dSNtHsmYtTI8E6RGVN2sq38bN2vhirPyJtVGzZnNkv3dqgfgSS3Ja0Rey*)
(*cHB1tPro0amhS9tb5DrlAKpDrlOokQwDVh6apcuKWYEQE4OD0dthx2901baJ*)
(*Zi3ceaF6eTct79GSJNuC7L9pUj443W7nX23NSklUPAgZjX6OsUqufCv/SJMb*)
(*HHdqWV+WdWeptnGdWunHzuslleUvjVb24Cm+RjRmKk6JJ1SIXvnIIZmtWjR+*)
(*V3B5pilONuWvvyRjKV8pXP5m586fCsYpM/pVztCnU2uwt9qPnZphBV0g+k6h*)
(*2mmvESf9wsGQgRmsdEgserT8OO/UmNDoNDKtWeOd2jQ4F2rWh0E8VpzoXIpA*)
(*IT9zmaYUl2LVb00XbdrOL1kXf+As2rS0+AG1sNMOe91wOAiXFsOV5ejYVu/c*)
(*2dXr107cfvzcvTuX7925cvfO1Xt3bzx5/9Yzz9x9/oVnXn71xZdff+mFV196*)
(*6vlnb9x5/NSlC6vHj3dWVqLBYtDrq25vod05krSPRO2qU2u18jZt8hmn4kbf*)
(*qFnjHJl3apQq+cUVut4lnRqsgQ0uZLlaFANVqdBiRenn1VJ2hTz40SW87OTB*)
(*wI8TA8tHzKrraXOrWrOofPdDeUEdZ91ZGqVp/rxzux11O0mv2+7l31tN2504*)
(*aUflG4bKuydVr1bcP8//PBMmeRkq3v1YdGoh1alFxF9vptipyefuukj8deJE*)
(*1e/UgsnnG+MiY/LbrMV9tLy1z3/dJWvQildUjTu1aDQsHN9vGzX5+Y248mbs*)
(*6C+LgWOn5t2yTa/p06UqStYMhKFxSldJWROqnfYycc1Y4WBYJGew2A1iUTzl*)
(*x4evUxPOgj7CKcYyoboM9CqFyWoDHpohjdMuVwuBoXqYo/owij2DNFTJXKYv*)
(*Vac2+kv4TptWPKVUtmntOPtvlMaq0w76vWA4DLNm6+hmevHi+v37519//Yn3*)
(*3nvw6U+/8M47Dz7xiWdeffWpV1556vU3nn/7vTc/9+X3v/KND7727a9//mtf*)
(*euO9T9158MzZ69dWTp5sr66Fw8VWf3Ck2z2ctg9H7cPj22qt0Q21WE20aVqn*)
(*pqiWy9qs7ZukkqxWyUqklqFwfTEwqKolqRgeq9vwgtGAOgvHo/zwCCVu1rxA*)
(*svLpTaCrTBqqGjLz4lT7Ptr4Crq4M5KmcdaRdTpRtvW6+fdYB/10OEgHg7Tf*)
(*Tzq9qJ1/aTUqurm4/HGPqLggzzvC7II8ictHJ1UUV82admet6NSqn9I2m7Wd*)
(*OtBgpzYb2psVYXZVrln5UcTVDgtiYis7tWjy1Y7l/+Y/8BIXnVqWElmb1i47*)
(*tfxlNEV6FA1dUnzlsdyXJVr+0y9h8Yh89bQ+90aRicctJ7PZldvpdWe6lC7A*)
(*iyXomqrXqaF2DYGXbY2vCIlOJ7tynNSimLZQ5oydTKc2S7SUeGBwigtfc2CK*)
(*Mp2asBOBtow9jdPuEU3JeAazQcuCJpBwaKJZ9+fCiho3azsXXVWblndqcdGp*)
(*5T9yHaZxq9tRg36wuBhsbCSnzwzvP3nu3U8/893vfeanP/vqj3/yle99/7Nf*)
(*/+W3P/P+y59868Gn3nn5819+79vf/5Wf/js/+Z0/+sXPf/e3vvVrH37qC790*)
(*98UH29euDo8fj1ZWWsPh4V7vYNo+FLcPhWnZrLWCnacfiz/mx3qnFlbvGcH/*)
(*kF5ttk6NfG5qr4h1CUgWEVWgXOuA1ToFxjpAKIYjfF2q36lZCaEUOl0g8Ryi*)
(*jNXhkBL2FsNopZVfndQLRfVx/KBjVDZc+R93kqjdTrrdbIt7vXgwSAaDeDiI*)
(*86+1LreXltqDYbY/6vbibi/p9tJON+102mk7vzSP0qR8aDJr9sIkVVGSdWqg*)
(*WSu/rTZ+G2T1VdYJzK1xs7ZTLOrkXoOEz0wUdoXjlG+oQrdr9bJBq7bxO0Bi*)
(*TUatV9ag5z16WJ5yik4t35/GRWqN3h5afHctLtIt2/Kf5yzbs9FbiqtmjYIX*)
(*lt/CRv/u4CIzaNMCrFMLCNdUc50alRL8lW0j0rhaoUKnVdC4ULb0nVS+zRgq*)
(*lGrtuGJwCo217MAUhblKN2rmekENqcly6uGykBC5Wsl4KrchLWWPduTIEbRT*)
(*ozT7uDoXdymoHl2MhaHepuXvakuTdifNtrTTjsc31ILl5eDY8fblq2uvvnHz*)
(*G9/+5G/94lf+8I+//4vf+/ZPfv7l73zv05//0qtvv/vgrXde+KUvvvXLf+2D*)
(*X/vNH/7mH/zWb/zBb3/48x99/ptfe/5Tn7h8787aubPtoxvByvLhQf9gp3Mw*)
(*yZu1w1H+hbXyjf3Fe0XGnVr+lZUoGjVrQTjxUkjcJ0unprS3lOxb4RcpX5eE*)
(*64tfpHx9Q0uBtd7ySNDrBKE5uUI/qRTK9aBorWeQRtCKZbyUQu0foxVYfrlV*)
(*lZ1a2aCVT69lF9hZ89Xvt4fDztJiZ2U529orK+n6emfzaH9ra3h0o7+62l1Z*)
(*7S2v9BaXesNhrz/o9fr9TvGG2KzNC5Liucm0HcRJ3qxF5c2TJAzTfDM6teox*)
(*yB3MarfupMNsdJrSOBhrdhnrkU9gha16KBNXlXqbpkZfK4vHnVr+npm4uIeW*)
(*/XvcqeW/ztnJf5Qzf5gjS6d8qzq1/F9JeTM279TiJChvxEbZKaNo54tmbYx2*)
(*EmT5t4VqGz00uY86NX2nwb+w7kHllAgzx9UXISS52vpGA6IUN7se5TDQkbPJ*)
(*N1ep8+hv46Ghktaa0sab/AOijCvxX3T9RE2+3YuigoKHDobSAgXfoEK/pyYB*)
(*XNPruUhEVQEtPobh+MsD+Yk0TfM/dXfyn0frdoqX8MeLg2h5KVxbDU5td28/*)
(*fuz995/+6c+++Mf/wff/9G/++A//6Du/8Ztf/PDDdz748svvvfvMJz/55Duf*)
(*fvHzX3nn63/ty9/569/98Dd/9K1f/9UvfPitlz/7mRsvPr95/Vp3+2S4sX5k*)
(*afFgt3eo3T2UdA/HnSNhe6G4rVa+q3/cqcXR6HRs3lMjCgV6W03r7uad2nQ6*)
(*tYCoD1TllJc7Q48+V2hOolCCxIrQ2ykmWIq9SJuaMLenW1WnFkY7zVp5c62d*)
(*xr1eujjsrq32N9YHR9d7mxvdY5udkyd6Z04tXTi3du706qmTy9snV44fX97Y*)
(*WFxdHS4tZdvicHGx0+vH7a6K20HaCdLRe2JV8QuMQdQJsy3sBEE7CNL8/loY*)
(*T35hLcRgzzs1u+ipyCCRjAmMJwNV+dXD0bOqxctoovLNjmWblvdkcdLOXzMT*)
(*5FsctNtRp5u0u3H2j3YSZFuat2TRuFNLi06tPbr/Ojo1jO+6ap0ahK93auO/*)
(*T/o//eg6xUOMuPAjJXUPKkdFnjauvgghUQOm9NAp6nUj61G/5eQUDqinPpjG*)
(*ZZadWtVPUaGh8lae1cyKCED1ayQ9IH5KrYGEzxa4nA0G9I/6r84ZAySAG/E9*)
(*ECyQj7LonZoKx29wK55hyk6eWqfWHfbbw0GyNIxXl8KN1fDsqd7d28fe//T9*)
(*H//oM//uL7767/3BN/7wd7/2N377C7/xk/d/8sPP/PjDz/zah5/70a998OOf*)
(*fvNXf/bdD3/+/W/97Adf+tH33vnOrzz32fevvPryxuOPd8+dDbY2j6wsHxoM*)
(*DnX6h9Le4bhr3FbbeZXBuFObeMLR0qmhWzVkf7dpwd7u1KwlUV4NULVU1ZJb*)
(*MSpY/RJhKPRwSsJSU2hlokZvuQ8WmE4tX5nFj6bl99Ti/Bq620mGg87qcm99*)
(*tXdsc3B6e+niudXrV9afuHX8qbtnnr1/4f7jZ25eO3Ht8rEL546ePLGytbm8*)
(*sb68vra6sro6WFzu9JbiziDqDMPuYtAZqnSgkr6K+yrqZVsQdoOgU3ZqQbAL*)
(*nRrPP8xSiTanVekEFZ6C66xKatUbopfl8kfOtU4tKL9wVnZqWZvWb7f7adpL*)
(*km4cdeOgkwTd4r1V3WzrBN1UZVsnDYr7Z8Vb+7MTU9zJsixr1vK3iuZ/x8v6*)
(*v0TQqZXYqk7NhOokM/uSmjA9YCWxpp+aFNc8cc1YSe1Cx/A7rSLHVsc7SqoE*)
(*k/suid0ekb3WqaEpTX009sOjhjlKjxWJnBA99MZ0CjNqAh0DnS1Fv48Gp1gB*)
(*C72z+u7E1UdNJtqYslMrH3vMv9FdPPPY7nQ73UEv79QWB8nyYry2HG6thRdO*)
(*de/d2nzvrVvf+9ZrP/r+J37zr7/7e7/12T/6nc//8S8++Jt/+J3/9E9+/Od/*)
(*53f+3t/9vb/zZ7//R//hb//0d3/6y7/+/fc+/ObLX//gifffO/faq6t373Yu*)
(*XVTHjy2srR5aXDzUGxxq9w8l3UNR53CYvweyaNZGL+Iev3cu3OnUxkI8uzLR*)
(*mum/hDtLbqctfG6jS9L1HMTXIrRQUNWAguGExFqd5FYqhU3VBw+FQq52r4Kp*)
(*4nUcC9mGd2phK38oOS6/pxaXL3/ILqP73XRlqbex1t9YbZ88Nrh26ei929sv*)
(*PnfhU2/cfP/t+7/09lNvvXL7hacuP/nEuZvXT144u3Hq5NrxY2vHto5msrK6*)
(*MVza6A7W2oO1eLAW9FaDzopKl1vJUisatsKBCvsq7KqgPXpGOqhePTSLTs16*)
(*QrFmKarQaVU6od3dTi0cvelj5xHVUac2+n29pJumw053sdNZbLcHaTxIo34a*)
(*9DtBv6v63Va+dRb67YVuO0jT4kc90zRNOu2k1457WbOWhO04SKIgf2oyjNIw*)
(*yv4bB/TV4/hLatVLtELiDGKXmXVqelz4wd51w6loGyYa8nUCiaFWaWJ8lIg3*)
(*A41455pd+kkEBbCnbq7VWUHCAFWhsXZqcKK+EPjaVQ3QMwc1B9VSfnkkYQtr*)
(*JFGccJnr/EP80KlKjBeJQM08YIlrEt/lRH0EperRyl8ty/uh/CvcxTe6iy+o*)
(*lffUhv3e0qCzPEzXltOtteTUZnrldP/eY+uvPTjz2bdvfPBLj3//V579/Z+/*)
(*97f+4Mt//qff+8v/8m/803/wH/+v/8Nf/PN//Pf/0X//9/+bf/Dnf/sv/vaP*)
(*//1ffPpHH97/0ucvv/OpzZde6t25G126tHDixJH1tYOLi492B4+mvYNx92DU*)
(*ORS2DwfpkaxTq35PbfSbuLhYC8WeqmwNCp/b6JJ0PQcxJqi6R1UDCoYTEh4/*)
(*ZZcpp04YhAi9nZKzxASFqvCePmH31LKPeftW7Bx/T23nzer5DbV+urbU3Vrv*)
(*bx8b3riy9fLz1975xO0vvH//Vz548I0vv/jBZ555++XHnrtz5u5jJ65fPnr+*)
(*zOqZ7bXT20fPnDpx+vTp7e2zW8fOrh49vbi+3Vk9ES9uBb2NVnttIVldiJYX*)
(*wsWsWWuF/VbQaeWPSc+6Uwseuntq8AwuqSrMGL0glz/kUNz0yt8MVWxFWzXu*)
(*1Hppe6nbXel2V7ud5W663EmWutFyP1waBEtDtTxQS/3WUq817IX9XpKdijrd*)
(*7P/7nXTQybu6XhJ24qAd5c/BJkWbZunUguJbc2in5srtQ3BPDRrSxVqXhBnr*)
(*VJHQkQYDQmxyhAFRihtfj3IkDGl76nqmzgoSZkUVmhl0atQSQPdT+NG5vC0K*)
(*MLMWoH6qU6OcKoVv03ie1bxTm5UUAS6eCBn9sG3xGuT8PSLtrE1rp51uuzPo*)
(*9pb6vdVhZ20xPbbaPr3ZuXSie/Ns//7VpWduLj9/Z/n1Z9c/+PTl3/v1T/7n*)
(*/9Ev/+V/9Rv/+//4d//1v/zLv/p//tm//X//l//7X/3zf/F//pP/7n/+yz/8*)
(*L/7k87/xg5uffev0Gy+uPPtk+/HHwovnF05sHVlfeXQ4eKTbeyTpPBp3DkbF*)
(*SyCD5IiKF1TYUtULwzihysXO33VD/md29qXwuQ2XpPf5Cx2s5p1abYWQK/S6*)
(*Gi3XM3GqujE9cSttdKNt/IKRMP/1tPItsfkvW/d67eGgvbrcPbY5uHB+/dln*)
(*Ln/pCy996xtv/ODDT/7kR2//4MM3v/TFJ1979fzjt1cuXxuevdg9eS7bFk9d*)
(*2Dh35dTF65cuXr9+9vKN4+eurW1fGWxdSlfPBoOTC+2tI8nRI9HakXDcrAW9*)
(*VnlbTSVKxXvqe2pO6W2cUhsHM+NObadHG0txSilfsZ8/pzhu08pOLe61k6Ve*)
(*Z63fWR921gfJ+iBaG6r1pdbG8sLGypGNlcPrSwfXlx5ZWTq0vLwwXFH9pbA3*)
(*iLrduJ3md9iKH4UoTl35/xY3d/PfWKMuHceJEbaoTk1+2cn8YRAVRg9zVJ4e*)
(*sPp5FwF5DZfod0pvtLKpfdupUYVaMpHCsDc7NY+5QnKq0Ey1UzMgSZYAr0Qf*)
(*RuWzcdSwiOpnljnTqaHAWuBlj6haluEg/ztuE+K9Uj4iYnRqxT21qPguQPGQ*)
(*SdrptbvDbm+l38vOpJtL6dnN3o0zS/evrL9wa/PVu1sv3l5+9mbnpbu9L7x1*)
(*6vd/9vpf/Nk3/9E//N1/+b/9vX/zf/3Dv/r//slf/dv/6V//m3/2f/yrf/qP*)
(*/8V/+yf/9Z9+6Xe+d/XTL269dK9//7Hk5uXgwqkjx9cPrS4+Oug90uk8krQf*)
(*jdsHo7R4XX9yJIhb+eu8qhtq3NfK6E5tYnvIhM9tvs44nb+oitGUOCHhIVHO*)
(*wvFV1WqqPngorKbolVOCv0FirRjhNv6RspYq+6D8e2qjL7dm/2i348Gwvbra*)
(*O35iePXa1osvX/vKV1/+9nde//4P3vjhr73x7e+98P6X/3/2zgNMjuJM2Ku4*)
(*O1NdnXvy5pwVVmFXq5yFcpZQDiCSQAQRRAaJLCwQOWMDNsHGgG1scxjb2Gdz*)
(*53g+c/b57MPYd84ZJ3z//l2dpqe7urq6Z2aT9nvqkWZnqit+9VW9Xaln1ZbW*)
(*uSuqZy6r7j2tds6qtlkrJvYu65qxtLtnyayexfOnL1g8Zd7Spinz0i0zxKop*)
(*MNkRkVsiYlNEqItwVRE2EzVgDa2BHCE1cuADS2q6XugXonEmtel/8jwniXxC*)
(*ESuSSnVKrkmLdeV8QyXXVM211nMdzdykNn5KpzBtojBlAjuhA7a0gtrmSGV9*)
(*JF0ZiafKZCUiiBGej6I71bR3jFC7gI/xJzXrupecBDvS71u2hSI1hhrWyOrh*)
(*tn4EO0m2FW67RFAeQpLc0dF7JoRAmbZAbQqb5fzbY2hTXBxjXngZ3qTmK75Z*)
(*s8dODseeQkIeQVhScxSCLnZSCzanptlRjdR864FKfIv0FBed1ADUryxD4x3t*)
(*ZC602xtdXctLcVFOyUq5ItckxIaUMKUxuaCrZt3ctm1LOnec1r52TvmiKXBp*)
(*N7N7bc2JG1d98rkL/+PrJ3/7Py/0/e2Nvr63+vq+8Ze+b/7qH9/4zi/ffPT1*)
(*R86441Dn5rkVS6aKvR3s1DbQXldamx6XiY2JiWMkYQwvjOWEcSw/nuXLIB+B*)
(*XFS/GQdtD1dVgnRUIwWpAfMGqOEjZN12t+jQ/RfZs6P5F6m5UaYEm1Psgw5D*)
(*WqgUBgoQazm9suCVU7fNL6hgSM3gNTUJQLutTG1f2jhZNRyq2eZ4GFNJrVJp*)
(*aE5N721cvb77nPNXXXTp2sNHVl9yZPk5h+dvPbtr9f7WZbubl+1pX3XmlC0X*)
(*Ltx0/tJVZy5ZunPJwq3LFmxaNX/jxvkbtk2Yt7piwkKpthemp0TjE6NKR1Rq*)
(*1mCtMsqmozARZRTASAAII6RGCHyASQ0v+skznCIL6aRcUxGvrZDrq8TmWrGj*)
(*Sexql7snKbOnxxfNTi1fWLH2tOpVSzOLFyZ6ZwkTp0eaJoyvbhqbqhqtpMaI*)
(*yhhBGs8LUe0mB2jclm4jNdcAMotp7rMf6cHKyin2z9Ck5hWgVexBrR/Z7jl8*)
(*Yv3QKA8hSY4AaTy7fULXWRx2c0dOXtAURoPjQPHEnkd3SsLBUcGl/0ktkC45*)
(*TJxvR5nPr17Jpm+VoGikhg1c/2AnNauECUk1I4AaqcERUusfMV8ymocscujo*)
(*LO0MZURqMi8mRDktK5UxuTYuNKW4We0VG+Z1nrNx9mW7F115xsID6zvWz41v*)
(*XKict7PlkROb3vjUZT98+/7f/+r5//f+Z/r6vvD3vi/9/v996d2/fP6r775y*)
(*18u37ji2t3PzjJplk+Nz2oVpzbC9uqw2NT4jj4nxo0VuNM+N5TiT1LgIZLXT*)
(*CsyD+f0O1fe0GLYt5COkFq7/Int2GIEiNTfKlFAaRnuyC5XgEAG67acvqTms*)
(*LnBJ/hlxp9BTxwzTgc4g4kW0s1UdLfMSF0uJ5dVKQ2ty+qyGNZu7L7h03eXX*)
(*bbr62Karblp7+Kbl59644NzbFh46sfLik+svf3D7dU+cc8UD555325m7rtq9*)
(*4YLty/efvmjHtnmbd3bMX1c+YZlQO5fJ9EST00C8CyidEaGxTJtWQ2sgmVgU*)
(*6KTGm6SWTVdhSY2+eIO2BUdtBkpPoMQQTIGZBsPRWBUvPw5S84A1g9RiipBJ*)
(*SbVVsabaWEdzvHtyZuGs2jXLWrdtmHhg1/RLz59/45XLj9+07vZjK6+/bsk5*)
(*53et31E1Z5k4obusurkkVV2ipEoEZTQvlrJCBApAP1lEv8uFqjuwzakx3q/7*)
(*sEIAKy9SIwRL8GBv70GtH7aO3DbHHTLWj5fykAvKESalN7tnd7HY/RQqhVZo*)
(*DgtMmbsiCaHqhw2p0fuM5vZ3NE85TJzvszS/Emyj/Vcv/fQKwe3fy5tXgPSk*)
(*5mhBjn1q/mVljMZZjdQKo4f01XpqikVq2sZvdD0R1BaTaDfdCDIvJEQpo8hV*)
(*MakuwTel4ILJ1btWdl911qrjl59+z3Xbrzx7zp61tfs21VxxaOozT+755y9d*)
(*+867D//2j8//te+Tf+177fd9n/2fv33q7V9/7LXvPnbL05dsv2rd9E2T209r*)
(*r53TnOqqkVrSsEaJpIRxMhwjMGM4OI5jx7NcKcs5SC27+pEC1tz5G0JzaoEs*)
(*nq/dKFT/RWO+fA1RnkLTkAlGjJDsQiU4RIBu4xyC1PJPOTGFhsu9gtBw5pAc*)
(*7WwVZUWMxThJ4GO8khYytUpDZ7J7fv2G3TMuP7rlxhM7br1v5833bT32wOYb*)
(*H9l05/N7H/nMxU9+7upn3rzp+a/c/cRrJz7w7K1X3Xvt2TdcsvmCc5bvOXP+*)
(*5v2d8zeXT1gp1i6EmVlMsgcmpsPYxKioklplGUxFmHgEyFFgrX60WwZr4i/3*)
(*FsW8yoG2HwnaFkLUZrjEEEwBAOYUaZbUCAGSlNxGaobj9LvT9AWQ+m3XPMtz*)
(*UBRYdPJMWqyvljtbkj1dFUvnN21d33Xu/jmXX7z0lhvXPf7QGR//6MVvvH7t*)
(*516/8hOfvvj+xzdfdrRn65lVc5bD5q6SyuaSeGWJkCjh5NFQHMeIZUBgAM+i*)
(*U0tYYyEFhNZRVNkRZe7ZjzkmNxCmhSA1r8B9SY1GPSitn9vmuEPG+vFSHt/i*)
(*CiTuzBLKDdAJZbxg8JEa493YhwGpBZJAtel4pFBaSg7N8atDCe1N0jcEcvv1*)
(*auZuUnMEiLUMAIeHPuU2QmoDIsY1avopXRapsQLHyzyfkMSMIlXFxLoE15QC*)
(*C7qq9qzpvuGCdQ/ddMaz9x+6+8aNR87vOXrV3Afu3fDZ1w5/6+3b3v31Y7/8*)
(*27O/7Xvxl30f++Efn/naTx589Zu3Pvapy648uW3XpYuW7OiasbK1Y3Zt9YRU*)
(*vEHiy7loApZK0fECGM8xpRwsZdlSyJZBNofUoHXMs/8ayNzvdAWm3acWzsgX*)
(*UAIZPd9WX5Ae1rc0HKagSOVGUyNki+SV7EIlOESAbis62EiNQWN4aB6uaDrj*)
(*SnpWG49r2484XpBlIaawssDFeblcqGiKt04vn7uq9cBlpz38wuVPv3rVRz57*)
(*xQc/dejJVy94+nMXv/z1677wXye/8s6j//KTp/7l3Rde/+7zL7z5zP0ffeTa*)
(*e4/vu+LI6jMumLvxrPa5p2c6Vos1S2F6DkjMYGLTGWViVGiMcBURmIwwsQgj*)
(*RbUJNfOE2Nx0Y29RDF0M1AYhaFsIUZvhEkMwBSapMboDURebm079nkxquhhM*)
(*xDIaqemwpt+4pzI9p1+HpohcMsZXZYSmWnnmtNrVyybs2tpz3pnzLr94yY3X*)
(*rjz5gc0fe+H8L7553Xe+e+d//OAD3/mv2z//tcs+9MrWa0/M2HJWZsr8kobJ*)
(*Jan6EjFTwsZLgFwSlcZFRBARYNRGagzjeKuQQ2qhFYNsovMhNbcHevWgtH5u*)
(*m+MOGevHS3kISaIXey/jDrk/Sc0S3RQXJHf5SKBc9L/46nahJEQ50OsAvTkl*)
(*+HT86lBCmh4B69kdIE0zZ3BtyusRd3vxKZARUut3sVqZ+QoULfNHJ3RxUOA5*)
(*ddiVkISMIlbFhbok25yOzu8q37Wq67oL1jx6+4FPPn3kg/fuO35s+eMPn/7y*)
(*Jw6+9a2jb//0rh//6bGfvP/UO//40Hf/+PCb79z+sbcuf+CVM449svGSm5ee*)
(*cXjm5n2TF69qmNabamrl01VRMVnGKJGIUFYmRMp4UMYxZSwsgzCCSC17PpdB*)
(*an6w5mUuhhypURo9X7tRqB6W0kDRlFtRS5XeiLmTXZDYQd6k5lVZADeUCpry*)
(*MDnVDDKDJq1sTj9z3dicppoKHi1/lCQ+rsCYwKd4uUqs7kxPnl+3ctfUq05s*)
(*/8w37v7i9+794vdPvPado6/9+7Ev/fDOb//qof/+6ws//ccnf/Z/r/3kr198*)
(*+xdf/NJ/fO6FN175wAefOPvqo2v2H5699pzWWTtSbevEmuUwPT8a6wXydCBN*)
(*iPINEa48AhMR6+xHdFC/x3nshbtCkb60g9oQuw4EUhvKxDg6fQ9hNASzkxoG*)
(*04KQmuHMW9Gh/i9aUi+iexwUiUvIfCbO11WIHU2x5Qs79u2Yc+icxVdcvPSa*)
(*I0tvPrri3ns2vvLJC/7lmzf+109O/s/vHvz5Xx780e/u+PL3Dz328qqD1zXO*)
(*XjOqfWZJeVuJWFkCkyVRpSQijykTI2UqqfEw6iA1QCC1MOoRmtTcfrCPOGrQ*)
(*blgI8VJaP08NcPkh2CLKJFGKIzp69S6gOPJlLQbrzzQMRaF5EVEQKZ5WBDKn*)
(*IdJgV2/KWLANwRGOvQ0Gsgz2YOmrLCeKEVLrd3GRGrRITeTRC/KEyKdlQSW1*)
(*+jTXWglndSbWzm86f+ec26/c/OGHLnjsnj0n71z/3HMHXn/zyq9///Z//9nd*)
(*3/v9g9/5w/1f+eWdL7195SOfO+Omp9dc/cCSK+5ccNVtSy6+cu6+MyevWF7V*)
(*PZlrrhmXSY6WFbRwBfDjonxZhI9GWBBhmYhGalGD1BjzlP5cTPOeVsN/zwTG*)
(*nwFRm1xzB7ydPan4oIBtOZPNhSE1Ky7yr76FVuyCBWFJrVCxU1pO9yP9QGoh*)
(*86tPqDG8w+lLpfWT/Hg0/a7fo6ZwSVGqlFJNsZae6rnrOs+6asV9H73oX999*)
(*/N9++cS//eqhb/7i5Hd+fd8P//zET//x4V/1vfS7vs/+oe8Lv+/713ff+9q3*)
(*fvzVj3/h1Tsee3T3JVct3nZw+mn7m3q2ptvWSrXL2cy8aKwnKk2JCG0Rvi7K*)
(*ZSIwHmFk8z411vsWj4KpGX3RBTUgdh0IpDaUgVOQGmMjNag6tfMFBqE7XFBS*)
(*A+Z1e/rd6OhcUEkSYrIQl/lUTKjJyG0Nie5JlVvX9Vx4zmmHz196+IL5Fx3s*)
(*ufzwjKPH5j/14R2vfeGir719/fd/dsdP3jv54z8f/8ZPL33285sO3962YMuY*)
(*SQtLqiaV8NUl0VRJJF5SpowulSNlEtSn1ZicxRgOUmPyJDWy+GIawQ92uGs3*)
(*LIR46a0fXglwMQ4gqeUfbIg02LNWqNwNb+kHRtOF3uiFC5w+DSECD6RRbqPt*)
(*CMfdBgNZBrv/oKNi82/rxV0BThQhGKIRscRa0M8aTjtWRLucVOQ4mefiIp+S*)
(*hcq4WJ8WWqvEaS3xhdOrT185+ZIDy+6+ee9dt+34wB1bnvnIwc984bq33j7x*)
(*9R/f+/Wf3f/Fd+988bvXnPzsvms/uOr84zMP3TbrslvmX3/biiNHFh7YM3nl*)
(*gvT05tKWdEm5XKIIJRw/luHGMVwZ4Mxhgn7hDZPtSrWBhOsFr1eGPL+H3r8i*)
(*KZTCkHte4C1ZP7ovEqkBX9MFgLv3oSI1+nLw8kPIo7u79y1PevEtWC9vRY09*)
(*kBDG1V5x0ScjxEBIe0+iohDPQIfj0C3DHK+BmjoEF/i4LKZjUqWSaozVTUr1*)
(*LG3ZdNasmx/a/8pXb/rBHz/8zt+eeedvT7zzt0f+5x9P/L7vuff6Pvrnvlf+*)
(*2vfa3/q++Le+r//s/a9966df/sjrz1937x0bzzl39oadXUs2N/WsLm9fEqub*)
(*x5d3R2MTy6S2Mr4+wlVpBz+iI/q1pY8EUnO+2SCUD30t+xRX8JAdVRMoFhqf*)
(*FKQGDFjTGc2P1Ghyl0NqOqyxjEZqPFokK4txWcjEpbqK+OS2qoW9rftPX3j5*)
(*+esOn7vsgjNmnbGz8/yzu665avYTT+549Z8u/sq3r//uT46/88cH3v3rA9/+*)
(*5U0ff+vsK++ZuWSX0LV8fPW0EqamZHy6ZHyyZFx89DglUirDiAijvBYfOgQS*)
(*kZpx1YtxkjDU/tJVpiikxniAmK8HwiPAD4tIVRtc/LQl3/BpotN/6gcE8EpA*)
(*oXI3vIWe1GheShDEt0YotZQQCE16wikGfQvSv8H21Nhnw5GaV5bJ6cyJxSK1*)
(*/JoIuTRGxCE5C/q1jSg8hALLyhwXE7ikxJfHhNqU2FQpT2iId3dkFvU2bF09*)
(*9aJzll928corj6y87fjWR58571Nfvun1f7vz9e9/4IVvXn/fG+cdeWrNoXsX*)
(*HbxjzpGTpx07ue7YLasvOzR759rGJVP5KRUlrXJJlVCS4EoEbiwLx7FsKcNq*)
(*N11rN+kZCmA6662vpxBPGsmegUCkvH7QGcqGoDdBYNxX5XYWqTFmKWHXKdkd*)
(*Y70MJ48JfZqnh0/6PGLHjUUtXoIf92urYiQgqGDH1YSI6BOAfVNHyo5OapAF*)
(*kAOQNx0HWJ5RHcerg29GQLPvUBHETCxek043pesnVUycU7t6V8/hmzY8+0/X*)
(*fOPdB//3/577Rd+Hf9H35C/6HvlN3+N/7nv6/b5n/9H30j/6Pv1+3xt/73vr*)
(*3b+8+aX//OTdz9111nWHluza0r1mbdey1S0zl1RPnJNomC6Ud0ZjjWVSbSlf*)
(*EeEyUTYZhbEsqQEsqekNA3OiCLZkQtQ1prg8hOapQUFqNouBwzTWWgDpG7ux*)
(*9FHDNM0eRdUP2ikinKzPqUm8ivV15fHpnfWrF0078/QlFx9Yee6uefs2Td68*)
(*su7c/V3Hrl/2wgsHv/TWsW//4K7v//yBd/74+I/ee+ybPz/x8jcuv+ah5aed*)
(*WTl1nVjdOy5SVzImUzImVTI6Pnq0UjZOZsokGBVMUmNZpL0arAEnrNGUdHjJ*)
(*Z1BqD0H/DIikRqrXsOKnMPmGTxNdoQIPF3s/p2GISv9MqOlCqA56Rc2nZkMr*)
(*BmXyrD+9emr3gwUkNd9EYmIhD8sDlkxeAZ0KondjNqe/QxdZTuI4hdcWQCpC*)
(*VVKqL5dbauITmlJTO8rnz2jcsHrazu0zzzhz7rmHFlxx49oTT5x9/0cvfOCT*)
(*F93x0llHPrzljLvm7b1l5oGbZl16fNn1t6++8vKF5+2YtGF2cl7T+C6lpIMr*)
(*qYMlaVgiwbE8M5ZjxkOmjGEiCNQQo1iDLPs7XK/0+0200c3H+egkuQjpHrE3*)
(*Q4c42p/mIh6kljv+9NhR4t5gQpNBqubp8ukbAlkCFXWe4i7/YiTDq5bdUTue*)
(*oiwW4DG2N7SHIl6a/FqkFmU5ywHkeKBhGhD4qMgBmYdxQa5KpJsqqzurOnpr*)
(*Zy1v2Xvhojse2f+5b93+wz888du+Z3/f9/Tv+x7/Xd9Df+p75O99T/T1PdXX*)
(*98L/9b38975Pv9f3+f/49SsvvfXoVfdftuH8zbM2L+1auaRr2ZL2OXPru7pT*)
(*je1CRV00Vl4qpUr5RIRLRNmESmrOm9TcCfc4pT+0Bvpqr/VNoHK2P4L1nE/D*)
(*odNDPTAvOnOSGk1ZmW/8VBeFmmPRuYyMqN12raiwJvIpRazNxHsmNG5Y2rt/*)
(*06Jzti/es7572/L29UtqLjyr9+Tx0z/3Tzf8+/ce/OH/fvCd3z397p+f+++/*)
(*PPutXz/66ndvPfbUznUXTZqxrapmHlfaUDK6vGRUumRUYswopXSswpTKMCqi*)
(*4/oBx4IsqWkOsgasGZe/BJhRs49Iw80gUEflDIGhJrWgUYQQsq6GCM2hzwD3*)
(*biH/iOiTUaisnSLSb5hGFrftdWiR26dXLRNyBDxmu+hT6E6YPShsLrARuYMi*)
(*R+0VoJvUvAqweC2xP83X0BVj37XFaFpPxjGQh6xFauiQAFkoj4tVKamhKtFa*)
(*n2qtT0xsy8zsrlu0sHXl6s4Va9tXb52w+cD07Ydm7jwyd/9NS/bctnjLdb1b*)
(*j/TsuHzGvstmHji/d9fpnRsWVC5oh9MyCNNamZJapiTNlEjMWB6M5cB4CEoZ*)
(*UKZtlgAqsWmDLGA4fSWgl5ARzNz86DveyEdVKJUN2xbczU33pZFahI7UqIZY*)
(*dlijyYuvZy8P7hAI4lu2hRWCLSpqLF6V7n6Qso6wIRAUzEvZSLEwjL7RKJp1*)
(*HOAMh0hN5KISB2I8TArxulRVe01DV+2U+U1LN046dM2ah5694EvfvfPHf3z8*)
(*j33P/qnv6T/1Pf5e38N/6Xvk/b7H/l/f4+/3Pf3Xvuf/2Pexn//jpS/94JH7*)
(*Xrr2zBu3L9wzf9r6mRNXzp582pwJ83tbpndlGhvE8nIQi5VJShkvR7gYYGMA*)
(*GndeM/1FapQ67Ch/msDtj2A959N26PTQDIzunY9vpHrMmsVBKylZDdOMFfVo*)
(*nSwnC3xM5FKyWJOOTe9oWLeoZ/uKWbtW925Z3LllUcvppzVff8mK55+46O1v*)
(*PvyLn7/4mz+88pu/vPKr9z/1s//79Pf+9LHP/+jhu16+aPeNS+afOaFhaaK0*)
(*uWR0ZcmozKhRybGjYmVjTFLTMU3b6azPCBvONq0WeKNaIOzKc60XcwqQGlaf*)
(*AY7Uip01e0QFydqpI4OE1Bg/0HB4wyqVb1MFxSE1ci68OgX6XoYQ4GAgtRGh*)
(*EU0prWM7jHeOrEZqAiI1dFB/TBASspiKiZm4WFMea6hJ1FbK9TVya3N88uTy*)
(*Gb013bMqp8+t6FlcOWN59cx1dQt3diw+Y9L83e2LdrQv3da+fEv78tUtC+dU*)
(*9nZKEytLm5WSOg3TKpiSBDNaZMbxYByrk1pUJbUIYyz6AzZSI3WowLrvCfMb*)
(*pCe1bIEUYRG13ZuvMdHbVsFJjT47gTIVOtgBafvu8i/UwIMmFppIaUoG9B+p*)
(*qeqDDtMzHKeNgTXH8JxKakBimTjPp6VUQ6a2s651WmPPovYVW6ZedM26B54+*)
(*+E9vHfve/973m/97+vd9H/ojIrXH/tr3+N/7nvh732Pv9T35+76nf/7+U9//*)
(*3ZMvf+3Wo0+eve3KFXN293Rv6Zmycda0tXMmLepum9ZZXl8lpuKMLEVFMcKL*)
(*UVZWMY1hZMCI2oXXHE69SaQWTrwKFtvVBipne8i+nXKg6sM+S1KHgmEaY19J*)
(*qd/roJOawHNoWk3gFEEjtVRsamvtitld6+dP2bRg0rrZLacvbDuwbsrJ67a/*)
(*8bGjP//P59//w+v/99fP/+P9N/7c94Xf9b35o7999ss/+fADn772rNs3LDm3*)
(*u+m0yrLWcaOrVFIbPSo5blQ8YpEaY5Aaq5Mak3XZBZD9SWrUkThDMItz4EnN*)
(*isWuNPlECnADSHf4/dlNkMt5RHxlQPp0e9RY02aplluB3eF4NViaZ+mTRwjB*)
(*3S7sPh25oEkMOUCvFDpa5QDW7IgwBlMbvbD9dBFOIzVRJTVBUEQxIUtJRXVC*)
(*eUqurohVpMWKNF9ZztXVSa1tifaJyY4pqY7uZFtPvLk71jQj3tibaOiJN02P*)
(*tUyNtXfFOyfE2hqFxvJopTQ6w5akQUkGjk7BsQozVgDjODCejY5nohapRXMw*)
(*zSA1zzGDpxLhMW2QkprDI8N4bVIb8qRmD7n/m7+7/O0WqdixUEZKo0jYELAK*)
(*ho2XJr8mqTFRy6FD+iHgkWMEFoisSmpsQpDKlUxjef2E+o6e5t7FHcs3TTn3*)
(*8PLb7t317Ccu+udvH333Nw/+4s+P/Ob9R/7U9/hf+578W9+Tf+579Lf/ePQX*)
(*7z/+wz8+9NUff+BDb1x2+f1bt1y5aOGBnnlnzJq1Z/6cbfOnLp3a2tVUXp0U*)
(*4yJUkVDgAMcDVmCgxDAiw1hLH903d4yQmuezeahDEMlimn69CrrUgWdZldQE*)
(*nldhTUGrHyWV1CY3Vi2a1n5ad9uqnpY1PY27l0y6bMeCp+4479ufOfmXdz7V*)
(*995X+v7xVl+f6r72l76v//j9N//5py8+9Nmbzz2+fel5s5uX10bbI6NrxozO*)
(*jB2VKh0Vj45VYKnM6qSGNqmxDkyzSM2GadDcVucn9HNkhcU05pQntcJlgipJ*)
(*IyNSXyHMOg1I6TmUE2vd6BXYnTvssyFSSGNz3e3C7tmdU9/EkAP0SqGjVQ5U*)
(*zY6IKbajNoxOC02uoZPdNFKTBFERpZgsx2X1XyEZl9IpOZngkwkulWQz5Xxl*)
(*tVjboNS3xBo64jXtUmWzUNEslzfJqToxXSOUVwuVVUJVhVCR4lJyVIbjJDBW*)
(*BGMVtlRhy0QwngfjNVLTMc2D1KKMnbmsIzJ0xcFrEZ7RwmMLWSg1GXiIw0Pu*)
(*UBPNrOmOyU6xFZHUCMkrlBQ7fHLUWKtV2MS4LR5WQkcK+onU9NE2iHJZhyay*)
(*tHP6GQEyIgQSZBO8VC6nG9J1HTUd05u657csXNm+/YyZl15z2gfu3/zcSwe+*)
(*/PWrvv2fR3/w09t/+tu7fvnefb/+6/2//PM9P33v3nf+dP/bvzn55o9ufeqL*)
(*h6//4I4zb1u57vL5yw7Nm3f2vLm75nQt7mjqrMiUC6LMsAJAMbLa0mwUsYAu*)
(*C3AruZXw4pCab/tlcquetpyJ6ueuUHqdCaSHlEVBK0h3GGuRhnmpA8fzvMpr*)
(*imCQ2oS68jkTGhdOrF82uX711Pp9i7uu2b3sheMXvv3q/X/53if6fvVm3x++*)
(*0vfnr/T97V9+9d6Xv/WzT7/8zSdv/vCRbVevnb23u25xTaSdGV0zfnT5uFGp*)
(*slFxMEaB420niuikBowV/Zx2tQRrrCc0X0TQX7cZDtPCkZqrLLPq4daW/jGk*)
(*Vix52i57gFhj2D/ZwaYHjJAandhnewFmANPfQrbPBME+7hV+PgaTXr0tD9jo*)
(*gEd3QE48jcF3RGr5ZPrLwoyIj+RMVKEGiJZBaqQm8IjUZFFSJFmRJUUWY4oY*)
(*jwmKzMViXDIpxBNcLAGTGS5TJVTWy+laPl4JUzVSslqWkqwYY5QYjCkQ3Ygr*)
(*MTIX4cA4NjqWjY4TYJkIIzqmcaCUBWUwWgYiqotol/oAY+ucRmroJtaouY7G*)
(*uG4PHT1C0qKcCbhBR2qO76G5GcH8NTvURIwGTFd8UiNYs4LLgDR/MEJqeZMa*)
(*ulFNgFBkGUl1kIvzUkZO1aaqW6pau+onz6jvnlu3fG3Hjn1TD106+6Y7Tnv0*)
(*Q9te/NQ5n//q5V9/+8a337n9B/974r9+duL7P7/7e7+879s/v/fL/33ixX89*)
(*et8nL7n68f0Hbt+04Yrli89bOG/n7InzW2qaE/EE5MUIIjUV0Vh9gbaeAs6p*)
(*3sUkNXz54KoP5NehY2MJV33YZ/PRB3rRzZlmsi1SYw1S4ziBY1VSSypiVVJp*)
(*q073tNbMbqte0FG9fHLdnkUqqa147vaL/+3l+3799Y/+/b8+2/fTz/X9/I33*)
(*fvWF7/3oE6/+6xP3vnjTwVv3LNo3a9LajsrZFaAFjq4uG50pG5WIjFLAGIkZ*)
(*L8AIp587qS99RGeJINWB+nXtTlKzrSXxsZCU8FUMUrOkfywzOfZC6YyXKS5U*)
(*aoMmxsrdQKVhCIlrxGLIANYgIT2+qfIdBjg61mJnkxAd1qSTs0nZgzgitXwy*)
(*AzRUGxGn5GCa8ZKR1TpWgeNFXpAESRIlWRRlSZRlQXO8rPCxuKDEOEmBShzG*)
(*UlyinI9nWDnFxjKCkhZ5BXIiwwtAEBgRnT0AUBeKoAw5DpbxsIxlSpEDpVAl*)
(*NRDRJtSMOTWoOcYiNRt32ObUiFrkCWuFP6jft6WQg3W9ofIgtSysFZfU+sci*)
(*DUjzB67hgf3LQiUGa069JESkXrqENbZeht0/FhypGbCmkRpEpMZyMV5Ky8mq*)
(*ZGVDRUN7ddvk6knTq2YvqF+xpmX77kkHL+y5+vqFd9y15sEntn3w+X3Pvnz2*)
(*R18976XXDr3yhUs/9ZVrXv3Xo69+49YXvnzTI5++5vrHzzlwbPPyc+b1buue*)
(*tnpy4/SadK0sxRlWjEJeJTX9zHdtloTRHB7TmEFIam4LEMi2hKs+7LP56AO9*)
(*ZElNm1bTlz5qjMbzHK+SmqySmixWJuSWqtSUpqre1up5nbXLJtdvmzfpok0L*)
(*77lszyv3XPXlZ27/xsfv/tYnTn7tlQ+8/vLxDz517U33X3jhzXs3n7985qYp*)
(*nUtbKrvLQQMcWxEZk4qOjkVVTBsrwFIekRowzhKhJzWKTNGRl5vUCghr9gbe*)
(*z5bTSkChYscq54BkihkEBTtExWHQitShU5pNQp/oGz7ZGDo61mKPWxzaaI/O*)
(*0YnQNB/KHoQQYNA+a0SKIhbLMPrF1/ol2JBFfStaqyLwoupEQZREETGbSm4y*)
(*IjdJUT/woswKMlSdqEApxkpxXozxvMKxEgt5NRTA6i840R6XqNqFcugMuQhk*)
(*I6xKarAMMpoDEc1FNUxzr36E2tEBjrfoAXMXitQCjYi8/PsGaPXmpgfHUBOd*)
(*LhIFZQA5/ej+4UBqAyJgWJAaIV6aqCmr1Z/UNFjjFF5KSomKRKYmU1Vf3tCS*)
(*aZtQ3jWtYtacquUrGzdvadu1Z8KBc6edf0nvhVfMuuTqOYevnXvVzUuOnlh3*)
(*/OGd93/kvKc+fc1Tnz36+KeOXvfgubuvWNO7cVLrwobG3tpMW0Iu53iFgSK6*)
(*NQRw2pEmEEYZNmqeu+6h24OL1LyEPpZw1Yd9Nh99CCAg5zxhdD4Vx4m82pGo*)
(*vYlOalxCFioScmNFcmJ9RXdrzbwJDUu6GtfP7Ny3rOeK7afdcXDr/ZftefDK*)
(*vfcd2XH84vVHzluxe/ec1dt6TtveO2/jtOkrJnTMb66aUsFUw/Gp6PgEGCeD*)
(*sQIznmfLtA4GXS3BZFXFj9SyKuK7rNE361hSCxEs9kt7Ax8Qy1zA2LHKOVDd*)
(*zYAX7FAUr5k136cCvccIZza9IrWn3B4+2Rj287iIRhuxfT3WM2UPQggwz8If*)
(*kcKIiWkaqWW7M21ajdOXq+gbwQVBFLV/kJOQ4yWBl3he4gQRORHNwKl/8qzI*)
(*Q4GHHNrBjTYoQGPdkvaf1ouyEcPBMoYpY4AOa1EN1tyb1FiT1GxnCATIXWBS*)
(*Cz0i8mopZFW3zIjpx0VqOWsgzavmDL9UpGbNQpKFcRnGYdY8wdAkNd+Ks9cd*)
(*TYxUkWqkFmU15w1rnMyLcSmWjicrUpmqVHVdqrE51dGZmTatYt68umVLG1au*)
(*bFyzvnn9ltYN29o27kBu0672zXsn7jin+6xLF11+69Yjd+y85JYd2y9cumDL*)
(*1La5NdVTMxUTUrE6iU+xrAIZkYny6O7kiOogRG95rBE4vi2HITWa4vV6xPGl*)
(*u5xpqo8QS7jqwz6bjz7Qi744Q+tUzMOp0EEiguZ4kUMniiQVsSKp1Fck2moz*)
(*U5qrZ7bXze2sWzy5YfX0lu3zJp+9vPei9fMOb55/eMvcQxt69q6fvmVj9+ot*)
(*M1ZsnTV/7fRpiztbZzRWtKdhOYwkQCQGyyRYijCNi3DarX9aH5MD9baXkIx7*)
(*Ts1Ked7zX0FJjfGANfdg0q1L7l+LLWCE1EYkV4qtflbV0NtMt3i1QXojDPIj*)
(*NXcTZnBtGZswcoC+zcfd0MgxugPsTwszIp6Chjomo2VJzZhWY43tBTqsmU4Q*)
(*OOR4zXFq14scWtrCcmiZCwt5Y0+3uY4ShcnqF47q97ehzhO9IFdHXjqpMSap*)
(*QdsJz5rTO9RcTDOGZ8DPmRkMctY0KDSp+UpOb24kPIfUrJk1G6kxJnyRSS17*)
(*87Wauv4crQ1O8TJEhe2j3baRXPL5B2g37DQxUkWq6VcURqNs1OA1FgNrKqkJ*)
(*MVFKyEoqlsjEM5XxmrpEU3Oyc0J62vTKGb2VvTPLZ8xK98xOzZibmjEv1T0n*)
(*MXmG2D4VdnYL0xdkTts8cfnWKQs3TJy8oLZ+ajLTLsebpFi9LJbzXFwlNZYR*)
(*YZRjTEzTSA2aI3BtPysm4aFIzVFKEZuof2IfcZckZYeOral8+lnKTBH1gdKR*)
(*xDJl1vY0HdMk9A5PwzTNxSQxFVcqUvHa8mRTVXpiQ9W0ltrpzVXdTeXdDalZ*)
(*zZmFbZXLJ9ev6W7aMKt5/azG1fPbNq3v3bx94fodixetmTl17oSmrrp0Q5JN*)
(*stEYBAoXFbkIz0dY3ric3UZqdlgzts0xtsvUzE1qlG/4fSU0qdlf+DseoRyz*)
(*5ZlyGimgqcQq50D1Qfb2eCr0gwWUYqsfuVOjjNqrAVJWuiMNIfJrLyV3Z40N*)
(*0F2wWMsQqAfR+zKyMXEH2J8WZkQ8JZfUzGOVjf4WGpNivLkdXHOIyvQ9B+pf*)
(*rPUXx2lgp3rnjHWU6I0lq6080RefaG819X0B+u2jkImojjFXP+JgzTFtZN7g*)
(*bI4c9J1stjWBfrDmWx42oS3C4I84RJ/EhNqsow3WchzKpuEsUnPOGDox1zwk*)
(*U2uA/uuysJkKl6PBKV6GiN5c0xQIoWfB9jU0AfqK5Y0mRqpIbaSGNEtzFq/p*)
(*pMagBZAcpwhCTJISSiwVS2Zi5ZUxHdY6OjMTJ2cmdaUndCU6JsfaJ8ltE6XW*)
(*iWJjG6xuitQ0g8ZOYVJvRdes6om91Q2TEhUtcrJBitVIUoXIJ3kV06DEAh5G*)
(*WNVM6LPv6r8wAq0RuL7CzpXwQpCabx15tRqacqZpgF4Jo2+VlHpompQCwJqd*)
(*1Dj9DGHtcCp0PpXuOERtqrIkY0p5Ml6VTmiwlmmrLW+vSbdXJdorlIlV8Wl1*)
(*qTnt1YunNK6c2b5+wcSNK3q2bJi/ftOCZatn98yZ2NRZW9GQUcoVqKAb/dAu*)
(*aJ4HnACg6nj9vEcMqemn9Btqk0NqDPXiRl8p1JyaXQDxpIv+NNSUpjJQUL4N*)
(*rR/EbjmHWZeXv5C1q9jqR9Px+Yq7iVmP242qHpq7MTo6Vt94sf2C9SW95Xf8*)
(*1D+khi2WkUYx8OImNWB/uWet8EeTa7ozTvBC/2qkpjkOrZVkVSxjNRozNpGw*)
(*xjkAqNNGB23z9gWWGrFFoRPTHE5nsuwMka5HwDpzIzvT5HX1WPGL0FuZCT01*)
(*zF11g+Yv1UJGRydYGye8SM3OnrmYllN4jHFIpjEWC2bfBm0LDTEWssRt2Sy7*)
(*RGN+KftxQE1qhS1hR4eSZ6RYUgO5pAZUWJNYVkZXZAkxWUawpiTSsgpr1bWJ*)
(*+qZkY0uyqTXR0BKrbZKr6viKWrayhs1URhOZ0nh6fKK8LFPDVqjf14upGj5R*)
(*xccrJTkj8Qk1QF5lQEZgoxzUME0nNaZ4pObopGh6QHdJ0nTBgcSdHvpgKfXQ*)
(*fNNF4wKQmnHko/VZn2JDN78gTUnGYulEvDyZqFB5LZWoScdr07GapFQd5+uT*)
(*Ykt5rKuxcuakxiUzJ6xfNmPbhkWbNyxetXLunLlT2jsb0hVxJSHzMg8FldE4*)
(*huMYFs3vopWyUGAQrOWSmhm/dsAIzFEb6qWPjl+9PHtZJ4KN8rVdZF3qT0MN*)
(*hjWp0Vv4U0os7cIq6qAdJ1iCbYBYg+/bxGiGCr4FErrEvHLh209ZHnxJzf3I*)
(*SIsYLGLbp2ZzujJoEAdZndSsyTWbU+kMak7HNNY889jYTI5OEtEOTNZIzboI*)
(*STsgAOGhTmoWV0R0hyO17IyYqWa2PVwMmdSKrmaEpkffWaN1omhrH1o2aoM1*)
(*vHejmlzLHXETanihzBRlCfSnFIPUaIqFvh/HDkKww5JwdeGVYIfdJsfrH6kx*)
(*H6sdw2ojNf2MEaDfrabCmsgyonacnyJJcUWFNSUhoZm1qkR5dby8Wimvlitq*)
(*YpU1sXSllCoXMhViKs3HkzCWYNAdH2le/TJdISbLhXhakBPqOF7kjL2uHMNz*)
(*2UOIoL6vNUtq0eKQmrsMvXpAryoI1NB8Exau+rDPeuhDwUhNF/s+NX0SyzwE*)
(*Uic1/Y5OJa5qiqIkY0o6HsvElUxczsTFTEyoiEvVqVhTdaajqXpKZ0PvtNY5*)
(*vZNmTO+YMqmls62hpro8pkiiKOqr7dGsHTq7Srs0Aoioi3FNq6H7r1mD1GyM*)
(*H0AcFoZsyUOQGtl82XWJoHJBMhRYHE3DredkwQaINU1FzQVBrNwNYBoGp5C1*)
(*i6ychYrdCjYfbYeuaTXrA8G00qs0ZQops+D2RuBNcj9lta9BRWqBRm4jYp3R*)
(*pX8wF/Mb267129WM40D0lZCs3RmTaMZUGnrKnAPSA4P6hJptTk3DNM1BY42f*)
(*QRTagEFboqdNBdlW2likZk81bifXgJIafgWRdbGqrZSYHA85K03RylF9Qx8u*)
(*1XpY1m4L+/thCIBrO16hr40bPFIMUqN8lt4nxQiZVjO9eivghwkEoYrWWGNr*)
(*Wgh9c5jlOPMKbIFl1YGzLKjjbykmiYoQS8oqrCVSYizJKQmYSAupCjmeEuJJ*)
(*PpkWEkkuFmflGCPFGDnOKglWUb0lOSnOcxILBZbhTcdp9xebd2NpZz9mHXFO*)
(*DYRr/nkUV1HErUv06cHqIS5zBSa1bA9gdyapoWOEtZtfVNySRVGlLlVl4rLq*)
(*hLjMJ2Q+pQiZmFSVitVWJBqqU0116eb68pqKeEVaqUjHE4rEc6yxVpzVEQz1*)
(*LKyqhUgXeXTjnj6DlmVEzae2+tE5p0YhZPiCrrk2X5/kP60vsRU6UAqZ1ZVQ*)
(*pOZOMPAwxf2cL3eSQqfhFB9zFkk5HWHmE4VXm3UrtvtXr/T4JjiEBy9vhPQP*)
(*clILVGX0hZNnqoaQYHtU+zJ+O3SZt62x5v411tIa428meyiGvlHbuJxNWz+p*)
(*j70g4AxnztxlI8JosBUvLuGF2FhRkFLUG7ptJIMlNQ3WoIFhdppiszBseDG3*)
(*40FbCVheONs4JIvYRh0NNKaRe+d8wsT+FAjTmCFOao4/vfoUSqGK14S1XBug*)
(*qSc0zmRFQ2MBIlKTBEFRR96CIPNyTFQSohznJQUKskpkrPpZjnOqiyeEWIJX*)
(*4pyIftKcAsUYK8Y4QeHUoPT10cbCaaPBGC8ogIvRcM073+YfurjyjAIbi1uX*)
(*AlQfLakV3pyaZs/uVOOmbXJG174Yx1GhA6oEQdS+kgRO1lxMUnlNSCliOi6V*)
(*J5DLJKSkIqhfqpimqpiKexw6uAotyDc3QfOW082jjdRg9gKarJEMVl/0Eojm*)
(*3I/Yv3GEXGydJIsVKXlAG1qxByRT2CTRpCH/WihIZulLu0gSqMYJT4WLAhsC*)
(*TWKwpAY8VjZiw6dJsNeXNLnGeoPaHpkikZqjxApIapT5pfFvZTxQgMNALBAz*)
(*X1M7X5569NA5fQs0+j+D1Cwd0ntnzXGs6czhl7YnDrLAMTGU8wo2e1SXZ9oH*)
(*HtOslODfQkP9FlZtBah2/GV2+Jn9YGbVOoYMnU6mcZ5xE5DmjN0erLmSRy86*)
(*PfQCZRVrwYKVha2ZF6QpkZt5IEyzh4YV36dC9OPhYiSH7PjGHW/QYEkRZmHN*)
(*RmqMMf2O7jbW5jRYkdUu7NCcyAkSL8q8KLGCyHDosAeGVz9LrKhwSkxQYirK*)
(*8YLMcpL6IHKcpH5m1UAYztzfCrV7FK0pZ/N+YrrmTfo9n/L3K6xgnRENuWO9*)
(*UUYU5NkCm1OYhSPrmk60YEAlLJ4TDc7SV2igpfPGNmcVwASeRcgm8iqyKZqT*)
(*ebS0Ubu7j9X0C90Jw6t+Ia/d2cnlHFxs7LbmmOwEsHYWP2DsC/OL2jPQkxpZ*)
(*7I8UxHrkL+7YyRaYkE5Q6Pf2+Yu7YL2yBvLu43xrkKai6c1IMcSrU/Plbkey*)
(*6cuBLO6QvYye72uQQhVLuFxYjzgKhzXFnn57lrEpBwNKaiFKleDfbm3yrKah*)
(*JTqpRbGk5l5M5x2OMYJzzsbB7JvxXMcapOY8pCt3GzgHsutVBrNQkZpeFiqp*)
(*omU6aJChre0yD1jh9INYsn00zN5wZ57lYtCZVixA+xzVSE0/V0UbTucrbgsQ*)
(*1HD52o2gUhDj6Q7N105iHxlAUsM+6PimsGWFFctUQv0EV+OoBoblITraT7uw*)
(*g9Mcj076gxzPICdA/S4PleBkRZAVxHG8xLH69dkC+lebb2ei+rlBrN5mjJnh*)
(*HNuSn+RTBZQh03seTKRWWNHf0WEASmUrlcZ0wmKMdYmstTRc2/hs3Aoj8pyk*)
(*Ow45kdUdr1/dybOaEYX284pZmHN8sblpN2q8jjQ2YIOC6RIx/yTsogzB+py/*)
(*9SiUuGMn5I6cVDBESA2bO1BkUqOva0ozUiSxx0WvpQ7rR06wV7AEGTykBnA9*)
(*ta8wudVqfem2J44sY1MO6EiNcQ11CkVqXrUAchuaOxnu0EKb06EugHGsfrRj*)
(*lnmCsfk+29tY5ARkggva+gA9YM2X1LRtKcOQ1HgWCBwj8dA4LwHxmnFKCwfN*)
(*ie3szj/9tbP+uwAhDxhOm8NA0xjaZ1bja1AkUgsxuvO1G0HF0WwL20hpLFIB*)
(*rVY+Esj+Fy8ZzgGoMeXLsNqB7OZp7Jx2r6KxiwidkmN+r46ztU1K6HotddiN*)
(*xuyCttMNYZp1RUd20bAxoA4zq4MRRx9ELqug5RnCM80QC+uNPpbQz4aTHM1w*)
(*Ypo2V4pePRkTYcbRVcZqAmMrNGtugUYmD21/tHE/cuoHdJenNivH64Fk75S0*)
(*H4plYppFajAsqYUYHhSc1KJ+8xQDJWRSI2jdILGrbrGn1jF/YfdT1GT7Fo5V*)
(*7JRmpKhC81bBniq3HSYE7tXlYf142VWHf993C0FLABuIPWvYhGHF/rgDrLCk*)
(*5ngKm56gvUAB26ZXCh1/YvHTHdoIqeG2p9mGRcbKI/uTmPMrckZXRoi+pObj*)
(*hgOpsfrSR8AZmMbIIisJBqwJnPovGoTwxgkt1lIgY0GQfpU4hBqsIV4znAZr*)
(*+s4dxjqBJU8hkBpla7VbpDwtnj1Ae4vO35baA/e1SAW0WnkKuZPy8lBYcQ9B*)
(*zaMdso7TL9AyNFg/0pQ1bmLU9iZp25OQ0mtHQTCGy95sb3tBxBiLL42XR/md*)
(*mePoLgllBVxCGXi4lNCrH00/W5Bnw4kXqWXPqnVOflkL57Pbn61DqjjtLjbd*)
(*NqLXANriSX3RI2ve0YlILWpumzQwjbPBmqU89hMp8ZufabIWvBwKTGpBwym2*)
(*DEtSs9IzQmohxG08HVbUbYdpQsP+iY3R1+iRSS18znHpsX8TpRB7LrBTYEOU*)
(*1BxRO4rIrs+EvJyypIYke8W0E4g8B//YIROwNm5DmMU0DKmxpw6pwaixQ02b*)
(*WeA5RlQxTWAUiVVEVuU1UWBFtM4HLQ0zLg83xrO2y8U1WNNJjWVFi9Q0WOMQ*)
(*qcH8ZxsMwZJaoNaKtcz5iCMoi9QcDTzPwAl5pDGG/SzYEi5ssRMEw2rG2Frb*)
(*iWnc2aGLcXkHm/1G02mN2rKzIsgB/YO+Sc2ax2dMUsMfbRoQ1hzdJaGssP0L*)
(*TdlS6r8jJTTqR9/PFuTZcOJPavbJL+uWTGs3bu7WNkObNMeazrExzSS1LAma*)
(*P7k2OAOL1KzDrwJnLXg55DW0KLg5LbgMM1Jz9AXYAxyY4htb38Ihk9rgKUx7*)
(*D+v4k7LqHeWMLXZHM/EtkH4Y6js0BAQXr/S7SQ1bJvaUBNWQQBXkWw7uqB1l*)
(*gi00bKSnOKk5xjz+ReG6c9nqf7VzMqBtlg46eE07cZsb9qSWc5AIwjTI81Dg*)
(*oaRimsjEJDYmc8hJnCIZJ55J2tYMQeBE06Ft87zBb2h1JDQGtfokhAZrPCqf*)
(*wURqTKFndhyhOV68FCp8Qh4BcbwxIOK2Znbz3g+JJJFadsuRh+j4Zmm0ceoD*)
(*urLNnPDIYpqWNwZgrY0+yO93UvPt42g8O1JCo34hRmL5PBtOckgNWvylc5Oz*)
(*s8jtOHK2mJlLJdnsUVR2OgNsDgMCyDC5pKafoOueN8tuWAvQ2QcdHuQPaLrQ*)
(*a90AynAiNXdfMGhJzZ1g7GB4YMVeStFTmNRAfrBmT7/DsDii8EpJ0F4gUAX5*)
(*lgMhdnf5kFM4Qmo2WLOKwrs0PEjNOMsQQBemZWFNn1BjzQ3m+jVJODeUSQ2a*)
(*pKbnFs2mqZjGigKURRiTYFxmkzE+FRdUp35IKlxCgjFEcFCRoCwxqpNkRpQY*)
(*QWJ4ETlOQMNadCCeGjrQ3iFrSyLtpJa/YEnN1xQwRIvh+yxZHMF6kVr+xkRf*)
(*aeD16yAZS+jiLm23lSNL/mnwJjU7r0E7uOkn5hi3CubcCogu17bdNWGuezTy*)
(*lrU2IHs9QL+SWqA+jqaoHSkhKBjWG2UN5vNsOHGRWtY5Sc1BbQzrnHczplet*)
(*Q4P1u120c2eAHdxYC9yMpZV6jNj+y7rXJODqR/rhgeMlRpBInFLYBlskGX6k*)
(*Zi9zr9xh66WAA0jKwsGakX5o5kHFbRXpq95R1NiSJwSOLQ2CxpKTQZth4msW*)
(*yqCsvDi0EUtqhAS7C4fwlPVsodqmb3U4EklW4BFSsw177GcQepQJgdQAzN4O*)
(*pi8y8SY14HHqY1Q/YHnIklr2TH7N6aQm8qwksorEIkxTuExCrEhJFSmxMiVU*)
(*JvnyOEwpIB1nkjEQV6KxWFSJA9VJsaigRARF/ZeBApp9iDAgouozWq1q3OXK*)
(*9Aup+RSBh13ytQk0Yn8c4vapEawiZfjRIUVqjMvau62cr4SI1GEQ7EZC36Fq*)
(*c9rxf7nIpj+a4xlzR0eW1My8DSVSY3K1kTIlBAXDeqOsvnyeDSfQU8z9YWRY*)
(*wyzSyEKZeSMnb56hm3Pni05t0NZ/4UoEc6KId5ox2h60BPIsz2LXV/4ynEiN*)
(*oaZjrJ8RUiOIo/ehr3pHUWNLnhA4tjQIGutlhEMUqZcuUQZl5cXyj7Uqvgl2*)
(*F45vdgJVEDn9XtXhVYNkBR4htZzOMZfUXMVi35lt7hDPOS0kF9as+bUoNLZt*)
(*aU6/78aL1MzjH1kwxEnNmFDjWJXUZJGLy3wqJqiYVl0ea6hJtjZkOprKJzRn*)
(*2upiTdVSU43cUCPV1Yi1dVJtg1zdIFfWS5kaIVXFxct5MQ5ZiTGOyEMxZd8N*)
(*a2pdmImSbK6CEIpXEwtn4sgptAeItUVBwwRDkNR0cRthGgldI3Zr4LAQLlLL*)
(*obZcUsN7s9/fDocyqblj9E0JQcG8ejrK2AtV9ZTiDTxavXquYvXEt1xME1ig*)
(*Oh5Gee0YXc5+PpVx24mt88KViJPUyJgGg5PaqSbDgNQcfQdNP4L1Q1aPQD0U*)
(*ZeF4mf1iN/M8xW2HfT0DW4/vzh25H6SvKbK5DlGk2Eonh+bWw6BRA6LQFDul*)
(*+tEkI6qNrHTx1U8wQmoEwZOaE9ZswmLvyrFNInmSGmPCGtTHXURSMyfXMEed*)
(*DDIxSA2aix5Z47BHbe6Qg/rSR0lgFYlLxoVMSqwslxrrEp1tFT3TGufMbFkw*)
(*p3VmT820KeVTppZ3Tc1Mnprp6q6c0ls9eUbVhO7KtqnlDRMSlc1yvJoXUhAq*)
(*ICpGy7hIGYxGmGhUg5VwZsQtQ4LUvAIPHQsYOFIjWx5fu+RlhMkSukYI41ks*)
(*qVk3NOqwRgY607Px8jA3n97HiQwFUnM/gq0vcucVIg35PBtOiLyTP6mpdMZr*)
(*pMaZLns+lZvUMA1nhNQKLYRiIY+7CjIaLIjYTWjQR+xf0htqmvBpCsfL7Be7*)
(*mecpbjsc9FmsOrlD9ioNgsZ6GeFwRQpyJ8VoQrP/GkIzGZeyOYSm2CnVzzcZ*)
(*+uNuUrPKxBGybzPxHRENZ6EmNW1ZkrULwEFqrIPUrJV5pwipabcU2Fd5GqSm*)
(*YZq29FFgYwqXSYvVlXJ9XWxKV+3ixZN27Fh05lnLzz5vxfbdM9dsnLRsbfvi*)
(*Na2L1rQs3zRx7Y7pG/b0rts9c+X2njmrOyfOra2eGJfrWJiJROKl46Vx4/lx*)
(*pWxpFEZR9AUqIDhESI3QnENEBwYrqTF+40MvI0yWcDVCHs/iSS3nrgptSaMx*)
(*UI5azu2Z0c7p1/Nny2q+mMbgRgiE7rIgReflH1tfXj5DpyGfZ8MJGXZCkJoF*)
(*awapMdpUmo5p5nL67ALIYpLaiGCFUEpenYLj1+JZV0ohDw7Jj9i/JGtLoFgo*)
(*C8fL7Be7mecpbjsc9NlABUJfU2RzHaJIsYMHR2iOkLG/UiqP5ceecbc4fiUk*)
(*m7KCsEYAmMOqsrIyndT0D+TYyTk9pc0yHalZix6NE73wpAazmIZuw8klNbU/*)
(*jWYXSQ4nUoMMcF5FoO1+t5EalEU2EeerKuWG+nhbW3LR4gn7zlh2023n3PPg*)
(*Jfc9dvH1t28/eOS0PRfOPf1g79bzevZfuvDCG9YcuWPblXfuOnzr9p2XLFu0*)
(*bUrbvKpEBw9rSsvSY8bGR42VRo3nx0a4iPGyOue8PCS2FUcBTi3L5mpQkpoj*)
(*TKx9CBojGMSkxtBtf7BbYF8JUSO+41kyqTHGn4Bx3WThTWrmYLpw4iglQjl4*)
(*FWahlBlbXzSdZqA05PNsOPEhnaCkZptZsw6B1EjN6Eq0OyrNk6wGB6nl+fiQ*)
(*E0I2vToFx6/Fs670ErTXwPovYHVTFo6X2S92M89T3HYY682hWhB3mJjDj5dd*)
(*zbOmQg9jsIMHR2i+f0ZzmYsmnfZI3SHYi4Wm0/HNONYIANvSxzJNsDNrhFx4*)
(*RXQq2FWMWKTGmMfsY+fUdEzDrXs0lj5qaGZzJqkxxn4zB8oMI1Kz7ZM3Tigz*)
(*drybRz6is0RiMpdOCbW1sfaOTHdP7Y49C2+8+YxnPnrspdfuePH1W+7+0FmX*)
(*37Hm7OsW7Lqid9vh6Wdfv/DIifXHP3Tg5PMXnXju4kvv3rnlkkXT17dU9Miw*)
(*afz4qpIxqZLR8ZJx0pgyvkw/QU/b3JNLatA6vJoW1qAHqdGYCC+rWPBeg5ye*)
(*ENGBEVKjTqcjwVnrYFyjGM1xuQeiYj/jSC1qYt0IqQ0xUmPIZ9QXhtRyruaE*)
(*I6QWXOwmlKwSvgpDyCahU7CngaZ/KbYETQPWcwGrm3KojDVog6E8yeJONtYb*)
(*thHZc+f24GVXHVEE7XBDFynwJjXyn9Y3ZE1wN2SHJrjTQKNadi0iVJAlWCNg*)
(*RTRCavRCMqfZnfw5RzYy1jSadRqb81hHw+lkp5GaA9ageeaIEaL1ul1nB/e5*)
(*bzhXhBFbKPEqQ+OYO+u0aHNIwbPoIBFJ4FRMkyUuHufLy6XGpuTUaXWLl068*)
(*7ModT33k2D9//alv/Mezb333iac/ceTY/dsvuWXlgWvm77p05vlHV9xw357H*)
(*Xrr2uS+ceP5L933guWvPv23vkr2zG+fXCK2wrHrc2PSocYnRpfL4CB9hcsha*)
(*TxSwJRjSn0gNcaRGM8ADxE55kAsYBKRGMD40dgnbQ3lJiDryGsFafxmkhr3/*)
(*nTiJZvsTjMyp0aSEPg35PJuPeOozeb+h5wLX7EXYrHF6Vc7kraYv+HeMrgQY*)
(*HZ6lXBg2w+k5fU7DhdPPAlzi69PLA2loMXQ6Bd9s0kgBa5lmOM0EMWiDStzJ*)
(*xnrDNh+rpgi/+ho9ck25fw2tHiEGD464yJrgaMXYLIPgpOZIfzilAh6k5gtr*)
(*Q0WN+1NQfwWM7gsN+LNnakPztiNG/8WkMe3aJB3QXBcmcSy0nNG5wmx3m2UG*)
(*YJCD0WHqPhiSG+RibuHTX/6q2Wd5jtXPe5REndTYeJyrqJRa2zLTexqXnDbp*)
(*iqt3qaT2xpce+dyXH3jx08cefuaCW+/fdd1dWy+7be3516+44Pq1h4+dftvD*)
(*F9/37NGHXjp+0xPXHLz5rCV7F7UsbFU640wtHJ8aPz4xvkwui/JAH5yYaSEV*)
(*W6Am4G7RBHtF7pQBUejL2esRbID00QGiOQWu91QhUt4P4pVfbA16Jd7XD3Hk*)
(*SW7EZnOH1jH8mD/1kTRmn1qBhLIS3aXnOxYKpBVegdMkmF7xvFSC8vF8xHMs*)
(*FIbUILT6Eyb7os/uoO7H59Ti/utUCkJqxas4smLY//TVHzKp9afK5SPuLNM/*)
(*UowMUgZOrkeGOi+FknBFR3gE23ws//af7KFhjTYhLsf3vqRGX+mAgtSwVeaV*)
(*HfdPWJ8YnTBjIRc+4UGv0iDnS08PltT0DzTFeAqKpYTQHBupJWW8xbawC8GG*)
(*PiumT4lppwGgP3MuuHWRmvk0h5z53lMNO6I664olaAzPzDeb5rnc6gfAeLrB*)
(*j2vmzBoqAZ7jBB45UeBkkVMxTZZhLM5WVEkdEypnzGxGpHbVzieeuv4Tn77r*)
(*+ZeOnnzo7BMP7rtTdQ+fecv9e685vuPQNRvPumT94RvOvObE4Zsevv7IySvP*)
(*ufHgkt3L2xZNSk2q4urk0hQoi0ejMgACYx6A7jWjkR2dkJuY41e3HSA8DihI*)
(*LeoSmvZOSKH7e3f6KQfDNENlmqAGVtwl4K5EmhAIVeM98qTCtFw0Y/z+HGDB*)
(*Vjpl8/ENeUhoFEOcdcJ6LmIS9Dd8OLWCHsnEh6cVc4ClBuFTHIbU7IPPIqkH*)
(*Wf3smuzbBEJz6KASR5bpTWWgVp+P0BSyPTF6vfRP2hwJKGyYZAWDts1r7u6e*)
(*xnqHqEH6R2g0xOHBq8UB1xtjx5+EEnCET0gPoLA5gRqIHo79XJERUqMRO6ll*)
(*Yc0gNWhOiWmYxiPHqLDG6Xcs6+zGZs/jt0+haQsfOcMxrOoQ30UhjDBZFzXY*)
(*zTzwLefkN0hYMTUESE0XvVQ5RGq8KPCSyMsSL8usrMB4UiU1saUt3TW1etbc*)
(*xn1nLr3h6J677z14zwPnnbj3jMefvvD5l6/92KtHn3np2gc+dPmVx/btPW/d*)
(*7nO37Dm088wrztpxyRnrztnWu35R05zJyc5avi4ZTfHROBuVIOCZ3JoklSFB*)
(*GPLPLs8OAUUmNXICsL96xUhOPDlq36AGVtwl4Ftx2BAIVUPuN+krdEiIW4UI*)
(*GQxXzoNco5i8SY2+TIaZhEaYoUVqBUlJoLYTOpZAKaEPdvCo94AnpuCx+77r*)
(*sJOaW1d9VTdEDVI+glVs7INun+40UwpNxsmJd8dOyBpNcUVtp/Q7tqqNkBpB*)
(*nF1tdi2JRWraaSC84SBvHrhvgzWsY3mW46Hq2BxSQ7BmzqxFoWODAe7qpaFI*)
(*asCeRKiWACcgTBNkSVAkPiazMQWmk1x1ldDSHJ84MdU9vXz9uslnn7Xg8OEV*)
(*N9y48c67dr3w8SNf/OrdX/3WQ2+8dfKjn7r56PEzdp65ePWW2cs2zlq+fdGi*)
(*0xfN2TB38uKp9T2tqfZKqTbOpgUmxgKRAZx56COalIy6nYPUvCwAQzfx7VkC*)
(*/UJqQR/BxugVuG/INEZsUEmgGrQ/4lXONJg2+IuFXtwqRKMkNIWAbRGDs+gK*)
(*TmrhZpqGotBk0F0OA05qDp+hjTZlSordBOjtkmX6Cp6G/hFsW7P/OhCJCi9B*)
(*DQ62xyerLiC+pHUL5VCB8dA68pfAY3jmftb+weHfN+Pk9NO0R/oG5Q5whNRo*)
(*BKP5+npEA9NULkPAhZxgOcgKDOI15JAHG51Zs2gGqbF2UuMsUoua82i5M2i0*)
(*E2qDndQcK3FMUhN0UotJfFxmkwqsTPNNdfKkjvSMaVXzZ9duXj/p7P2zLjm0*)
(*6Mbr195z7+4XX77iza9+4KvfvO9z/3z8uZevPXr7zt0H5q7aNGXRmkmLN3bP*)
(*W9fdu3Jq59y22q6aRFNSqpK4JAdlBggAcMA4SlMlNeSCkRqT2+rdQlsI/Utq*)
(*9qe8AvGK0Stw38TQGLF8BJuGoBVBeJYyj8CP1BydY2idGfziViHKAqQv56Jq*)
(*1GAQd2mcOqSWpxTP4NCrX4gmEDQl/WNUaUIGQ5nUsNbe/msUN/4fzEJvJaxM*)
(*uXt8suqCIKSG7ey8ChP7E/lL4MIud4WCIUhqXgkbITWs4F+KZg8uhAZtCSyX*)
(*4yCnwRrLM9osG/IDrVMzNGcnNQ3WGI4HuaSGv2gJe0D30CY1bfu7WiaCmCW1*)
(*hMymFVhXLnY0JmZMqVo0p3Htsva9W6cfOjD3yEWLbr5hzX337nz+oxe+9saN*)
(*n//yrZ98/boPPnvoups37DkwY9XG9kWrW5asnzhvzcTe0zrae2urOlLxWknK*)
(*cHwcshIAfDRLagasRaOmoyS1bEY87I+vUWL6kdTcBsQrEK8YaaIj5zH/oNwh*)
(*e5VwIKvoFSx9UOS6dr/htNcL9sF80j/g4lahQAXo662AyjloxV0ag4fUBjwB*)
(*ZCm2waFRvxBNIGhKitoEKO2P5W3oNkN7Ti3jbP/Vy0QPWqE3EfbqI4g74yAg*)
(*qTl6uqAtAlv49kohBOj1LDZJji/tD5IVALiEMhe+WXZXh/sW7CGhlsUWL1LT*)
(*MQndWmOtexR0Z5AawjQBmKSmw5rGaAJvOP2gQ0GnPIvUoiapYZc7uq5bGgak*)
(*pl2ArTIvy/OI1CRRkcS4zKdkriLGNlXKU9oyi2Y2blrZdfauudcdXnvi6LaT*)
(*t55+122b77x93cl7Nj348I5Hn9x73yPbb7lz7SVXzNtzxuTN29o3bOvcurdn*)
(*3Y7pS9dPnjSzqrpVjlcyUjLKyxFWiDB8BJEaugmWibIgasM0RGqwAKTm/tKr*)
(*8foaGRrL6VnIuSEAFwsQkuSIkSY6rzQUKihHsITizdOCOZ71Dcqr9h3e7H0o*)
(*wJGal/KEy8VAiVuFghYg2VsBlXPQirs0RkiNUopkcJgRUvPwA4Y+qemfLcXG*)
(*aviQMMWB7IO9+gjizjggkppDedw9XdAWgdVGh/p5pdNLsElyfOkW3xQSfPoG*)
(*gvVPUzX0YQ5j8SA1dQQPompZ6teeoVWL0Jwag9qEmjabhmBNW/1oEJx5uKHl*)
(*RI4TWeRspMaSSM13xWOBSa14AwMbqRnH9GdJTRbjipCO8ZUJvrUm3j2havn8*)
(*9r1bZ1954doHjp/13GOXfOSxCx48ufPYDUuvvmbOkatmXn3dnCNXz7z40mkH*)
(*z5901oHOs8+adP75vZdevvTs8+ZuPr2rZ2amrpFJpsfKsdG8OJrjx0JuPMOp*)
(*sIZuEXdgWj6kxhAtg1fjJVgtr6ZK3zYdIdif8rUnvkKTACbgoII+FnKwQROZ*)
(*v2DVwOEHS2pYwzukTbE7a0EVxivX2BYxtAqHUtyFMKhIbUDSQBlvIIMTSOjb*)
(*Zp5NIFAyitEEaMyOXUULm8GBEkf7AraJNmaIrHMI0TZBrmD7I+BNQIQArT+x*)
(*vRt9YWKjc6cZ6wGbF68O1x4LcEmgpAb6iRAUeYQQNMxhLF6kxuh3UGvn8LPW*)
(*LjNEW5oTDIdITVBJTZs4Ezle5HOd+g1nkJpgkRpA54qciqTG8QIvSoKMSE3M*)
(*xMWalNRRl+qdVLNyQceBHfOOHdn6kUcv+9zLN3/mxWueeGj/1UfmnHewY+++*)
(*2r37avbur9m/v/bgOS2XX9x1242L779r8wcfOfPmG9bs3z1l3qx4c/24TLJE*)
(*kUoEroTjSlhuDORKARtVXQFJzVcwhTCUSY0+DZSDikCxkIMNlML8xZ1g39ix*)
(*NetV1/2WkYKIO2tBNdar9vVv3IEXJx8DJiFaWX/KgJBaoDVdRVIPh/oRKiif*)
(*JkCThuLl0RELjR/gsRV66ArWmA/mJpmnOHLnq+HkonB8D4YyqWFzRJNa+u/J*)
(*4bgTzwz6DmJAxJPUbLNp1nkgnElqvKA7NL+GSE1kWZXIJI6X+FynfqMSHDTI*)
(*Ttunhhw6AfJUJDVO4AWRR6QWE8sTUm1a7qhPzZhYvXxe6/7TZ91w2caPPHr4*)
(*85+85fVXrn/iwb2HL562a3fV2rX8qlXM+nXcrm3xSw42335979MPbvjks2e9*)
(*/vGL77993Tk72xfN4NtrSqriJQmhRGRLeLaEZUsgOxawZYCNRKHuCkZqQU0Q*)
(*wWo5rErocS+2Qw9qfPJJA+Wggj4Wd8l4VQplBvMRQtV7JcCe/ghO8qn0AZc8*)
(*tYXQDWFbxFApFnoZ5B3xYJjXIwi9wQkRspc5JaehgO3Xq0cIlAVf/4HUb5Cr*)
(*awhxW6GBzWMBWxxmNJsrlNmkLxCHtxAlifXv28T0P7F+gGv7YdSFpaErGpuM*)
(*EEHZ0+8ugQHUxsEpWFJDrKZjmrXiUbsQDTFaFtOQ4/TNayKrYZrbsciJEHnW*)
(*/jVg7ZQkNXShGo+mHSVZiMekTFKuSSutNckp7eULZtRvWjX54P75d9+y94UP*)
(*XvbiM5fde2LbwXMnbdqcWry4bMG8MauWg/07y6+/fMrjJ1e++uz+L7xy4Rsv*)
(*XnTyxtP2rK2aPyXSXlVSrZQk+BIRIlLjVFKDYwAsBS5My/NEkRDjUsIjWFMT*)
(*YtyL7dADtXFfq0j/LOEpylgcpY0Ntt+MGKHqvdJg96/flmIXMqwVOzsFkXy0*)
(*hSF25dgWMVSKhV6wJUAYXPWzYBPQDwmj1CJ6gxMuAQU0ZeHSENoyEFoWwWeg*)
(*kKnyMFjFocMw99IxZiCyWaRWTwgwhIbQe8b+6SvYWHybmKO12v04AgQeb1lD*)
(*1LVXTvMJyqF+5GI5ZQUPaixkWajPpqmOzzpGEFQHLadPq3GiimOsvtZRyHGs*)
(*5qCKaeoHUfWDYI3JwhqO14YVqUE7qaGTMHmBEyUhFpPSSbkqE2usTnY2p7sn*)
(*Vy2e27Rx9aTD5684fmzXPcf3XXvlyh3bWpYuk3tnjOuZPmrpQnbfjvobrpj1*)
(*+D0bPv6hfS8/dfZHHtx79cEZq+ZI3W1jmzMlFXJJjC/hIcI0li1h4FgAy1RS*)
(*A0zE+z41EGJOLVDbAf1CathUBUqqOxkh8liQ4Y1XaedTC/mIo47skXqlwXrE*)
(*jWkjpOYbMjbw/EMebOJWnsFDam7pN0zTC4Qcl+Wz4OrhbuwEn0VtAvRG1f0g*)
(*jW3sTxM6eORUIDWrBXmFSZlHQsfnSH9B0uwOn6aJuXUeW49e4YeobmyMoQ2R*)
(*O536B4dmnlKNFCt4SmNZjtMcQjOW57OnOYoCzHGiCWsmi7mdiBzyKUmc6gRz*)
(*Zo3jVMd4Ta4NE1LTME0/+JEx75vjBE6QeFkRkgm5MhOvrUw01SU6WlJTJmVm*)
(*dleuXzXpjF2zD561YNf2KYsXZaZNB53tJZMnjF40R9y9tfnIRbNO3LTqnltW*)
(*33nd8msOzd62vHJaU0lbZUltvCQllMhcCQf1pY+jEKkxZSamAc05SC076Ue2*)
(*SNi2Sdl2QJFJzZ087Pf06QyRBlA4UrObPq9i72fz5agjd4IJj9BjWn/mKH/J*)
(*R1t8Q8YGTh/C4CQdt7hrfJCTWj/EAmyDTHvUXqPr0AMkQgLAQJOaOxmUeQxk*)
(*G/vZig4Scauxoxz6oUzwUwOh7oJ3i5V4csj06uSr3kOC1BhclkM3AXeMhTVE*)
(*VsWdmo3ULV5NRiM1TiO1LKaJmpME3UHkVPjSKAxNrom6Y0Upx0m6E9G/ssyp*)
(*Tv1ShzWe1yfXVFhj3LBmWwOpzwpFhtwp/Ui0a9QMUlPzqTp0PAs6ekWU+Fhc*)
(*SqdileXxmqp4fV2sqVFpa1VmdFctXtC0Ylnrgvk1XV1CS8v4hrqS1sYxM7r4*)
(*1Uuq9p3eceFZ087fP/HM09tOX1EzfzLTnC6pS6AJtTiPNqmxsIRhVTeageMY*)
(*o9CAzeGLDtvY3b9i/yQLKD6pkWOnDIrGKvrG4hudozQI4rZ7IPjQpSDiqCPf*)
(*YrH800yo0RfdoJJ8tMU3ZGzglI8PWtJxCKHSB2f6B0+S3G+bC9hw3I2d4LNI*)
(*TQAbPk3IgUpjaBmcQolDjQkdUL+lh9JkEZjLnmD75zyNobstFK9ksIF7NTHf*)
(*lNB7Cz2WKKzaEOD9FGykDnHTGS2pqdgl6qTGyuizPmVmQpnhVCjjLadojKZ9*)
(*RtNqFqyhoyO1ZZBuWLNIDWEaQG7okZp5gbh+/TRj8Bq61IAT1BJQC0SII1hT*)
(*ysuVygqpsoqvruaam+TO9tjEzlhbq1BbW1ZZNaaivKSmYlRrfdm0CcK8GbGl*)
(*cxPze/hZXbCnA3RUlVTJJeViSZIvkdkSAWqkBtGEGsOUuorIgjVMuXk1N7eh*)
(*C9QqwSlAagz1IAH4kRoh2WDokJruc4TUwoWMDZzy8SFBalZde5XbYEi/1+DB*)
(*nbZ+LnB7XAVvO+7GTvBZpCaADZ8y5EAGfwgZnEIJYRgMcK8H+zlJXk2J8JO7*)
(*HsEQJDXGY84L28TIKXFbV4LPfMYSwCUhArGErABDVNxFFKKU/ElNwzTeWPTI*)
(*iTwnCixyGprpE2pZJ7GySmeWQ3QmmI5HTkFOVnhJn1aTIC9qpKYdMAK5nDWQ*)
(*jO3+a4PUhuKcmnmEpklq1nGa6JAWXi1JiUewFhOTSTGVElIpNpVkKsphdSVb*)
(*U8VWVoBUenwyNTaVHJNOjqnKjG+ojnQ0wcntbGdjWVvt+ObKcXXxURkBYVqM*)
(*GyXBUTwzmmXGQGachmkRj8IJVmgEUqNRQkBBavShkR8kePPNZog0hBDgso16*)
(*LNgvgQepFSlthDSD4KSm4xgNqdljKUaB20Mm/4l9xB0ag6sLmmIJ6s2tGMND*)
(*rKz1syYHFcfgYVCRGiCK5ZnSG8G/VzLowwwn4UKm8Uwuk+LlaJCIg9TsPzkM*)
(*mm9Q9KVNmSRCO3L8SlNfZLgjJ4nx6PiwDxZcc6wQHFHTDADoPYPCzakFzqFL*)
(*LAbJP6jBIwVRDDep2QWBGrr8S5tQUzFN4CTtX9G+78zkNVnDNIPIDCfEFFF1*)
(*iiKYmCboToU1UVZJjeFFwAmAVR2fQ2oGo2lXY/fDPrUiinYnnUZq6Fo6htNJ*)
(*Tc0puvgAlS0qT06S0JxjLMbFFChLUUWKxuRoPBaNxaKKUma68TFlfEIZV5mO*)
(*1FeCuvKymlRpZWx8uTQuJYyLc+NlWCowpTwoZUEZCyJQu7Tc2imX4yjT7m08*)
(*vdTP1xoUpEWT0+DlrVDx5ilu2+gwqpTP9meO7CmkiT3qmk0rLS11k5ouxc6I*)
(*u8Py1V4vdbJ/SVll2Mcdj5CHE8OM1OyUYdel/F+oFul9rCNYbPjFwzd37Lq4*)
(*VRc7xqbX+WEjNPnyKrRTp5SgS/TvCbkmjwQIcVGWoW97cQCmvT/CKj8hQMok*)
(*WUqiv1ckPFJwtbGrqGX/QZABABiCpFYMAz6wYlfU0IM3MqaZpMZZmIYnNXMN*)
(*JCK1rNNITVZJTVJhTZYRnSkxIRYTVYem1RROkKEgM7zEcKJOalHIqmgWtc+p*)
(*+Z3YD4YCqQGAXFSDNcOpTKrdTGeDNRFxrlqGRpHqewAl3bHqv6LEiBKQxGhC*)
(*YTIJmI4xKRkkhGici8Y4ILOMCKHAQKsgNepls/N5TkfVHAY5qdE0gQJaEnJi*)
(*KGNx20a3QSaEPyDjdnvUvi/0GBeplWriIDX60AqVcoLSBhXGG7t8E+N4hNA9*)
(*DWCNF09g7nyQ/fs8YY0w5ixIyvtZgA1grS+xI1W3DQS5toWsyQMoxUgJTYCW*)
(*H2wZ5j+yGvwCc+eIYe5cFTbvA0Jq7gRYfnzry9e0Uqacpp9y65KXZ8pm6FBR*)
(*EPz1IGUs4foXd8lgPQQKkxkci94LK/SKQRAHqaFtaS5S0zHNIjUpS2rIGUyh*)
(*OR3WLKfBmqjCmmIntbgYj0vqBw3WWNWJCsuLDCsgwGBYg858r1eznQ/pJLVB*)
(*VdfZExfRZdMmqaEcoWk1jtPO1RQMHFZhTS86SWBFHiKHjtZE5YyO0EQHbDKC*)
(*ACQBKKrjozIXkWBEYiIiBCJktOvH0UpS1iA1dHxJsUmNqhBGSC3Xp8M2ug2y*)
(*V/j2nBYy9X7iiN23KoHtOJFSl+iw1g9jIXulANeWKEeVYTs1354ufznVSI2x*)
(*5YuxmWvokkBhOh7Mp+IGSQ+ip9yRGDuHeg1TByKxIaUYjSuEKSZLP3Qf/S/u*)
(*dmf95Db1dp8h4qKsETKpuS2D1ctgjxHGPuLIo2/C8tEl7IPAQ3yDBR6k5lsj*)
(*5CjC9S9WmL45pQ9zuAqlYpDFTWoWrDlITWc0ORfW7IdAisY0kP6NDh2I1BSN*)
(*1NCiRw3TEglZdeoHOYam1VQnyuhS7CypIVjTQGa4kBr6R5tW0/JlrIfUDxph*)
(*0T3Y6CoEYzOgvgcQLTeFpkMzbrrjBd2bSnCMpDoOSCwQVQeBoGGadj85q91T*)
(*p68kRaQGzQWXxZtT8y+EU4PUKM2d2zY6jJ7XU5SdSzHEnkKvNNi/BLkHP5JJ*)
(*LUSO6BXPkSR3sXvVgl2KOlo71UjNTlKM94gxBKnZ/8yn7gZJD+IoH11oSM2t*)
(*1QTp50w5pBgpoQ/QqwzzH1kNciEzl93sOLI/GEjN/lOUSGrkJPlWrpdyen1J*)
(*ozaOsvVNrSMNNMnGhkAZPqUQNIQy3lNHKBWDLFhS02ENYRrHCTw6RcTCNNkG*)
(*a5qzkRrPaLCmTwYhWJPRWRmirJFaLIam0uIJKZlUkilF/aBNq+mkxjlJzZp1*)
(*GlKkRhhxQRPQ7JhmOtvVdRxEs2w5TqU2bQ2qJaheWIGDAoucqP3LQ91lSQ2t*)
(*gWQMUjNgrdCkRmkSmVDmhUYC2cZiGw3Qv6RWyKRTCL1ltnco9KQWLj2+D3r1*)
(*cdhAsH1oPtaVUk5NUnP/mSepYSVc6dFE7W3qPWsznAQlNYJt6U+tHkChN/hW*)
(*yWBH+8O1lGhU1MvgF3VwRU6V+1dgIzW7RLXJerLQjEm8FAn7vbuVEZ71aq30*)
(*yR7YToF+PDAgyRtUQqkYBIG5os2g6SjAWceJIFKzMI3XHI7URJPUtA/aYf5o*)
(*Wo2XJEGSBVkWlJiob1JLJGWV1IxpNfMcyCypcVGgkxqbJTXPfWpwcO1TI5Ka*)
(*j2jTmFBz2n1rLMOr/IWchc8GorEsr92cYDjB+gxZDjkV0GABSc1LgE1oPBej*)
(*ywtkGwsbr5ehDloa9gAJtteKcaCGDb6W2aEP9j60eKRG6c1XmNwSxkqhih0b*)
(*O9nzwHbKBRevwVjBGYfBLXmlEXpSc/ssYC6AbSrBET4zXObUiiH0LctehqcU*)
(*qfn6GRBVKSCp0SsAwZvXr9jv3e3RyxvWJyGpjgRjG3uedRT0WUdKCDkNl57h*)
(*JJSK4SW5jGCd9GiI/qfA86LAS8hhSc1Y/YiOFtFJDTm0u8q4fE3QSE1z+gJI*)
(*FdlURkumYsmkNa1mkRoCDBXQVFIDDlIbImc/5kNq+nP6xWv6LdmIr1TsYq0K*)
(*UvEZfaF+jZZM6o61blHQZ+TQlXSc6dhiklogASOkhks2cI2msCHYrWK/dZrY*)
(*NBA6Bcc3VoIJpNafZz/ak4fVRmAb0gPv3rBQiaE02o6qzz/2wSB2I2kvWLv9*)
(*LFSBO8KnTyGNH6zBLyypAW2fmj1A60/gTWr5Rz2khUZ53M18hNTsMiAdTf6k*)
(*Zp1Y1T8NwWHK6EcjIdqsb98Uur5CPEvTiw2zVhNaKBXDS8ikps/iqKSmr35E*)
(*CyA1J6N/WYnXt1PBHGeSmr67itcP9hcF1WmTa7y2bU2Ix+VEQsU0ORaXtEMg*)
(*BZ3UIM8wnIZp+hmJPkc+DkZSIwglqWletf1rBqmpH6B5xR36qO8402ANTbhp*)
(*qyN1Z5IaZF2k5nWoyAiphY/XHSDIg9QYm+kj2/YBtH7kHsHxpZXmwU9qWCH3*)
(*hvkk2BG+I2Fexdg/A4/+ES9Ss361/5RnXPbwC0JPlngRWTFIzR0+Q5xTyz/q*)
(*IS2+jRTbzEdIzS70ZZi/SbQnLFDDAbmkZr8UpoANwZ07r2/oRyP0bdYKBKu0*)
(*+ddCuP7FkRJCToOmZ/gJ8BhvUD6OJTX7AkgeYZpFamhBo8QZzpw4Y5ATGHQg*)
(*ofZZRP8iUtPmeKB2GgkvCIIooLk5WdTO7Y9JKqyp/2oOTbSJssqEGqmx6Cj7*)
(*KNSPSYwCKkwbdqSmbWqzX5Ft/qjtcDPuz1YZjtc3qGkOzbJpk276IkqV0XRH*)
(*wLQRUssrXi9bTROLV2v1CsFuFfvN9OU/1NSTPThJjSCWH/tCGq+gQicGq7Hu*)
(*wAek6ost5PFYYXkqn5B904n9NX9Sc7Cqm9SsX08FrAgh5EbqaICWjJCaXbBl*)
(*iH3H4lXaIZpAoIZj1WNZrlj9S0GqDJs7rw6FfjTi9kmZAHuBF6RTiNquiqN/*)
(*itCLOfzkmbxhIABHavSPhyY1kYMixwgcQjMeOcCpjgM8BwT1X/QNWpnHaovz*)
(*jEBUUkPHkvCyJGhHQUraYkhRvwJbknleZFleX6MHwKlBatjvrS9N1IJ4UgNq*)
(*SfGmM5ZJWpNv/UNqgbQOjJAazidNCI5eoOCmD7hE/354kJo7d1hxa46Xxuav*)
(*S/bajHqQmuObIlX9QEnxWMwu7poqLKlhPWDeuwUUx2DYHQslqWGVCivh0jmY*)
(*hZw1RwO0ZITU7IItw8FDalYNOqbS7Fd2FqTi7LnzbUr0oxG3T3IC3OkpVPuN*)
(*jpBakQXk14OHIDUd1tBsGsfwGppxmmM5dIOX6jjVoW8Ycx0emxOOwEsi2rOm*)
(*HQgp6E7FNFFCpMbx6CwMfXuajml2N1xJjcF17pDxJTUN1pDTp9jYnGWSJqlB*)
(*a3auOKRGVj9AMe7NUwLZxsLGm2eA9I8D1wuZ0JEyuZXiCJ+yy6DvI3Q/g4TU*)
(*GJzG2rsbRxoI3xek6rEl6W4mhBQOXXGQSJHCd5RtCHqiJDWyMQ8q7gedvUOh*)
(*SW3Y6JUl5Hw58o4tQ5puZegKPQ05ch1IsQtIalilxS56dC+AzFPVvZqMu9N0*)
(*6xI2RqzW5ZMwggfKcEKkgcaMDLNWE1rClbAlZFLTxU1qmoO8Tmp8FtMguq46*)
(*ApkyyETQgRjGMYbW9jfjcBJj25qkM5r6AWGaKKKbwnRSg6ceqTHYHl9b90gk*)
(*tVyHYM0dATRC6ndSczReMKCkxhTaaIQ2+47HaUIAhSM1bAjYToecZsr06x6G*)
(*GakxeesSoRjddU1I4dAVyz4VtlXaw9c/2MPPh54IEeXJZVhxFIub1KzSI2CF*)
(*PQSvxluk8h9w8c2au3GRZZgVFL26OnIdlNQK8m4Eq7R6vRAwzUFqoeuR0HAc*)
(*naZbl7DRYbUuhHaRlZy+dYczBTRmZJi1mtASroQt+f/svQe4LVlZJnzo7hvO*)
(*XpVrx5PvPefm2H373s6RTtyOdNNNamhopEmigAQdaQUVQQcxgCgmMCCggzKm*)
(*RnBgBIaZAQRM/+hjnF9HR54xPII66vxz/11Ve9dZe4WvvrVqVdqnXuppzt17*)
(*1be+9cX17qpdG8/U/Bma5sRfQ7OiOx7H/41oGhnTNMtetKy9xNpDyN74x84E*)
(*YuPvrHl+MKZmXkzT/JimjV+ZMDVnytSsKUHr2NUzNSPxhmFq1JTqTC2iXbR0*)
(*O5ETvQ6dog9MkhLJFjTPvMJZSm6pmXmXWUL5DblQMjO4CLWJClNT6i/JKYui*)
(*n1RjmJpwe2kEXD/JBbMqWVyc8L4oQoHKwTA1ZnVCnqUqH5jUIIpgaryvhUyN*)
(*NmDm/rCEqAYmMihfQ43MkcKMw2y5mwtMuOZPIrNMrSMCzNTo21nTv1XDUhjM*)
(*jEpEnakxkQZErExbmVYa2aeRqphT5ixrtCFzBzJBkEwtuhwW/c5ydEQ0LXrO*)
(*YHRNLaJp0U8sR48XjB/SOGZqi8TaG/0RPWd+W+xUspeStSD+nbWEpkVMzXe9*)
(*+PfAJk+Zrx9TM7JPTiBjarNTipianTC15Ih+zIA+EqYm0t6GjhyAqwFfQ4po*)
(*eUy5K62lwmUKYxbZVlwIDC3SVpuUxdRoslYaU7OytqmqMKiP8C3hvrE441QC*)
(*hosxq2NIXB75zIvGqZpxmpaAiBq6KlMj4P6toLgqWr6eGvBIoekwW+7mouZM*)
(*jTlR6JEO9WOdSKaWn6zJVCIqTM2ajU9hqYdnF8rJk3p6eYpJrnnKGm3omZcG*)
(*Q9b476klf6UPgve95O/kp7ys5LEhEVOLiBLFm6L78ByHooC07ISpTa6m+W5y*)
(*JM+KTJhafE2NTO97XIyPTJqmFpD4SJalUtFBaM8e23/GDCu+7ujMHrYokyM7*)
(*EmKnxyxTm1mm0urI7DZAOICWw5sRnhoAo0Pyomxzy8+CMX4mYGnAu+lbss0V*)
(*cu0G1UbOoqFSulIMU9ProfhVC3dizFoAj+TUDWk6IvnouAiz1AQyg+RZMr8/*)
(*tGmmptAxFECyaprsLNVl8kyNR4f6FIWPbcxmMnOxwNSAfN4mgKicKmWWVnh2*)
(*DFTt1nQU8bkEDNqVNDJpGtNiZL0GM7vsdVnIZU7Bn6IdcvgT8WtBO2dyuqr1*)
(*diBgO2DSiiZr7iwoppYQtMkf0Q93Tb6GNjkSXajmZycPIEyO6QPk3UQAz9SS*)
(*Wx8T3pe20pSpdUhE1gqiabABkwGyzVtVQZj81BxH1gRMLaZpM/rKVFYyDv0u*)
(*kP50pSISpiabVxXwDgSzKFUAcjDWk23FYfvw0lRbp1AI0jhCy2eOF3ZVWQM1*)
(*6yNaZ0a+0OyAR/KoJ7SbzBF8JBdhFoPIv3mTrS55BZYv/BCefzG9RcG2JqXT*)
(*LFljloD0ODIqGDBLk83FKCOMK+R+FaN2CiB0gfF6poBVAiTz9tGDkt3mACUz*)
(*NdqPKZgHiSSf+2Gg0WuAMUDIwcklPCVP1BGVSMYsRG4O9l6szFMgaS2mwNyb*)
(*IbysRpM1VwTqxkZavj39Xeb0d5uTp8dPjuiXvxw3+ZG1ydfT4h/ITi6oJTdS*)
(*zn7oGV9TkzI1tV4rSyXMKYui5/dmRHVhIFOy1rGc9Eh3HyL9Jwegr9AystHZ*)
(*GS2iZkKzC52Ch1A4MEs5LsOUL3g5SCUxCW4c2KquyNSYTzvNaqsdYDIf5ddB*)
(*KARWtaqCA6PoCISDHM3U0kfpbn/OVShTw/iOCYyc/k1Pp5WBK6TBeBaKJVQX*)
(*4JXJVAxYo/B1oTQiByAHs2TAbpkTtcAgNXvaHZhWkt6hocHUOgiyhvQgH36L*)
(*8t8I4FOACRX6n8i8AEwHnMvMkr3YWaaWnttGeE4oMTXmshrP2ugXZ3jaRL49*)
(*Q9Dow3aTX0qL/54+CjK+oOZGX09z0rsoY3np161Iwsgktz4qN1rVYmuJCgXf*)
(*ApR0MAKKqW0fkmtqM0sGFBZaBhicuXY+/YVml5UjJICCJpylHJdl2gdQmCna*)
(*MMpnaoRD5uAO7gsFLVOzcEytbm1RIwLxpwiJGPM6zNTiN2Z/9ETA1IjkUADt*)
(*F0I9Qhy5Z9MLLV4amW72hFMUF8+yWGWinXkRkCNLEJnCMml8yQKWLHsXn8KM*)
(*nHrmbFOQmp1magxNy8PU8icdr2qH+k5cZizJ4oRJH2TUyWaRncsnaYbwyePp*)
(*4i/gkJltlYKlWmhByNSE19fox4MImZolY2rWDFOLJThjshZfSkuO7RspKYFR*)
(*r4xugCTMjY76nVSp2FpZOVVVfE4Xb88eAnMwSwZ0FloGGJy5fBLvVTqlMDXg*)
(*XWaWcryWaZ/MJSMDrGSmxrsSmT4tU0NWHmRgGLJNZUAGrYymWapMbfL7kvFn*)
(*gcSOnnc1UzFlNE1hR8SD9xrvOHx9VtJEJl8YSxozYnKKcDe906fD5/KnAGtk*)
(*3s25QNqDmUsGJPPxgNehRQre7PStj3o0Temamqq2tJ4deUbzgSGLOkbPzPhP*)
(*38VEbDoeaxCOqWUmQgtTYDsa+8BG/nZHh6FpFFPLIGv29AtrtIzZg5EZxUJ8*)
(*YDupzX30mv6tWmyZE7WjsYiNNNIcwjQUC6wxUwPulIPP5WcxWJbhtcMTZS4Z*)
(*GXJlMjXYj8ApHQlTY5psy9SslqmJhglHqjM1Z8rUHHtC1uxZpqb5DWiCA3Cu*)
(*Kefyc8HBrz0dJqdIPZia9uowltSTD3z+0IKB0Ow0WROCp2+yLYTZckrQTE1V*)
(*IC1HlgLCsoPMKXoAlGItU6sOZpha8qgKkn5PTXQD5PR7akJRU9rGFjG4MitB*)
(*u9jm1KHCgswsGd/jMgdnGoQpMrIeKnRKHjA8jpnFbGUG1g5XPGFRFQKeqOSO*)
(*D/gxczx8TS0BUmxOnXNCI4TwlSdT1XICuCaQhTf9oiJTcx3ixmTNyWJq2Bvs*)
(*8c7NPD2nc/miAQe/9nSYnCIIppYqDEjIXCPzrp4XZLMQsE/pyW+ZmhJoX6SW*)
(*h7sJf62tfKZmKqN5IbIUICLgc4rRWay2IlMza94djvxMzZp4JPWjmKnFNC1i*)
(*avEDIW1AYN2YWk7MB1NTbS6kXKZGf85WE6aGmS5neJff8fmIwpzSaZlay9RE*)
(*gAOYJ1x8g0AyNTu9phYf9mS/YVHXznJdU8M4N1NCTufyxQQOfu3pMDlFmszU*)
(*+InyezlFy9T0QNsfIGVzxtTMJimQOMJU5ca1TK0yAEzN4Z4fIiNWCU2z4wtq*)
(*wDW16UH/1JqUqTFkLf9KiQryT5fMaFXH1Pg+CPe4TDvImovwFF6UrIgBXhB2*)
(*cPp0fpjwJrp0mEHnAqC1gqfLGW/NYmqZZI2n2MYVzg8Nf/FGA4QAWZAzWmoI*)
(*PaYGjJGeaM2QNdtKpRDwyIasuMlG8h5k3I2ZFNDEmq0qslqaZzpMTqWz8wZh*)
(*XuQDHgOZYpleUFojA4yXZadra9IiAW1/+AZIDFPTLuZIDY3IN56keSO2ZWrV*)
(*AWZqMGb7ox1fL5N/SW1C2aQ0jWdqJWxB+WDOWeFpyQkqZGpm64YlYZ1pTaDl*)
(*y3qc8O5EpP5CH9GFRdaphRoWB3rJmWvMo1KDmFoHcVmNbqMFKZwfGv7ijcZI*)
(*APyIj6UmAij1MppmRx8MbmcNMCwLFnUpLYOpIR0E50VpfmSqCl5DJfmZaWLh*)
(*mBqvMDMMr7as/udcKd/FMuXD+d5CA7z9ZWQtk6kVlIbCCMmfaHoStLMemrRl*)
(*atWB6V40aVJlauk1NcGVtdlrarYtIGWyblooNNoBXnKCElYBK2CwZcB7FX57*)
(*IOtxyLYLIx2WSpPJF2pYHIR68gOYkRoTlZYmKYQRBa+FUEwNvrJWxH0pQPjp*)
(*QUMxodHoAUgiUELolgxZqYebwvT50LmZ2uSnTlBX0DAOgisb7cdCCxFfIZEa*)
(*KsnPTBOrCqaWWXtlp2AE4pXR0KQFDN4LsobCMDWGoMEJmKelCiNEz/XC4MHE*)
(*knbE8hJE720zNYuw2yr+lDbyDYLpXgwLU2Jq6ffUooNjasz31NDdVGEhGm/x*)
(*wZyzi9GSE+hlvREw2Zo/ceC9CpCtwgpmys60ZOGHZrCGxpG5OiKB6kR52ooe*)
(*aG/yhVq4ECJnarLHLKdkzazCRqDhqcw0BPzIGDyXLWoGWanPbArRlbDIFmQy*)
(*evYuDaCdbc8VHcnjiknyx+SZWOC9j0If4XMZjgGDYHTgUyDn7JicIlUwNZkF*)
(*co6UrVfPhnrbmxYJ+G6ixNRgXzMVQ1u3/IkGZAQmVlNoRCyUETRTo1SSrbTQ*)
(*KrfTAFAkptllM7WZa2rQ99Qye3FpyzdYgXnJCSosyEy2AomDbG3CtaSzANkq*)
(*rGCm7EzLFPoR1tA4MleXvksXVY2JKskXImFnMqTuoBvrHg5CppbfWcLwywMN*)
(*rTLTEPAjfW4JoVsmZDU/ozfEXzIj8a4hJlmT3wF1qIdfCTsXK8Ge/rAMdSRP*)
(*GQGusfFuwicCHAMGwZQU4dR5ZsfkFKkHU1NCpjQ9ZRhUss+ZGwgdwdO0pKHI*)
(*rqYJJTMVQ8M7wgjRCBJZTJKCmVp2LrRMrTrAREnY8mRMzYZ/TG36PTWzTC1n*)
(*ucvTDjIlJ6iwIDMJCyROZrdKIFwL3O8M9rhMzUlDmJoplN/xGUsKXc83C+bz*)
(*T56m8Z+C5ul0QoVNQUMlRgdeAuxH2ub6hqgf4KYjgxN/0TlqNdMj+pVOz818*)
(*UvGkYUX9x0mYGkXWkqtskyf3ww/ox2RcZsgVWh+E+Whwajq1gQVaVTM1XEKj*)
(*zCIUqGdGvX1OixS8L9LLakkf2b17t5CpAX2Z3+hmOoh3ojBCNIJEpie+C8iC*)
(*Hz4XsM90hICp0cheWwstZBIluj9mMzVbmalVtfAUedpBpuQE1S6TLmuy9Odz*)
(*TZZ6/FoyU1VmYVMJTgshLVMrEnwsCZ3Iv5X2U+HdjzxZw/RWDZ2NQEMfRgde*)
(*AuxHU5lSN2Q2HQEml8+cMTuz4mNC0zzPnSFrkytsnrv98qRnOfG5McUj/GGj*)
(*ntGfmXSZIVeEN4UpyeSgqakz04o0k6nJ5AsF6pmxZWo5wfuC+RgwYWr0pTSN*)
(*yMcztXSYMEKUIpbOWYvLC1IMUxPWDYlcO6VphGTv/WTyFWYsHhj1qtUQ6If8*)
(*GICm2TRTQx0FlilGrHCWcvySijK1Um31CIKpMe8iJ8IYjUyvqjANUdgcNdZI*)
(*j5f5kZ9RST7wLhxgeSRjTsHv8DXCRiYNqPy8zS3K+KpMzYjmvM4dEc0UDgNG*)
(*5tGBl5BZEo14sG7IbDrbb9mOlVwMcxJS5o3Zme3FX332Hdd3vcAb/9f1Yhrn*)
(*Rcd4lO/Hh5fQOGdyX6QzuQc/+uBwws6ig76mBtM0C8fUMBCepW1PoVg+sFW1*)
(*skRlmX5FljKWnKlhpuYlI7epwlUjAVtAuMZMdxBJshexBQL0Nz5XVWBiJvEI*)
(*c8MG/XEf0l88NJhaZlRnLkf4lmXN7GEwAjuzv1gkC2/ahtkKS5gacmkw4EUV*)
(*hPprmIlUN4DQiVAlTcOvqwSnmPVvHg1JDqYGTIRUiYgaHD9jnjWmg2USmBnx*)
(*8jNHajM1PT/iT+FNoTodIFO4cWJmYezfkTO15CNQ5u5HU2ozCvNxSAM5LL/R*)
(*GCGYqpjffXUDjqk5tuNOmJrjjgmY5/teEPihH1GziKO5ftcLur4Xjv85ZnKW*)
(*69m+7wSBGx0RU4tYnesmPw+z/W1pKyVr3NfTYJqGgSxygEDKH+3Cc2Xhp6eY*)
(*ELKssRrL1AAzAgrD4zFq50SmB0vQoWhkhp+SW4vWLXPGzBQg3JVxWCY9UsbU*)
(*yOy+iOCZ2sxEGSUL76AKg1MpfirRUAYmMJIXFckaChUukHFBcRMZ9C+fU0rn*)
(*AvFGVwBhoZDNhVRGWIiEkk25RrYQPvuQooCRpTE1oRnx42UnqmYiIJB5kXk3*)
(*NTvD12RfK1AyTqbCGNcLh+XUgZ9dJlNWFVXjpEFAMbWIX3nWmIA5Y7rlRRfP*)
(*IpoWBt3AC70xOxvTtLDnd/tB0Bv/03F92w/dbs/vxUc39MKIr40ZXkzW4oN+*)
(*utWEqQmpGbpVAd5RStiCWpIwBYShLoNsjJWVNfCiSFZjEuqpumR4aZisB85N*)
(*BvBxIhtZHIDptHUoR3MlMCrJ7JzH/qXtTvEa0oGaOTKNZCRTU00upErpXHDl*)
(*kaV/OcCoV62GQtB+pHVrmZreRAb9y4S9ak4B8ZaK5d+Fl4BXRihHqIkR18gW*)
(*wmefhii8ApjaixdOOGicwp+lkYwygcyL/Lu08fmnKyOf0KUKvOuFw/KokVqD*)
(*EajndG01Goc0IJPbHR3XG5O18TG5zTFiakHQ9cfUbHz4XSfsu72hHw68YOCG*)
(*A7e/FCyt9pdWusOlcDD0BwOv13eD0PZ8y/WIMz58a3zYnpXeAzl5aP+sDshW*)
(*BTtIKVsLaknCFBCGOgNZOjBpDmQNvCjSKKZG/53pU2YKjM75IZtRW4cylUeC*)
(*UQmws7YLytmg8nGYORiTAgTB1GTjlayUqZIsv4RJXVWYYdSrVkMhZDHTMjW9*)
(*iTT8C5ylXXlI1UxNVU/jrhFWDIPy6XhWqr1IVzL6K52VGTblJCNftxc5dHS5*)
(*TOYAjOuFw7SDhJ9XL3M1zmoQgKXZyZej4+eCJN89cz3f84Pof6Ef9rzuYHy4*)
(*Yd/uL3nDtXC4Hg7Ww/56sLy/t35wuLbVX9vsre4Ll9f90cqYyllBb9EN97rB*)
(*oht0nKBj+x3LJdbkzkrUt7aBJQBFEp+tBbUkYR2QVQb6FVnW0KfAWQMvihTM*)
(*1DDGz8x63j70GCY8KtzY0ECuHT5RT0LlyJ+zgIT0lPyOVrIwnY/AeCZtAaaW*)
(*rlG7Q2WqlErjsxjOuDKBUa9aDYWQeaplanoTqfo3s0Jql18g3tJs4t+Fp8OU*)
(*Dj09jbtGWDEMytdgahojleoGkQC5IuNIFcish3g9MYPxrhcO07OYcLF6mVu5*)
(*44oDvDQ7evo+/QTH+CtqMVMLu1637/WH3pij9Zac5Y1w49Bo4+jS2tHR8uHe*)
(*+rHB1qmlrZOjAydGB0+M9h/prW6OqRzpjvb6/d1ud7cT7raDPba/13IXLadj*)
(*OcRykgeKNIapqfZQWTUQBhj9oixr0r/hrIEXRUphapkjYf3TfyYGJ/PL1DID*)
(*o4ngcznP0mi/5/S1kpHpZJQN5nMWc/djzhSDs5vRR4YKwwyjXrUaCiELmzoz*)
(*L1WQ2jM147EBywQqBqyDRsXLFFiQa4QVoyDXZ1ZUXjGlQt3h6i0sGfCvHrQF*)
(*Cr3A10ODESWbVBbtRupzKlzJX7Ao1RObAtnq7PTGRze+lpZcTosQBqHf6/vD*)
(*UbC81l3b19s40D90YuXY2f2HLt84cHb94Ln1S288dO350zfcdemNd1163e0n*)
(*zly3efj0YOOwN9q32FvZHQx3ub1LnO4uO9hNvD3E2UvGZM0mFtfB4NaGzCy8*)
(*Bwm6bhTXcxlVyeyuT6gYnDXwokjxTA0zUqa/0LmkIUxNyVz0iZiobhD4nWqe*)
(*1cn8rgElOydjYJ+mouicFbXZmT7LvCVLc1WVhMJlqDDSkErWLRdkYTM3NM0q*)
(*kalZ1AeP+PFktnkZUY9ksb/8hUtpPFBqCnKNsG4U5PrMisorplSo8aWDcFBY*)
(*RgEygepNizLrF5nreeVlwzSm03AWLE3j3EaAX13aU5LfghkzNd/zAs8Lfb8X*)
(*hr1u2O16w2GwutbdPDA6cmL19OX7r7z+yDW3njx13daJ6zfP3XHsrudc/+jX*)
(*3f/ib3joRa978OGXPeX8M86dffL+I+cGG8ftpQOL3bXd7vASp7/LCncRb3fH*)
(*2dOx9xJ7kcifKQJonukgvAfxdaNopkame9FUpeTmZKFicNbAiyI1ZmpC5/IK*)
(*zxlTs+buOr5ws1qTBeJNTfeUzGqTRnKlTC0JwuTIAN4XfG7mdKWwyOTRsBwI*)
(*Vz0fBC0FKYAKmQKTO4B6Sprz/SWPennGwDYnLVMDh/FlFik8f0EDZOY5V8lW*)
(*eRSWlV9mZM76zCwqf5Ex5bUagt4y0S/SNM2dMrUxTesGfr8b9HvBoO+trHS3*)
(*DoxOX7Z59XVHb77t9K3nT99y96XXnT9+20PnHnnlPd/w1se+56de//b3P/7W*)
(*97z2tf/2ec9+xa03PHD05E1LG5fZS0f3djd3O8sX24NLSPeSjn/Jort7MSFr*)
(*Vock+wuL1UeoP5+PsmFIDxaaC8LU4xOZUZUgCjKcNfCiYBsK0xZpHA2z8zkr*)
(*VEn2Vq3QCCUrRE7jGNz6IjVJxmBSIDOehUgHm2JqYyNNimlZTE3Pm7y5cmpY*)
(*HGTNaJ6uo9EghmhLEWCyBtBQKThNLRkzKTwAlkBapgYOU1LbYDUDhOcXUqgv*)
(*LInrhZMKI0RJsdQspiq8Wa/VB8IOQjeXCVOLv5/me+6YpvXCMVPzh31/aejt*)
(*39c/fmL9hptO3X3vVQ8+44Z7n3bujvtO3/OsKx577VPf/t7Hf+6TP/DJ3/+Z*)
(*//h77/3Qf33n297/mpe+6f47Hr309Pnl9SvI6NSe8OAlztpF1ujiTu+ixeDi*)
(*RW/XorN70d7biS6rdeaSqclKAVAZ8KUDzhp4UbANhWmLNI6G2fklAKczAxq9*)
(*I2rBINObDWJqqilgiKmNDeTEZM0mnZmHlgiBTFVL1GFlCZsn/fNoWAkK4mjV*)
(*rpo0hKkpdYpMscgl5580jwSNIoOELLtNyWfmUiqSZgu1UDgN5Ll4yXWQkzlF*)
(*ZmG38jG1VGDmLBrKF2ecQgForsrUemEw7Aejgb8yCtZXw6NHVq688vBdd1/1*)
(*jGfe+JxHbr7/ocvveuDki19911t/+JVPfOZHPvOnP/e7f/PE57/0oY/+/o+9*)
(*68OPv+rtT7/75Zdfet/S6jV7B5dd4h+5yFpfIMsXdQYX7Q0v3rt9WW2xY3cS*)
(*sgbrma4OU0zwHtRIcCSEdUBYGdL14usGnDXwomAb8pLxxtEwu1LiM/JrztQa*)
(*XUZqDplt8eGHGZmMwaQAsi7JTlFlahL9x7kwZmpOzNRsPr8w6QaQjsyczZn+*)
(*GgWhchRxKa3aukGawNTM6oZfcmZTLlSCRpFBgi50qvJVwx5ZUWnFDBbqclBE*)
(*lBYEvOuFw1TbltkArrZU5gGsOczUnClipuYEnjvshSuj3upSd99q/8D+4dnL*)
(*Dtx2y5lnPv3Jjz7/jhc8esuDD565/2mnv/NtL/rVj7/zj//nR//iK5/8i3/6*)
(*xB/83Yc//Sfv/alf//bX/8jzn/aaay9/cG31uk7/7G7/2EVkY4GsPKkzfNJi*)
(*90nxZbWIrHXsPellNUYj2QIxvtbYM1Tlbr7FY9Iczhp4UbANecl442iYXWkW*)
(*Rn7L1HYgbPlX3owbHL8B0OhBRIupgbAtMj7MMDVGVWFDZxabM/2RGtYKBgla*)
(*CkLBoNhGzA6DzAIeoCQWGW/wAMzUeSRoFBkkhNmNlI+Pf6aMIAsFxpuqYouD*)
(*xhpLUwl4F+N64TDkAtNZMlNYCbWtVJkANJd97idiak5866M36oero97aUm9z*)
(*fXj04Mq1Vxy9644rnvXQTc979s2PPOu65z7zihe/4Maf/vHX//YXPvC3f/Op*)
(*f/jfn/3K//nMX/3jr//OX37olz73jrf89Msffv0t1zx8aP8twehqEpzcRfYv*)
(*kNWFzmhhsbfQCZ7U8S/ueLuIu4c4i8SOmRqxaY1kC8QUE7wHa5VTKTLjGc4a*)
(*eFGwDXnJeONomF1pFkZ+y9TmDPgaTkBMB1kxcwEPnEqZwZmtDHgK38Lg08Xv*)
(*xisiyZGPqfHTwXIgrST6Z6on07BWKIKpWZWWjgqnzok0lfANKz3RSLxhTIes*)
(*CbCeGmuEQZtOVb4SU1OVj4xGbdcbB2PJopXBGB/TSjqzD8ISDhZGCHKB6Sxm*)
(*a0vTi5Ws/wrJmpCpBb7bD/2lQXfM1NaXewf3LZ06unHztafuv+uaZ91//cMP*)
(*XPOsp17+oudc94ZXP/Drv/g9/+uPfvX//v1nL/zrb1648Fv/9K+f+bO//ein*)
(*fu8n3vGhr3/Bt9x10wtOH7praeVGv3vZXrK10Flb6CwtdPoLJFwgwUWWv8vy*)
(*9kQ/r7bN1Owdy9Ro12RWHjhrlM5lxvCS8cbRMLtS1jPyW6Y2T9Ao5tAGA0PT*)
(*0GQtMwXILDSiWph0avVtm6MlRwaATiG0ACAH0kqif6Z6SpEwZ6iwdDS0ajGp*)
(*p7QKOnON6ADIwbwrG8OvMY+2vGRZXmcC2YgJB/wpeP2rDV2NNWpDdvFFphLw*)
(*Lsb1wmFKKWa8pJdgZLPIDA+eqSXO5V+cMDXP7QXeqOevDMO1UXhgfXjy8NqN*)
(*Vx2797azT3vK2YfOX/b08ydf8ejNb3/j8z/7y+/4+99/4sLffObC//7NC//3*)
(*t/+/f/7sX/3txz73h+9/969+yyu++1kPvu6WG154+bmHTx49v7F01uke2eNu*)
(*XGQvLdi9BStYsPyLLW+35e6Nfgg7Uif6koW9U5kag8z8ArIGXlRmJeHDCWlJ*)
(*DbOrZj0zrGVq8wQ+hDKzQBhI8XuTWwHBQ8zUZDoArmSSBR/VwlzLnJEIySN9*)
(*TY3YWYLF8mVMDSMk00p4gZkWmG9UuPaGmp1ILkyXr0OevUSmhGRRdWNqVtWf*)
(*mhZkljwoOgKFW3qhC2BN8FU3T30uKCsbV6z4MsUMkLlVAMdO7n4MfXfQ9Zf6*)
(*wZisba4Njh9cvfbskafceNmdN52+5+aTT73l+Gseu+s93/Wq33jih/72dz98*)
(*4Uv/9cJXvnjhX3/7wj995q//5j/87h9/4IMff9O3vuuRV3zHvc97/MnPft0N*)
(*T3n0+Olbw83Ldw0OLISrC95gwQ4XbH/B9i623D0JU7MtNzrGGoBMDeN0vAeL*)
(*iB8NwFVOuHeCmRom42j5mA9nYBCVUonMepk+Gnra3E2/9N/5l8+jDnHVdMCB*)
(*kb4r3mBsXzgDmRrnH+GkGG/CWSlbHf5jCmYi9pTZxcpSDC4OgJ6ZcvBiMbqp*)
(*2mSeQC8/v7W1py4C+Z0rs0Pl8UOyHqqcqRIswaIqBjBGT3OSj6nhZ4GXprQo*)
(*5hTGLEKBeu8CpwD6KA2TDUaC38AorSWP2hj1jKxRJpbXzeAUZpFpvUzevT2M*)
(*+p5av+uP+sHyMNxY6R/av3Tm+P5rLz980xWHb7/m6D03nnj1V93zw2955RPv*)
(*ectv/NIP/cEn3/tnn//gX/3eL3zpj37xz/74g7/z3979Sx974/e953nf++PP*)
(*++6ffN7bfuJ5r33z7fc9su/szXvWjyz01iKm5nQX7GDM1J5kObstZzHWyosv*)
(*qyX3QGqulBmpZLrMwUWD0YTRilm4cE+IsQ/BPbFEFUoVHq+tKZT/oV8JizIL*)
(*406hJWhITuNKNpKPPXawhKyRmWtPFiNfqB5GZ6LF1GDJMqfwZokXsr0uQM+C*)
(*0LiAry3gxOHHNAhkdketJ4GxA/BZpTG9VRQT9kGNAiIczExhZI20zEKZGqA2*)
(*XdaQUwvV5iGMFuFKNQTCysg8KJOpbXMhU8tciGwtjYOwQtYQmRoirxpEl7Pc*)
(*iKr5fvRjav3QH/aCpUEYPVRkbXB0c/nSI+tXnNh/4+WH7rzu5Cseufftb3j5*)
(*u9/y6p/93m/8pR9+w8fe95b/8kvf81uf+MHf/cy7vvDZ7/vwR//Ne376eR96*)
(*4ms/+p++4eOfefzdH3juV7/m+K137zlwYmG4vuAPF7zeghMxtQXb2WWnTC35*)
(*oHungu9B/D+R2QfPkpmkyIk0Zi8CGApWxFWzOYPxfs3Uz8wewX8kqBTP4sEy*)
(*ptaZuUtQqHbmi7AmcIrhZcqSkdPQ6kQ/ozb5nhogsyDUv1E2CKklCQd6QOOs*)
(*jek+mRIYO/ACKzEOU+iEBSRTQmbtpWcxtUZhkTFuPdj1GosCaqOsCAvHE8Ut*)
(*Fqw/xoNImbIl8+FdPlOrW/2pmz5CwErydziKpdhTpua5nu+GgRf9nlovXB52*)
(*x0xt30r/4Pro2ObKmSMb150+dMdVJ19w/22Pv+TZb3zpM9/0sme8+eUPvf0b*)
(*H/mJf/uSn/+hr/uV9732iQ++6ud/5rH3vffhT37yNb/3+2/+4//+XU985EVf*)
(*//pjd933pMMnFpbWF8IxU+suuMGCQzE12/It4u5YpsZUKj4fkWUEqA+MBCBm*)
(*kBMZTHxtIPmXEaaWpxrUv5Lge42SQD7wZKFSDFOzZNfUpl/squyamiXav/Hp*)
(*L0tG7sSWqbWoO8j8MjVLpWrJTsfUXmGJMKW2kcovmwVwfaoDfjlAbZQVYeF4*)
(*orjFgvXPtCGsA3LJjA783gazENla8Jq01V4JgNF4miaDFd/6OGFqnhv4KVPr*)
(*rS71N5b7m6uDQ+ujUwfWrjyx9eRzxx+6/ZoXPe32F95741edv/rR2898zYPX*)
(*fNNjt731Nfe+81uf9qNve/Cn3vX0D/7Uc377c9/81//znV/5ux/99Kde9fjj*)
(*J++59+IjxxaW1xa6/QU/XPD8BddbcGKm5oyn3sFMDSgRqmUEXx+ARMPXK6Y3*)
(*lZ+5/EdJQCLknCtPdap/ZSuuX8skM8J5P2KMRjK3N4oPfhROqqFJZkbI1kg4*)
(*YNK8ZWot6o/8zYIJM6HAqkKRzlaN2bNL2exE+CKJV9ts5WdmAVyf6oBfC1Ab*)
(*ZUVYOJ4obrFg/TNtKNMBs3C8lTALwciBNWmrvRIAo+kyNS8I/G4YDnrd5WF/*)
(*bWmwsTzcXB0eXF86vrl6+ZH91196+CnXnH7gpnMPXHf6/iuP3Xd265nXH/qq*)
(*8yde/sCp1z5y2Rtffu4H33z7L7/3kT/8wrf+45fe9Y//64c+8dGXveYVW3fe*)
(*sXD08MLqykJvzNSCBc9LmNpup0im1ohwAkqEahnB1wfAMpkTMT0iZ9bnAU3B*)
(*jLQtAHmE17+y4XuNKcmM8AKYmk4xoVshUdn7qaYYD2aAhasM0/EtUysJ4gZq*)
(*CPNtw/zNgk9MXmBVoUhnq8bsYCkTz5VnOqHaZis/Mwvg+lQH5l2hGpm1UVaE*)
(*heOZsFESyOufaUOgnmfaXGYl/CwakwKaNLFSVagzbDQVpja5+3FM1fwpU1sa*)
(*9FdHwzFT278yOrA6OrKxfOrA2hXHN6+79NAtZ47cevrg7Sc2bz+2es9lqw9e*)
(*tfasG1ZeeH79tc89/EPf8uRPfPBFf/7FN/3Tn7/jb/74uz78s8956fMHt92w*)
(*cGRrYW1pod9dCPwF31vw3Jip2R3HLpap1TyigBKhWkYw9SH5lUPALJkTCatf*)
(*JXYugqnJ9l2NiCVtqPZr/O5UJpkRLmRqSOGE27FA++fojsftQ6YqE+QazRFO*)
(*MR60EYh8NyJUpmVqpaE4mmbNuxnzNwvGPtrZWgSEhUjpdGTtteR1L6fayNn1*)
(*ZgFcn+qQ6UemZoo3KJIiLBzPTKckUMOGsikwESu0EmxtjbVg0NAyVa3ambOj*)
(*2kpM1qz4B9ViphaEYdjrdge9XkTWhoP10WDf0mBM1o7uG5O11cuPbFx7fP9N*)
(*xzdvP7F11+nN+8/tf+Y1+55z49pX37P15pde8fNvf+j3P/b6v/yNb//Sb73p*)
(*v33i1T/+Pbc/6+69151ZOLi+sDJY6AcLXX8h8BZ892LX2TNmanbC1OLHP5o1*)
(*YiMiCigRqmUEUx/miakxahtxd8vU4FhK0FymRjjIRPFvwZpkrhHQgZ+L0QcW*)
(*2zK1nMDTruJomlX8jQHVQphcqhKYZNHL1iIgLERKpyNrLzNjzvXKioyeNGAW*)
(*sHxNdJD5kflDFYwOwpVqCNSwoVAHZEYA6+IhnEVjUlgTjXMrRLVqZ86OaisJ*)
(*U7MnTM3zx1wtJmthOOh2R/3e8qC3OuztW+ofWB0cWR+e3Fw6d2j1xmP77rz0*)
(*0INXHXvujccfu/3Ey+469vqHL/+R19/18fe86L9/8k1/8LHXf+EXvvqXf/ih*)
(*b3vF6fNXL5w5vLB/tLAULvT9ha6XMLVdrr1oxz+mZlnBmKmRiKnZxOJ/5qgo*)
(*49QBQGYxyYjMPtkUtATALHAxkdUEI3YuaP9jBI2IJQ3Y1M+TYWKJPgsGybow*)
(*JBOoamo+CHMyNdlbsEDtPpiOBPIrK8FbppYLSpWnuALFh+U8IX+z4BOTF1iV*)
(*Aels1Zid5GZqeUyKr/x6gF3PFF76dWvWoUJHw+B1kK1UVSCvP6JQ6zM1XkNA*)
(*Z+EsepMCamicWyGq1TnTaOgeFD//0XEdN/6umj+ma37g+2EQ9MNg2A2Xet3V*)
(*QXdj1N1c7h5Z75/ZWr755Nb9V5189PYrXvHA9Y8/98nf/lW3/MBr7vmVtz/2*)
(*uQ+85g9/9Y3/8d0veO+bbn3zS48/emd4zdGFo2sLa92Fkb/Q8xZCdyFwLvKc*)
(*vY5NYoroxUzNJ5YbM7XJofQoAD3j1AFAZpHZooTMPtkUpACmljm1EqKbcGPg*)
(*t0yl0br6B5IeCmJqcOPgjanN1PiozjyRVgzQGakPfo2Z+gj/xiV4y9TKQzlM*)
(*bf6MSXYAU9OeneRopnmWjC8yeQC7PtVBuBC+JObUwfhKVQp1LqbGzAgIxCBP*)
(*rM5lgSoUmUZTYGpW/F0113U8b3xEfC26vDYma34vCAZhMOoGKz1/re8dWAlP*)
(*7x/edHL/A9ecfOH5q177jJu//YXnv/tld/7I19//79/6/I+84wW/9s4X/Ojr*)
(*bn7jw1svus2769KLLl1d2OovrHgLQ2+h5y6EzpMCZ7cXfUPNji+ojTlaSGKm*)
(*1plcVtt+knYestaIiBKmOZPswBhMfeAlAGZhiir/T6uwoldnptZQEArCAU1n*)
(*amNodx9+pNBcsEz8GmWzy+QDTuE0bJmaGrRLB/89NYMliHAwJbkOIHPN1HJO*)
(*TfJ97Km9XqDIGATseloH2QB6pBELG1wp3oZCHfQyIm0EQoEYaBtzLqtT0cg0*)
(*GrahkJSpeQlTm5K1+Mqa73d9v+97w8BZCux9Q//ExuDaYxt3X3nskdvOvfLB*)
(*m9746Pm3vOj8d73s/Pd97fm3veTGb3ve2a85v/rsKxfvOr5w9b6Fw72F9WBh*)
(*yV0YumOmdlFo7/LtRc+2nPGM0QW1MUcLOpbXETM1Z/ZomVpG9mFmAcxCtJha*)
(*bjtv37QGByqxpjfH1vhWyfqAUBAOmAOmRrhNDuZ04TCifvejJbde5in0FHix*)
(*otMTpjY5yoeqy5qL4miaxbH+ObMnmXemlgd8ESttXqXKrz0L4HoigUxb7eDp*)
(*cDCyUrwNhTrkzAihQBh4gwPrbVyKVYtMo6l0E9t23OhwoyO6uJZ8aW1M1jwv*)
(*jA6359l9z1rre4dXepcfWLnp1Na9Vx9/zq2Xv+Teq1/+1Ku+9v4rvubeyx67*)
(*/eCzr12655R189bCVWsLJ4YL+/yFZT+6oNZ3L+46uwN7r2cTd3JBLWFqfmf7*)
(*e2r83Y8tU5OOwdQHoQRgJD1AeJawLuWwM0kZWPIg0tk3k18ojo80Niy7ZWoY*)
(*kKxdX52ZGjKi6CnwrUc4hki+LoGXhldeNkv6OmA6ZoqYqZGWqZmFLMiLY2oW*)
(*F8xmhVcL0jI1OUjL1BD1M49z+WWaWinehkIdcmaEUCAMmcGROjQ0xaoFbDTF*)
(*VhL/qprjWrZjOdPvrLl+/GvYnu+6geOEjt11yFLo7h8GR9f6Z7aWrjm6dvOp*)
(*jTvO7D9/ZuP8pau3nxjcfMi9ZmPvuZWLLh0uHOstbAULy+6Ypl008Hb13D2h*)
(*0/Ft4sVzRE/m32ZqruCJIi1TyxqDqQ9CCcBIeoDwLGFdUrAz68TE553kjylZ*)
(*i4945JSppSzeicKnCUytcg1JYUwNuTSZZEY4wNQwEzGZrp34whMx0vKXGlnr*)
(*FJqO1zBmapNDW4f8ypc/dUGoKnNpp8+TPS3RZxHaEtJ/8vWkklDMHy2kZWqz*)
(*WwuhDjmDp8PByErxNuS9nD8j+EVlQthf8DrMX7UvAbDRVAuIHT8BksSHNfl9*)
(*NT8ia9HdkK5nO75th4418J3Vnrc5Cg6vdk9s9E7v75/Z7J8dH/u7Z9a900vW*)
(*8f6eI91dB4OL93tPWnEvGjgXjzla1+0ENvEtK6KCJKZpxCPjw0qO5HEi/Apb*)
(*pmaMqdFyMCMteW3JUWqi+2zjw6Z+nnjK1OwJU4vjNhnmRByNTP4Z0Xk7YWpO*)
(*5TwoE5VrmOnu+jM15BR0xGJOJyAA+YA0jLaywTJNMGlOWqaWD0w8F3S9DAPa*)
(*6c21Z0FgwoyA+//SYCRaSMvUEEzNiA7GV4q3oXEvyxoEDGF/wSdR06t9Jcg0*)
(*GlBGmNcne7bt+w/jy2rxj2FHt0JGt0Xanm0Fjt3znGHgrva9jYG3b+jtHzib*)
(*ffvAwDk4sA/2rQPdxf3Bnn3+7nX3kiX7ooF1cdfeFTp7A6cT/b51vNW2OjYZ*)
(*H+N/RS8kh0MsUa2r4okiZXZqzH4MGIOpD/x0Slkpy3FGPYzA2KiObcXHlGpN*)
(*fiMi4mjJMbkHcjIsukU2JukRxY8OYruWvX1ZDbOKqsCnGB9ahUZaZuOrM1PD*)
(*r1EjGokEmClyQiiNfxFTGdKR9LtGlFSCWftUDmF4F7pAJgiFxTYTBemWExhV*)
(*MfoLT6/V2vNoIjQRLxAYhowEZkw5sYTxfroWOPiFq9BTw+BKkZKNW5vIt4Wy*)
(*uXjImnLmYrXVzgNZJFSoEgaZrpftqZhNIzUmutKRfBUoesBI/BNrY6bmRHdG*)
(*2mOy5jt26Dk93x2G7qjrLoXOUmgvB9ZqaK917bXQWvUXl929y+6ekbO7b+0K*)
(*rV2Btce3F+ObHomb3uAYXShxoiO5UDKZVLjIXE/px9sw02gFAUiizAGA6zOn*)
(*M6KbpdChkqByqGObqTk2iY8JPZtcNpswNXd6o6xn2Z7luPERvzn5eEETeOtp*)
(*2Fmw/qy40pYMCMQzNb01Zg7DSGbMomQHRiZSeWDJsrfyuF44Kf+WcLCsC9Mj*)
(*68nUSi6keMCK2RwszkHCc7UXy/t6cXFRlaxpzFsCMrUV6i8sCID9K4mxPJ8v*)
(*ZQKoEnkigRlTt+Ah3FUe4dJU1VaKpdKQ3/hE/lEeUixpmVopIJKPINIBwpbE*)
(*d6KZrjT9llD80PQpU4sfnj4+xv+IvrPmuaE/PpzQGxM3u+vZfd8Z+E7fs/pu*)
(*p+ssRoe9OOZonrXXsxY9uxM9RcTafmjIhKxtX8Iz9oPXqkAabW5gNqqxVpoS*)
(*7SSo0qfx00zNdazkiJkaRdamN8qOmZrt+JbjJY++icha/NPpzWJqmVNoSAZk*)
(*YphaHvm8zhoy+Y2xtg5IMwLDeF8nUGpnwKR6nRToxaRlaorQZmrpGotmaqow*)
(*WzcMgl8UEyqyGrLDmVoqk3+FsSRRuadOr1qWBjgRtNWuLVOT+Uvmev5FmaFU*)
(*+wvepNXGDAFRB5Vk72oU7Uzilr6eUDWHghsj+am18X+Tf6aMzo8Oe3x4zviw*)
(*XHt80F8zq5qVcajcy+WjoPWCMu3062nJ1TSaqcU/DhEFTBI2EVmbxEzC1+Kf*)
(*ciC+RaKfR4+vqXnJE0qnl9UMMLXMYkVUuqGGAgXFIamIqamKzc/UZP+EzyKS*)
(*bsh3Pd6SGv4CHA0Enkwl2RgLd9utQchMUXOmJnu9fKaWgLRMbYqaMDVYbNFM*)
(*jQdTCmTFIVNCniJWNPgV5Q/yZjE1oEHwL8oMhbQVH06YUyqPmTrokCKNWKFK*)
(*eeI5P1NLyNoY1O8Upz/JZie3S04ukcSXS5JH+MWHRf0mVsWo1t0V1gfjq5bJ*)
(*nMbThKlNv6FmJ9+BTI8xwQ88N/Aimu+NiVl8FW3yJcboTkfXJb5j+dE7ths/*)
(*oTQ5JoJzroRwEI4xvi9i+mwRoUiqY2p4ybL6Uz6EFZV3UzpYz2VAI0YqBrcD*)
(*5nVV9fRQn76ZHximBpyoPa+soWNQW+Pzi2LMCNQQYEzL1PjShIkERs9y1FYC*)
(*v6L8Qd4spmaJriDIuobMULIewYtlYgmjduUxwy+kcmVgsxuJZ5ippaD/mfK1*)
(*lKlFk5KUrDnxPjpibfFFFGv61HVr8rWi6q0boVpfV8vUipAptOfkASHxN84c*)
(*O/nCo+MlvwAxPpzx4QSuG3rJ4YSuHThWYI8POz7cwPYC2/ct37OnN+K6k5tx*)
(*qZAyprysQhaxL6KFF+QXWOG6MbU8yuSHsKIyAQBHC34i4byyOp8ZfvQY/lwl*)
(*3ZRQucuKgPZHB/PK1PJ8kMIviolJoIYAY1qmpleLmDHlqK0EvtzlD/LGMTUL*)
(*5ynAUEArEYqtWxhkoj5qpxELmN1IPOOZGvNK+jplsejZfQlNs5PfZ4vl2ekv*)
(*FZuxjRlU6+uaGSMX+HynV2cnP9Fnue6YasW/qu67XuB5gRsfzpigeV3f60WH*)
(*Gx2e03Ojo++6fcfrOf746Np+4ES/6zdma96EqaUPFCnw+mD6z/wtQ7jbgdM8*)
(*J0jL1FRAQAj7oFIBka0RcJOwyMPtgF+OgglUUAeXFYeWqaVomVrmu+VsJISF*)
(*iEemBL3yVQ6YNQqDXFXtOWBq6Su8BKGhhGL5OFEKHl4UdqkFQE/t4jSRmR0T*)
(*z0jwTE0I2WBrNqgwQugl6BvIBGri67kBEwOTv2Om5lpu/MN8nu+4Y4LW9fzx*)
(*0YsOr+/7w9AfhcEo9JfGR+BFh++Pj5E3PoKhGwxcvxedNaZ4Y6IX/25ExNRy*)
(*3U0rdD3zYvrPgvZFcJrnFw4rnLNJCQ2Yc79aDoQdin+RhrAPalQP/hQgAEgO*)
(*psZDb7NdtKh6Qta2Mk/RnhEOP2EoFlGRhAD6OAxeWz74M2sIP8ZumRrO9bC1*)
(*y1FbCbII7+x4piaTIDQUIBboYkjDMsMq6QV0nFQbwKkmQtNh4hkJmFsxLuBf*)
(*pL2Gl2NxNaQq1LBY5QGfdKppqAE+SGae7hg/+8O1xxwtOgLX7cbsbDAmYr43*)
(*8t2V0Fvreht9f18/2OyH+3vB/u74v9193e5G2F31uyteOPLCgRf0/SCMnmXj*)
(*Tp5GOo1BPbXxBiH5mBrgAjjNcyKzlOWsrkIDKu1s88yeB0z9hI3PNIV0sEZO*)
(*yU6RvUK4Ir+4uMhPx2vIT62305ahku5cJjTMldMgYM1mkbPpa0PVJkJV+QLI*)
(*1xB7JzE15OlKrmcCRjhRTrWLgHCNzEpV1VaKpdJAaszUYAlCG5ZsRjpOqg3g*)
(*VBOh0TDxjASGVQlPoTUhihfULNHmpBLUsFhpQ5ZxyBzMg9TFyR+zT3eMntUY*)
(*X03zQje6y3EY+kvdYCX0V0Nvvetu9r2DI//IUnhipX96bXRqZXRyeXR6bfXk*)
(*ysqR0dJmb7Dm95a97tALe14QeL4//Y2//MUBaQ2Sg6nBLoDTPCcyS1m1TK1C*)
(*MPUTzgt6cDpMI5uAHGReoYdhKjyvIeFvQjbNrVqmJjylUK0srQsrBqFqFqGq*)
(*cPBbO4yp4SuJkuuZmiDUM4/aBUFW9PIEeW2ZGmB8jGsAQwFigTFkFtqKlQCM*)
(*qmVqApvUSDwrMTVCMTJak3RS+i1AYOWOTlGVu4uoD7KQwCdyHtC+ZphaTNOi*)
(*L5p1PX8Q+Mu9cK0fbvSDzUFwaBScXOud3Rxde3jtpmNbt544fPORgzccOnDD*)
(*4YNXH9g6s75xZLi0P+ivuN2hG/bcMVML/Oj+x+iJ/tF31WQ/mJ4DRLSR0E6x*)
(*NLpo45PZ3X5BTiEtU5NA6BG4N8F7HvykwhOZV+hhmApPRMArpo1G+FoPLVPj*)
(*gdwkMNpmdh9hDakDU4NhhKkpJayS6zFVq8xagYSs6OUJ8noyNQvcBmNcAxgK*)
(*iAp4TOa8dQiYSpodrIzMpAbjGc/UhGYRmosfZuoDKOOoyuPzx9RSTJja5Lky*)
(*ths96dEL3CD0/L7vj7r+2iDcHHUPLoXHVrtn9g1uPL5+75VHHrntysfuvPEl*)
(*d93y/Cdf+/Rrzt177rJbTx6/+sCBkytrW93hqtsdOEHXCfz4R9c9J3Acfyw7*)
(*/tU1k2AiIf2ndooxElLhstfNrgVWuGVqmPRn3MS8rjGvrIoKh2EqPOGgpJU2*)
(*GuFrPbRMLYVsh4BZr1BVMvt5r7CG7DSmhh+MdL2wajHTlVwuMJAVvTxBXlum*)
(*BgDjGsBQQFTk2W/UJGDK73SZyshMmj+ebcmVLyRTY7QS/hOuIXUwstUyNROg*)
(*15IET/w0/skfXvywxzB+hMgg8JZ7/v6l8PBq98R699zW8Kbjq0+/4fjXPnD9*)
(*W1764Pe+8pF3fN0L3vLYM7/h2fe95J7bH7rx2ltOn7p8/9bB/vKq3x863a4T*)
(*Bm7Xd7ue03Xs0LZ8y3LzXFaTZRbdy4y0DD7GmBRWcgpyJGkUU1PdGOeBUtYj*)
(*ByM9yFRR+Nx0MB0kzEhGt/qU1kajZWopYKYGL1moKmmZGgWlso93PVM3hHrm*)
(*UbsgCNeYM8hbpsafouF3Mgulc82iJmrQyshMmj+e9covkWwthP+EawiTLGXu*)
(*02T6lOn3OWNqkhiKfqnad93Ai+577PneKPTW+v7B1e7Jff2zBwY3n1x94OqD*)
(*r376DT/w2md/5J3f+J/e8+b//OPf+ZHvf8P73vy67371S1/18ENPu+mGa48d*)
(*P7y0tt5dGvmDnjsI3IHv9l2n59jd6FfXLE+brMmczkSykZbBxxiTwnin4GOV*)
(*lMLUjMgsvwIopXzmYCWnkNmLqpbEkvR4IEgqKV9zD42ALCd6mbqRcxOrClWb*)
(*pJEJFDr+lR3F1PDgjQm4nsxCqGcN64ZwjTmDvGVq/CkafhdGVIs0XIVmkQUz*)
(*Pp71mBqjgMxlsDeFyVIhUxOqVDRKYGp80TO4zFR/2nfbz3u0kx89t73kmfz+*)
(*mKYlF9TcjZF/dKN3+cHBdcdG9165+dj5S7/7a576q29/1Z8+8c6//tRP/t2n*)
(*3/+XH/uJ3/3FH/3ou7/3Hd/0upc89MDtV1xxfH1z/2B1OVwa+GOqN/KdgWv3*)
(*HatnW9FltZisORZRtieyGAqhaTVOsh5TQ6Z5psJFBKGGTKXKow0l36k6WiMw*)
(*8KcQkHEj5VRbYBuHlqnJoLrGzELHv1ITpgaLZd4txwW894F5hZUB/mcdIIzw*)
(*lqkJx5TJ1JBa7TSk4Sq0jCyYa8LUrKwKIKzMtWVqBhUrdKV8DRd2yTyJJosW*)
(*/ifRXcdJaFro+b0gGEQ/l+at9b0DS8Gp/f2rj4xuu3T14Scf+4ZnX//+N73g*)
(*dz/47f/6mx+48KcfvvAXH7/wP379wp988ktf/OhH3vdDb3zlS592+5NPHzy4*)
(*tby+0lsehktdlqkFhTI1azbUjZQpm7rnpxymBmtiFvVkakoe1HC3RmzgTyEm*)
(*mFqC4ipP/rxogQFfjmpifJkamdpm6l/EGmtiNA3U0PUwVCM2eZfZsdCnaC9c*)
(*w2hItc36AqmnzLCAzkYsYHax2kh1kCnDM/Ti1JDZBOmXTGBomkxmTfwlA2wQ*)
(*+vVM06lubzL9Uuh+iZkxT3gIgSRrKVPren5/zNSCYCnw9vX9I8vh2c3hzSdX*)
(*77/6wFc/9Yq3vvzuj/zgq/7Hx7/vwp986MJff/zCVz594R8/c+ErX7zwV7/x*)
(*+Y//7Pd+++sefuAplx0/uLm2ujwYDrrDrj/wnZ5rdx0rufvRt63kuSJqN+QU*)
(*YRklaGcufrBwGP1iVR+MGEFmlvGD+dYvHJ8Oxn/whXeiktPTMcAnLfSLGG2N*)
(*O10pelsYAT6ESgMmAWuisFCNCj8oVkV9LIkBX/EwccIzNX5MHk2EA/g9sKra*)
(*qippKCkbDIM5RU8fjClKQ6qDTB+eqWnrDBeHTMlGrAfTNEu0xkYUNNgmqrGH*)
(*XzIQ2CXYkJmLvnxjMLMwZM2ND991Q8+Lb330l3x3s++fWA6v3hqdv2z/I7ee*)
(*evx5t/zYNz/8mfd/09999l0X/uLfX/jyf7jwL5+68H/+84V//cKFf/jN3//8*)
(*L/7YD3zLo8+9+7LTB/ZtjEaD7qDbC/2e54SeHbpW6IyZGvEskjA17EMgMd4x*)
(*CGFy5ZxaW1VmugZtTngoOTF5S/g5LX8KM1hDJbzaSIEYpiYTWIKLi0ufFk2B*)
(*UvCXphVSDdnmp0V+EJVbGelyB99RphFFmVVd2KmRdxUiVWKGAQtELYmbnbd2*)
(*zoyTCawkiwkIzImlqWocGkytEYCzUsPX+Hn52M6fL3ootPUwASNgarbjOxFT*)
(*6/v+MAiWffdAzzu9FF6/Nbrv7OaL77z8zS8+//63PPrFn3vD33/hBy/85b+7*)
(*8OVfufAvv3bhXz924V8+feHL/+W3PveBH/j+r3/Oc247eenG6kZ3MPR6vSD0*)
(*A8/xPdt3rcCxfHtM04hTW6YmS66qcoqZt9GbE6WWlC4ccwo9UslHmFhixsCn*)
(*yCqJTKBQSHNd3KJBwNS0qupephotUysOmCJGDyY7gKmlI41nBLLHVSgwD4gE*)
(*BU3H14QKC4Xw4sgclCw4K8nsrVBm55WVJn6iok1dtB9lYcwxtWDM1FYCL2Jq*)
(*o/CGA0sPXHHwa+696rte/tSf/64X//aHvuXLn/+BC3/+gQt/+wsX/uGJC//4*)
(*xIUv/9q/fOmjn/nEu972HS96xoNXnzgxWFtzBn2r33W6njeW6dmea/l6TK1M*)
(*1C2tmICvg0ra0OggyFPoFFYqDpiqIuvUQJlqmVqL+kAWTrIItM3dg2QKvBo1*)
(*qc9zCUwRoweTncHU4KKtDY22WLLAPGDsptGj5wP12VLmB+zH4rzMlBo+wvke*)
(*YVYBGtUyNW9692PE1MJgNfAPdP1TY6a2tfzAuUMvv+eq73zJPe9/06Ofe983*)
(*fumTb/u//8+PXPiTn7zwZ++98P/+5D//0U/9xW+++4mfefzxV99931OOnDjs*)
(*rC/vHfX2DIJO17ODsWTbde2YqVkpU2t8xBYHoDU0N9M1Oghf54GdgDZTU+rp*)
(*yDIFbHIym35zXVxzzEejVEXL1FooAVPE6MFkrpmahajYeaDRFksWmAd0486M*)
(*pfnG3JQs5BaoiEwRlqbFxcWO6PP2eWZqbvKb1xFTG4XhahgxtZPD8PrN5fvP*)
(*HnrZnVd+2wue8p7XP+uTP/qqP/2Vb/27T7/tHz/3ff/8he/78mff+uef+s7P*)
(*/8obfvx7nvuy5152x3XD45u79o0uWgovHvi7e24ncCwv+mVtf/LL12OmRnSe*)
(*/bhzMJfb+DwdhC74sp2ARn0gCKYGnAK8C2xyCu37LQDMR6NURcvUWigBU8To*)
(*wWRnMDVT+09m3jxtUSbfrMA8YMLDlA2biDRK61BR8wC5BTK+RmEsdaZMreTQ*)
(*Krn1cNfU3Ok1NT+++3HM1IJTw+51+5bvPrX56M2nX/u0a9762G0feOMzfv37*)
(*v+rzP/6y33rvV//OT7/0iz/1wk/+2KP/7rsfetMrr37WHcMbTu85urqwr7ew*)
(*7C8M3Yt6zt7QIT7L1OyWqQGoyQbJLPJ0EJjdaHdSosXUAO9gNjnCtbR7zhKw*)
(*M/f2LVNroQRMEaMHk5oxNbhZaKik3V8wU+dpizL5ZgXmQWo6UvA1Ndk1CGBM*)
(*yZgnpgZvgQrqGnxqJ0Elu6ZWKMqNJZqoOellteTZj/3o2Y/eZjc4MepfubF8*)
(*67F9D1519AW3Xvp1T73iO154yw9/3V3vff1T3/9N973v8bt/+vE7f/jr7/i2*)
(*F1/z2H0Hbj1jn9m8eKu/sOovjJyFgX1Jz16Mf+7anTI1r72mlgm9qKv51qW4*)
(*DqLdSUkOpgYLbJlai5qgZWotlIApYvRgUjpTgyuwsMDmUUm7v2CmNt4Wi+uz*)
(*esrQKI6p1Rz8hwnV6pMHfIrJUMm8ZieVoajWk1zDYo746Y/JMX1If3IDpBv6*)
(*Y7LmDT13Xzc4OhqcWVu67uDaHae37r/qyCM3n3zFvVc8/sxrvvU5133Ls6/6*)
(*5mdc/m+eduoV9x5//m1bd18xuHJr8djSxfuChWV3YWhf3Lf39GwS2o5ve44d*)
(*bDO19ntqILSjrs5bl+I6iHYXINUxtfTv5I86O65FESiNa5hlapUEqlDVIqzX*)
(*pqHVHKYGh26mZNWa3zI1PWVoFMTUMN7UDsL8wJT6Jn70pFQo5gyFeEpI0yKm*)
(*5kyZmuvYE6bmOu6YrAXemKy5fc9Z6waHR4OTK6PL9y1fc2j95hP77zpz4OnX*)
(*HH3khuPPv+Hoc6/ZesbZ1ftP9p9yJLzpoH/FunV8sHsruGTNuXjJvmRo7elb*)
(*nZ7lhLbnR48TCW0riJma2u+p7UBUWFWKQ3EdRLsLkCqYWosdBWBX2TI1JPLv*)
(*zJFo3GapCCgVMbr2tkxNY2rjbbG4PqunDI3KmZrZeZFomdr8oUim5rDHmKlZ*)
(*bkzTvPi5j1Oy5jq+6wSe03Wd5dDfHPTGZO3E6ujM/tUrD23ceGzztpNb509t*)
(*nj+x7/bDK0/eHNywHly17J0ZuSd61kF/ccPZu2ztGVmLQ4v0LbtnuaHtRw+A*)
(*ZJlak2KyZGi3tjpPV1wH0e4CRIWpERzy165mlesWMGTJVVpfbpkaHk3cLxmH*)
(*UhFjip7QTdr9RVbV88eDkkra/QUztfG2aFygEZi1IQx7FoXOhUTL1OYMxd/9*)
(*KGJqzixTi5ibPSZroWuPfG+9G272e4dGg2Oro9P7Vs5urV6xuXzFvuG5td6Z*)
(*Jf903z4RkiN+56C3uN9dXLfHNG3vkMQ0zbaTC2oBy9TaJ4pkQLu11Xm6zA6i*)
(*HfzaXYC0TK1F8ah2p9QytRZKwBcxvugJ3aTdX2RVPX88KKmk3V8wU2e2RQ35*)
(*dWNqTJyUoEwNiU+qD+OO5O8aKpwJI7udhqJAT2WTtVmm5tihYw88dznwx2Rt*)
(*f793YDQ4vDI6vrZ0Ym14YqV3bBQc7rkHA2vLs/a7ZMMlqzZZsjpDq9MnnZ5l*)
(*dS07tBzfcj0r+tnrMU2jnijSMjUI2q2tztNldpCaMzVL1GT5f+7Y2tWinjDL*)
(*1CpB/p05D5tDPh3nB/giRiSQjdHQBJbJjC+HqeVMB75rIImVkrawU8oErQPc*)
(*EHkvA2LhtK1hRguZGu2dGuoMA18oagttgxfrKYapTb4sRn9PzZ0+rt/2bTuw*)
(*7Z7rjDxvOQhWw3C919s/HGwtDbdG/c1huK/nrQfuqmuvOs6K4yw5zsh2otsd*)
(*iRUSKyCWT2zfclzLdaLDix4A2T6lH4fKq2sRINQPogk7SBr8qlmA6QKASgY/*)
(*dZyD2tVizjDHTC0PWqYmg1IRg0kBvUXXcJ+MaGBCFykZP5juFHlCkTcRhqnh*)
(*5xV6pKoUZnTAsH7hP4VoVubS2ibr4tfYlLUk4EO3cbsd7fgphanZKUdLr6kl*)
(*x5SmOX50RM9q7DrOwPOGnj/yg+UwXOn21vr9tUFvtR8ud6PH+I9cd+R6Q9cf*)
(*usHA8bu2G11HI7a7aDkdyyGOY40P146YWnS0TA2DaqtrQcC3j5ap1QfAnqHR*)
(*62ohc2IjmJqRRtkyNSHEG315DKTvCoelxdlgFOUMS6XVYcbLLIaZhUiYmpIQ*)
(*jDIahsoPRgfMGpkTYfkNylxeVX6Npa3FSIQInasqsFr3IYt/BRmUPp8/4Wjp*)
(*ETG1ya+qeW5C1qLLaqHj9Dy357p9zxvEP4c9CsNRNxh1/UHgDjy3P37L9fqu*)
(*P/CCnuuHthtdRyOWvdixFok9/mN2oumzROqSXPWpaUKtGjSj8Fy+8BZhZ22x*)
(*xvXh18h3JWZ8/kmLg0zn+mRKC23wHuTbVn28zGjSlO1ZQ4Gv1fQA2bAiyoW2*)
(*NFllxpwiG8wPkEEoXJWpqWpr1vKqIBSLz1wjfRZS7QaRNQb8GstZiEZQYUQV*)
(*x9SKc7ESUys7j5JbYkVMLSFrkyeM2Pb4CBwndN1ufER/RD+K7XWjw+36TteL*)
(*Xu+5Xs/zx0fX9QPH9cZCxlMsdsiYrEVMLZlr+osAdWJqyIgtvxSUHxiZ+cVb*)
(*APjsnbkl22BlyNS/tBMzBablC1h42bmvCNh9NVe+hSqau+dRBb/MNp41ICwF*)
(*tG2ZLlCBihzSsoy/7QHWXyhQCKEE5Lk8x8nUFrO0cpDZR3KGRxMLl3DJjWNq*)
(*tEDVQBUKEb5VNFPLHJaZ/oVlmW0xTG1CpiI4tuNGR0TefMcJ3MkR3xLpBq7r*)
(*e870iP4Zel7o+eMjcD3Pcd2Ijllk7KgOiVlhQtZsa+aoBZBFm+HdJWRTwd4X*)
(*T9eR3wQo/ORBxtSY+7HpxmGqMjQFfHTRAdYII8iqeiOUb6GExu12tJF5G1IL*)
(*DISloGVqAMkSno45F78HZgTWwexwEzESHs0ia7IlN+vuR0aaLFCV9BG+W5Bz*)
(*NcQK7zkpuL4lv3wdE7LJd9a279iPrn5Z0eHGj+sfH56bXGuLfhc7+tuLb5KM*)
(*Dtd3PT/maMnjIyO+Z21/a7LOQBbtlqnlYWq8/JJXVyFk5St9tyojyHqlKipR*)
(*vnFoitEatNXJA76U1d819YQwqlumBjAsQDgGmA0wqRlTy6x+tQqPciBbclUV*)
(*OKf9ZSmQGahkdi8kG1w5U8sM3aKil1jJntpKLqVt35FIkbWYqdHPhYxvjHRj*)
(*jP/afj3mbm7M0ZKjMR9uCANMmD4tU8MwNdlgRn5zKzOsP/+irHzJxpcDYg7l*)
(*K984NMJowgSfSwhXWmfX1By86VqmpsTULJWCnLn7tWrG1JClryaxURpkBimI*)
(*jyQPoJAV+fzpKcsp2OP0AFgHpd6kNDInU4Pfyg9CLEp86j575t/09TVn+rSR*)
(*CU9j3p2Ng6zl12c/gCzaLVPLZGrWtNgmZWEumRoTLYQjZfyi+OjSY2pmzSUM*)
(*e2B3IVtU4zxYCeCwqQl2CE2z5J8jNbEi1QG86VqmBtTS/GpnWpI0kKntNMgM*)
(*UhBTy9yW5/RO/pyCI6QgpoYHoF6hgc3MyzORdKkUJYsvl8UX0mxnxm7CSGhE*)
(*hiIDrGVqGKaWvpgSd6tpdz8SDvy7AH8Rvgj0a6QRjJtLGPbA7kK2qBp6sIZg*)
(*rF1Po+0Qmma1TM00eNO1TA2opfnVzrQkqRNTS1WqTwDUATKDNLQOa+SUUILs*)
(*lMqZmkx+0YHNyLc5MIqlZC36bTTbnhz8GFp4/EQRpgnWLQ6RAdYytTxMLUWn*)
(*4UyNGYMUCPRrpBzj5hKGPa+kzGt19mANwVi7nkarW2UuDkKmVmfX1Bx8KZhj*)
(*piYbRldLuKjmVzvTkqTGTK0OytQBMms0og4D+wHt7QF8ihJTKxoVMjVaB5Cp*)
(*xd9pi2maeEwkOjlIeoclPVd9rJ0AWbR3CFMDJs1karSL6cG02BoyNUYZYalh*)
(*VAWU50+XgR6PV9LMmk0wNVOa7AQw1q6n9epWmYuA7NNI0jK1HOBrwrwytXQY*)
(*+7k2tcaWqQEq1ScGaotG1GF4V5NTpvDdHcvUAB1gMCPoE+OLbVb8U9dW8jQS*)
(*3rLCcysEsmjPPVPLnHQnMDWZPsy7ssEa5QtpBOPmEoY9wNQM7jd2IBgzttar*)
(*CrLdNWmZWg7w1allai1T41WqVQzUFqVtjFX3Ksy5wt2CEX2E71ZOGWS6VRjV*)
(*DCVJ/pYSt/Ss5CDR4dBMrd55iSzaO5mpMb2JfotnavRgi6sGnXoztcwxwn8y*)
(*wzQ2AHglEQtCQaiqsPYKh9XBcQ0CY8bWelUhc3fdukYDfHVqmRpQVPOrnWlJ*)
(*UmOmVrUidUdBe0tm88bE6mKM8R9IacL0UXUus1I4QmrC1CoMYDHt4iiJLSNr*)
(*Vnq7Y3QkTA24plY3IIv2DmRq6ZKTV1SZGvMi02UqD/s8kCmvvQHQnjEPCALA*)
(*MIOazD2YwGitVxVaplYE+Jowr0xNuIT8TA1TilM0jqm1jaOeyNPWhemj6twm*)
(*MjXZ6xrL17MY3bwYSpI8OsS2pj+vNntM37Voyrb9Su0hrK6yarxDmBr/oqV+*)
(*TY15kekyta3bmNolewsZS/wpeK2U1tKiJmACo/VjJRB/yti6Jjf46jTHTE34*)
(*LrNGDaYGnCIUkqktfmlFo+Ydv4UGhOmj6lxmP5mZYtUytRQytVUtoJcOfBej*)
(*IeRoPGWLp589RBOp6lYokEV7hzC1BMLVKTE1/sXUzjWv24RD8jqmpCBjiT8F*)
(*r5X6glpUDyYwWj9WAoajJWhdkx98deI/9a1VBdMu1LIxLVODlal502+hCmH6*)
(*qHpWVo2BwbmULgbagZ3HYiBN2/72GcTUEHMp6VY0kEW7fLUrLGv4xe4cpiYc*)
(*I3xdYwOA10ppLS1qgnavUgcATK11TR7wphOauj7gnZ7peniMLKLyMDWZkkra*)
(*1ieqa6XMDgSzq88pTSMmMSrBKYZRu54FxwhgmhZbZ/pERwIzNex0xa5HEciQ*)
(*K0ftOhhHKZFVmRpg5zp3dgayIEleVPqsCVnfVCth2xbrhjwdrUVxyKz8LTBI*)
(*TYexIdwIyoGGDswaZeMZmXpMTageXtvKzQurVLUu84xy7AxHl7YOwCnAzrCc*)
(*oKo8elE75LF6M19As6lD8JU0YFE13IorlcH03codVzRU0004WGhboWQlpqbk*)
(*KYOAgyR5Edlz6bPw8+L1rMN9Ly1a1BxAYrbQQKYNZUWyNA3zQxgqfOfCr1TW*)
(*NQpcQ1lgOt3crKu2KKf1C/dvJetgcftADXKBv85YefRmKjlRj3YKxdQEQ8Gu*)
(*V0Omhge85c48l3+x5KtIzFzpP2VdxlRwMkJkYg0yNeZdwYVi3VUQ+dO30ncz*)
(*oWpSjWBr4haoRYvyYbbW7XBk2lBYJJtldj5ahD0Fv1LhsGbZRAZ6IW2KlYBy*)
(*Wj/vyvKZGl+39fZ1SkxNR9GygNSQiMCMacrtbUIIF4j0Hd4glcSD0CmqawTA*)
(*CAFkmr2mlspsmVqLuURzy2kNUf9ePAcQFknG7DXfJ9DVFegpmJUyAueMqTFt*)
(*y9R2ogWAclo/78pKmBqTVoUytbkBx2BYPzbdIHnKqWx7XxOmxgDwY9EwHh5C*)
(*miachX+RHsy0XYCp0b4GoLQK1bPKKZUtKkdzy2kNUYfaO/dgCmnL1Kz5ZWpW*)
(*e02tdJTT+oU7/PJ1aJmaHjB70eYaJE85ZXbv6etlMjW85XPSijwwnjIypibk*)
(*ZbJzLRxTsySfV+S3Z+aJfBS1TG0noLnltMU8QakVCjspPabmGye6GssaSjqG*)
(*aRmyrjGvTI1G+duJHYhyWr9wK1u+Di1T0wMmE5trkDzllA5dUiJTS4Xjo1HY*)
(*X0zpg0FxWZMzJZGES5WRYYbBAoVR1DK1nYDmltMWcwPVcjeXTE02BtNJW6bW*)
(*whRapqYK4NP7uQRmE1voJrwIsTQax9Ro4Q1ialaR3swjGRPhlvz6KSATP3Xy*)
(*T9nlP0aHlqm1aNGiaGQ2fX7wnDE14bs8ZHLybC0aAXqZ87SuGqKc1s+HdA2Z*)
(*Gr6G7ECmBjuoKdaQVdqcTE0Y3gUxNSb2WqaWH/j+Wz5Ts2ZjqZxS2aJFixZw*)
(*rZt7piZ7N7NNGNla1B/8MudmaTVEOUbmo7rRTI0eXOfKYwSYTKx5BU4hK7ZG*)
(*mBr9esvUhKhhnMhCgrePrDUDkvGza+iJVKNFixYtNKBUamSdFBisMUuhoDWB*)
(*mVqmhI4ENVmpEfCLnZul1RCkSJYEbC0YplZCtvIRVbdNYz0xT/tDoIRqMzXh*)
(*4NKYmnAuWNU83syfMjVMOqFlePsUkQIYmWT2Dtv5yMQWLeYMNaxsZSIpSjBT*)
(*E1awehY0mwL+rHQtO4GpJSDtBbVSUJyd4X1F+WWNFMnUdniVbgqAEmq2nJbJ*)
(*1Cxc+BnZ5M8NU9O4ulcaU2Mq5zggF2Okwdm2xRYtWtQKeKbGdNh6MjVLkaxl*)
(*crSWqbXIg6KZmiw4m8jUanjvVjmASXeDMAdMTSgcAz33Gfd4+UnET8foQERg*)
(*TmGqGQAl3YRnpXMtTrFnz569MdJXxu8qTdRi/rBj+1GLGkLIU2SVjS56dd5X*)
(*2CIIR6araJlaiyJQnJ2FWZlC44s2+fXRY2rIVMULbBbg7ajeTQJVIbOQFsfU*)
(*kGcZH5lCoyEW0UPLjxYhU0v/xhAumjplkjUl3WTT0TRtTNBSppbyNVoNRXu0*)
(*mB80ouq2aCgwxY0ZgGFqPOq/z8cwtXK2FnWDdu9rHIyvUUlgcXamc5AX3mim*)
(*ttP6Y+rBpqck4S6LNJSpaUDPdwW5O/OTyTJjjNkw8LOn76a3IAKNWG9q5sVk*)
(*rpSapUxtT4yUrPGxugOr01wC35uK1qTFfAMIIaZFCssymQW+HjKDa76paBxT*)
(*25k71UJhfGeSU6Ap5zKbH36WcrhPKpnImRo8u5CpyU6Z49SodmlGZmdSo2Vq*)
(*qjClYWa/K7lxw8WqBKbGb3hoppZeSqOvqclitbhyKtNW6fQiFKszZEaDrZF4*)
(*EDmMmcug8vMNIyWx6cj80IzvjHyxIrMf5AojXHhiR/HeAFMuU81H4HShQJip*)
(*lRByLVMzDuO+yynQLFNTyoKc6aMknH4rc8nCmDdbMXLKmXuohqUslhhTA8MA*)
(*p2SOqWGRNJJTRa+LiJhacTWBmULWSdN38UwNqWQqmZfDMDX6G2qZfb+gT8B4*)
(*VTHLTNUownH1BG381EdKpsMwNca/BaXGHKNQiwEJWKvWoHSRCKhXmRMBAvHa*)
(*mnKZ9iosrlnI3hWuNI/+mRcUmH/WcBPSaBgvFzkFFtTcAZWYGNZLnzzALFnG*)
(*1Gj1NExXw/bKp3xVmtA66DE1WSwBAgnisk5myc1fJE2VWWbHqNEchQILagS8*)
(*YcupCXTx4e2TvsVzJZliSCPLVkdPJ+RomUW1CMhUBQbT79at0BUHJjsALwMS*)
(*rJapFQxhqcljQ+HpZBZ5lS4LfMR2TDO1TJsQOSxJPRGOxK8OaRmiyNSQWsGA*)
(*k738fRrgmrmE8QXmFNgsplZakAjTxMiMdYvtejI11VPgWCqaqeVHERdE9NRm*)
(*zir0kzpeQ42akHNe3j6pDoVeU2NmJ7NkTXWTUwSEjiCS3YJsXXWoJ0WD/ygj*)
(*03S8BKtlagWDLzUY1+AFMi82y0GpNTI/nkIWZNUU4O0mA3MKRj6vDHIV9CxC*)
(*+bQOZp1eT6amZ8Mmwnj+5hTYOKbWMbRvgbegRfdEm4NB4Rqa0P+sSpM8OsCx*)
(*BDM1swVWD8UxNe0TSfFMTTZ7h/tNseLmAppvyUyND2BmE1JyfAoTCqjqzIBq*)
(*E6pM8DVcyXQ0gGEtU8sJxmKkFKZmQG8tqCoAFB+gHAHykSlAsgDMSA/AVCde*)
(*H6RliDmmhm+mDWJqqW68+0pW0iCML6EmNhFmFjwScD0wS57SSgO/BS3CwrVi*)
(*asA/y4eeNeBYwjO1yvPICPIsp3JTkOKZWqbHSSlMjT+Rj+GCLICBMKEYbem/*)
(*03fpK0Tlq10+DDK1zFnoKXaOhY2AsRjJzdRoID/1LQ2q4SGrPMgCiBEo1Aco*)
(*xYRjYXz94cfgV4c0TjoLoD8sUG+n1zimJkPJepqCcf1rYhClrKGhlD5pyuRX*)
(*uCp+RKhLFS1TY6BtCjiWYLFKhaXyRMOguXUy3eR3KLJmfBWZHheGE9Drkaam*)
(*xaY9jhkAT1QmhAnFLJnMbpySP1qmBpsuzyz0FDvHwkbAWIyYY2pwE6+qpSqt*)
(*C1PulOoSPgVkkUwkYAZgUky4OqRx0lkAJZECdyZTa2iNMq58TayhlDU0lNKH*)
(*mGZqJQd8TZxFo25MTe9EOJZMXVOrofuEaGiRTN2UejO9qmV8LsA+stIE9Hqk*)
(*qWmxZLbtJhDGcFV+lClDr4XMbpwszonlq10+8Ewtj01appYTjMWICaZGxzwT*)
(*+c3yDqbcKQUzQSPzFOZdZrywOmFWh/ROOotQPq0DvDprNoUzbdIgpibU0Gpm*)
(*IqQwrnl9TAFHqWyYUvqQAphamTFfH2el2JlMjY9AuOZkvlU3NEJVpvUAe90i*)
(*ps70Mh8hshKHNLUw3qxmMjXheFWDzAdUmZqeZVqmlhN8zmKiOlOgbJZmOYiP*)
(*WACY1QmrpRCZpzDvMuMx1Um4OqRr0lkAdwMNQjiLklmEa28EU7NmV1qywjlh*)
(*XO262SHTNUxAKqUPMcTU7FnklIZH3Zxl7UimJgw/wl3Hl02kp2HJqGGk8YAb*)
(*k2pL1ZtXKJygQY9HzivcV/CfxmeGYtEgWUwNIA7p39XWk3KAYWpKW0ThgJap*)
(*5QQfopk7fCWBzIvNchAcsUwFyGMuIBfg0id7RVadMleHXEU6i1C+cFGwueBT*)
(*hLrxcprC1OC36gzjatfBDkyrglViMlEpfYgJpmZzyFyRKdTBWQxqxdS0AceS*)
(*8L6UdBj9ZSjCocpV5UP99SeiC0y8K42vwriLkXLopclmr08EChMqs6rTr1iN*)
(*rSdKMMvUZH5vmVpOMBYjpTA1A3qXAjhiMRUAM4WwpDADZAaUvYKsTqppyM8i*)
(*lC9cFKOSMEIy7cyfQr/YOKZWrrIGYDyF61ATmsXUaLVlCynuihuZbmCquq7H*)
(*oGVqzJMrmPisclX5UH/9CbVZYnyk0VJVpzZoH6QoemkyBeoTeMKEyqzq9CtW*)
(*Y+uJEvIwNd4+sgBQarIteDAWI4aYWuZEjQAcsUZKsbD6ZbZaYBjTKWAh2mtJ*)
(*ZwHKtcxWwqUBp8h04+U0iKk1FMZXVAf70E1ENfWU0ocYZWqyVZTAoZrO1Oq2*)
(*AYNjKbWwsCryzxgkVEOpbEk7AHShoAuIXks1BY3YRhZhOkrhCqmqQBEQOgLQ*)
(*jd9dWPUrFEWgHKZmSfpsMWuaQzAWw2QiEnwfb5xfMrlD/lLMVz8ewlNkY5im*)
(*D1dU7bWkswAaymyleopMN15U3Zia1cCYhzGXBVZI04CsoaGUPqQwpiajaTuB*)
(*qdGzt0zNaplaiUgLBb3J0WupplAaU9PSrjwIHYFXe/7anAx4pobZcQHdk6cD*)
(*O8TCRsAYlphjanOATO6Qv2oJqx+/Y2R8BG8pU5lA1shWh1wLMwW8KFhbZlF4*)
(*O2PqRtEQ6jx/icPE4fwtMIFSoAojFrYMkDL5kTbBOhCo0rATrqkJhwGxlxnD*)
(*LYyD2X9iKknRmuCBVJIJPy3tyoMwofBq75z0UWVqzLkY+bKJWuDBFBMyd0wt*)
(*z75FFrEGd+bC6sc7RdUdmFOEq0POkqotnAVZ0vElQiiKX+McMLUabrNpO8/9*)
(*DjBzfyUrmBjXE8TnJ9pgLi3VKoSKw45iahbXoDFltkUJEKZbJdWyOKZmNar+*)
(*EwmUTi9Uw9pCZjreIEaYWoOCqkLwGw+9wJYJ5MWa0RuN2Zt01IoY0w3pHmrK*)
(*SrR83gvCwZjpMCN5sfi1wKfoGYc3NaybtvENgtd5/nZNsjhJjc94QTuoagJY*)
(*YdgawhPxI4ETkdqSHfP1ippDyd3MSJip0QKrTTGlLMgj3JQoXiz/h1lgxOLD*)
(*I3M6/pNPzFl6a98hnwW14GFzgAcLz0oHVFjBmg6S4y4dodkrbCh5mJpV2Fac*)
(*NkimWI1W2Ljg563RCMpTUHjUCsLwkwUk/O4cQGOBenZAyueNb7VMrQbQS4Fk*)
(*ZFPKCKYgGJFcqJ4k390COXMNMy88ht8229ytmHk0lKFlajsTQLzJxgtPTAcU*)
(*GqXzjTxFUniiwaoLTyoswgmMMDVTqyAqdx4Ci4LVblDwM3au215F5oJU7cYZ*)
(*HA9+jfw/eYPU04/5kVlnhKeo2gEj3+YeopX+0e6gKgfR/dAJGVR6KuURy58r*)
(*S3Yjyhu0A5NKwtqlPVHL1FrsHAiDDY6E9P34QJG7FvMKvhTTXSMdphQh9EZI*)
(*JjCPwnimthMga/pV6zWBbN/FtH5rHjfJwu3NTmZqqksjOZgaMCYtUIwvLNET*)
(*EdvmWDI04oQ+t4gNdh6xwnObkuz89kBYu/TApJVqlmF0gMdUxdSseWx2LWAA*)
(*TC0rGEh8yN8uMlBb1AREDnqY6naFru01Z2pF1+SiUfOmLwsqpvVXqCGtj6lN*)
(*CC2zZWoJiBZTU3WKxkjglHZDVT404iQ9Mc2vIlTSEyuMLj72alIGGTDqFc3U*)
(*9PYY2ipVyNRazCtk/AtmapLITzhaJz6kfK2N1RYp8FWUiJhUy9SKQ9pDa7vD*)
(*Zyxsz15yNWV89CdUkIZmd03C7c0OZ2q0EZTOZZwi87KS+zIHt0ytfJAcTC09*)
(*y7hK2jVB71yVj9wLBFOpSmBq6YuZq0YWTEBOy9QKwk62njZTEwVqFOCELBIc*)
(*U9uZBtfDvBpt5zA1+J81BLJhVQvahkKmVrmdCQdTMktmakL9i1idtmIaOuBP*)
(*UZpF2xrVxup8g9Tympq2x/XObZmaKaYGzt8ytUKwk62Xh6lxMU8wTM3a2QbX*)
(*Q1o65sxoSkxNVkKN2ISXbNbaTMzXPwVyN6yywTA1pvtXrZ1JCLc3JTA1/kSi*)
(*u/s1CMKhnIkwI/Xk51OzhRh5YrWGrtFQCfFhe0lgUqmxTC2VbPMvcqa2xzti*)
(*4QLr45e6ga/tdUvDMpGHqc2eRWKm1iETmtYyNWMgLVOjqnr5TC1/xDau5qg0*)
(*rGogNGMRrR85deZIg7HKr3GHMzWrlLai5PSChLfQg3asFldG8kBDJSOMwIgd*)
(*mEpVKFNjXtRmaiLFxsKc6LAcKzps6CA2wTG1VA1dA8wJhI6o2yakTORkavSJ*)
(*iWljSxZyc8iORT2bRX6o9gtZCc2vCVwTTBm/QU6UNayq9dqGsLkLW385U2cO*)
(*Mxir/BpLYGpI5F9g3SDb++ntdWWYYwPWAaRlajmYWjpeOKlqIjAVwyxTEwLW*)
(*kDaIsGBKYmbK1OIjImvElh2E2J2OlS5UpgBg5B0FOjYK2vI1DnzmKtE0jqll*)
(*m7GGda/mqGezMIJGMDXL9GeJhZ5iBMI6Wbfw441TTuvHCy9CDeEa68PU6hYk*)
(*PJB6miViGDTCeg0F2fFMzcrxPbWmMzULTC48U5sVEjM1y02OmKlJD5ip4VXd*)
(*IeAjpM77kBKgSspEPC1O0vgyGjLRalj3WjQCwpw1EkjC4mw8RDUiv6pkaUSF*)
(*pPVh+qyp1g/sajDCi9iBCNdYNFNLpQFymlLYkXoid7PMGN4mmae0KAFw6AJn*)
(*WbUMbFgloOZo0DSrIUwtvr0we1L+LZ6p0WWTcKDOU2BqpGOlN0Bi7KNnhLkB*)
(*7wizW74GQY+ZOVZ0CJlaRqpMUcO616IRIHPB1DROKT9f+ApZN6bGmKUgppap*)
(*AFJJg5oI19gyNTzwSuoxNcb4emJbmAUcurJTUg/WLbCBXCui5jSJqRG1H9qY*)
(*uezAqQfqts3UpDQt+QpbStZULmfoGWH+UEQ8NwJ6BG1C06gjZWrRFyZJdIDf*)
(*TpugEQan07YOaITRaAhV5V/UqPAVMrWqoqIS16d9qp5MTVa6mfZavgLAGIOx*)
(*SqpgasLlFLTGBsGmvjVgSZgasm7sQOuVBiJnasxGnT6lhDKifaJMN36l+Zdg*)
(*kKnZoktXBgoImTA1knw1jH+fE87vb4WnyKdMHicyQ9NiOmbTTI0aYE81bNNc*)
(*ANn+asc2FwVeRiO+mubak4Niatb0gwMLk641N7gsZ6tF4wJVqC3/SplMDS7L*)
(*vGThhrZlamXqAIBwoF83ztT4aEG2jyK6DLNG4T95g+T0I79kGYyssf7ga0hO*)
(*prbTDFgyiISpZe7VC1VJ2+PAufxK88eVQaY23ktas7eVlsPUpm/HClvbn65Q*)
(*293omCxzm1GR6doJdUQSkpOYZ4lMmdrksCOmNn04pMo1tapQ/5JeQ5WKA8vI*)
(*Zq+UTf92XGd62Mlhe9HheNErM88nVWVqha9wvpDW3qaYjs5xg1lPdJma8IMI*)
(*RlshU6vc4FVVTuG8tENL0EFJPeHrslNkcnLOXg5krsEYBK+wTBSsifHFNg5C*)
(*i7VMTRumDEIUGYFe1uippHeuTCUi+YJVHlWRTC19l5mXPosRJfRLpvGFr8N3*)
(*P045WkyyrOnNYJP/tyimFt0itk37xuKcbaaW/gSVbdOf6k9P6FA6TJiaPWVq*)
(*Mw/qFytYQIwpAWP5oqdOX5FdMancSiVjwtHiL5050WWyCR1LaFr6z+TwJoft*)
(*O056eM542PTThOk9uJg7IHeUnY2ANJapmc16Yo6p8arKmFoNi2fJUwOvV3KR*)
(*kVGDyJs4menj7Ivatq3EHTIFLM5TsEE01igUKxu2w8Eb3+J2HbKsaW1IY2wl*)
(*OrRylhoiYQSywdrFQUMlvXNlKhERU6MHyPbA9Lt8xGYyNWFFIlyBYmidUNtM*)
(*44tfhx+TQCKaNn2k/uRixHjDO1aoE783uW8s/TJP8lPV9mRo/M/k94I7U6Y2*)
(*5XtTmy8uxt6kLr7ZE+ZoYzQsKMzwoN2R5wYM7akxc1VrovKxTdMm9zRuXzhL*)
(*/plcO/Mc14+PYHI40eGOmZqdMjXH6owPO+sHr632m9S6kNWr2oKpsfmvTzFV*)
(*Pc9lL75PKfWIPMprSCtCn5yogw4YMHoS7uMOJqJk6youMFQh/IShoLnqE294*)
(*FKEwUiDc2uC9cQshCmJq6T/5aGGyu+gta55wBc7lCx0DnohlDtC4pkbrkGlq*)
(*3vLAu5ZGdZrypmi7m+54HcdxXdt1rJiOxRcqJntii7ql0Z7eWGZH9K0z/q/t*)
(*xIcdHZNLeYQLEkI9vQGnZp54MIJywh6YvZyJmgU5U5teR4sunLmB64auF3p+*)
(*Nzq8rut2XSd0x3zN8mzi2h3Xio4pWetML6uJKVttG1ZtFUtRbQqrQlZ48wvM*)
(*z9QsySU2WVNgTtHWXLm5SKRpn5tnUlPhx1seuNxpFkSLqQndV1VLLZOpMRNZ*)
(*6C84F60PrKdxsyAFwguvf3+pIeyymJrwxQ6HInKNkYlPIiAs+ULHADMLM4Dp*)
(*krLB6btEwtSMgLYArP/2KmK6FN/6FZGwZH/rua7neW50jP9yPM9xPdt1Lcez*)
(*bI9Y7nhoQu3Grzu+Px4YvRuN8SwnImudMXEj1mKHJEeHbG9648txE6Ym9VTd*)
(*IIz8Rmg+x7CnTC3+hGF6i2MUkm56Hc0f0zTP6wXBIOzGR9j3vb7n9jyn69qB*)
(*Q3yn49mL48ONjgllS+7QlU1aw4ZVT61o8GWq5mBKK0ypMEujRS0uLhbB1AoC*)
(*U/0a5MQUvINqni8M9HYCmHOrWpFVGFOjZdrcR+V1RppoZrVF2jkzI2R1pibh*)
(*VENUy9TScCpzy4pvRkDMEBWmhgw/IRejCwUvLT/46WT/BNY4ZWpkytTINlNz*)
(*Ipbm+14QREcY/XfMyGzPt1yfOD6xx5TNt8dbYS9wozH+eLDj+eOTie12LGdx*)
(*fBB7b2dM1qIj4WZW8stV0+8EJf7IMG9NkNizZWo1QRrA0wtq6UW0hJ2NozI5*)
(*3MB1er4/7HaXB4Po6PdHYTD0vYHv9j2755HQ7QTOou8sJnzNs8fELeFr29+4*)
(*5KeuauFCVP5RMAbIclofMCU3P1OzqDKiwdR4aoZkavljg6l+DXJiCt5BNc8X*)
(*Boz+/H5AOKzmKEhbWqz2BsysSkqaV8jUkGSNqTm86ZqVXMWhHKaWeUppW1al*)
(*XgPoT3SZGrDATKYmU0xWH6DyIRovWz7/rqS5J0ytMz5ipmZPbhsb73J9rxv6*)
(*vW7Q643/63W7bhjafki80PJC2w0dr+sGoReGCZVzxzzO9sY0bW96EGexY4+P*)
(*MQkk098bbpmaMX2qmr1ybDO19CtpyffRxuzM88Px4Qdd348PbxAGS/3e6mi4*)
(*tjRaH/932F/r99YG3dVBsNL3Rl2775Outxi4i4HT8cdHQtZs4tiC0lpDTlQ3*)
(*fYTA1NJaAV9yLZU9p7CM5LEJzNRMsfh0gRoK483YQgbGboTayZAdz9QwRpCl*)
(*s1KaFw3tFMOIzRSoxNQ05O9A1IGppUFVt4sLgP6ZCjNMjS6GwlPo8Z3ZGxrT*)
(*Adb0Tk6ZnWn5mQWkA942aeF2RHSuTahT/Ktmrm3FO97oCDy3G0Q0bdALhoNw*)
(*NOyORuFw5A9Gbn/o9UZ+bxT2l7qDUW847A0HvX4/CELHDYgbdBx/0fb2Wu5e*)
(*4i52xmTNJcQl0T1qjuU40ytrZHI5DxM8/DJLBh3t5TM1vjzypqghgygOFFOj*)
(*rqZ5XkTQgujoBWE/HB9BRNN63ZVBf31puG9laXN1aXNldGBldHBtdHB1sLXS*)
(*3Ri6K10y8vcO3D19d0/X2RPaewJ7b3Q/pOgZI7Wys6l9eIvSICwjOSuJLAa4*)
(*D+VygW5ASgrLell+lZQgq5+NSB/GaKRlapyc5G/mY/a8KpYL7RTDiM0UiGdq*)
(*wLv46XYCKmdq9Ilzz9SAxLHjn9a1OBvSA+hzeTszwmXKp4MXFxdJ/ENmlqgD*)
(*yhYlezHRf/Iz1RFNS55h7vqu0/XdXugNuv5w4C+NwtXV3tp6b20jXN3wlsfH*)
(*Pn95f7C8L1wZv7I2fjdcXvZ7Ayvsd8aH1110gj2Wv6fj7Vn09i56i8TrWNGN*)
(*kfExJWsJUxPqLFx+hRUgtX/L1OqAGaYWP9UmYWpBzNTC+GramKYNw2DUDZd7*)
(*3dVBb2NpsH9luLU6OrS+dGz/8qkDq5cdXj97dP3k5uDIqr81svf1Flf83UN3*)
(*V8++JLR2+daeMVmLvrNG0meMbE9d7fKbiGrztz4QlpFMmyBNV6h5tYsw36dk*)
(*KEjzBHPG1IRGwxu5HJvDMKWDUEhpcWUQibZ1ZmotlFAfplbDXABUIlp3PwpP*)
(*YYwPT0qm3Aq4piZ8kcdYAj0phjiA4WEnP5Xmxj9THf0ucHTfoxO4dtd3Bl1v*)
(*aeBvrA8OHVo9eWr/uSsP3/DkU9ffcuKam49efu3mySvXjl2+fOrs+tkrty4/*)
(*t3n6so3DR0f7tsLlNWewTILhoh3uWvR37fV37fH3LPp7O150ic2KvsUWPxxS*)
(*+utuAghtVSboSGiZWuWgmVoC150wtXDM1DwvuukxCEZhsNwLV/vd9WFv31J/*)
(*c2VwcG04pmmXHlq74vj+G84cuu2qY9ed2jh3aHjpvuDoEtkf7l7xLh7YF3Wt*)
(*iwNrV2DvdWOmFpG1lqnlQz2bRfkQlpFMm2BMlznGyPU1I06stpxaDWRqSAgN*)
(*K4y0qpIR7mJm0Tgvp+6ryjUYK2F0a4S1S4BxpiZLYVuC/EsoDkD6ExWmRp/C*)
(*C1QtMjShgyWQLFgcPYSVkfqLxL+iFv1ampMwtfExZWpWz7dHPXdtOTxyePXc*)
(*uSM3Pvmyex+4/tEX3/PoS+98+IW33v2MczfdffTa27duvvPY3Q+cvfu+s3fc*)
(*eem1Nxy69Mzq1uFwbdPtrxK7f8ne4KI9wcW7gjFZ27XX273o7em40ZfXJo/0*)
(*n/7mWiYwyywUaQmtamsh1Keq2SvHNlObUjU3flqp7/sRU/MTpuaNmdpKL1zr*)
(*dzeG3X1L3a3V/uGNwcmtpbNH1667dPP2q47ed9Old1595LYz+284vnRun3tk*)
(*sHuff9GSvdC3nhSRNXvP9B5InqnVugbWENXmrynICrKSBFWmxszFjMfrY5Cp*)
(*5ZFg1a+cNgW8l4UBCdC0nNGbH8UxNaG0zGSpiVlo9QpiapkyMcUBWT1qzhFK*)
(*g1mmZk2/SJX+nT7noYlMzfr/2XsPODmO+853iLC7M1Wde3LYnIEFsAiLSACL*)
(*TAAkSJAIBEgAJJgzSIlBpJhkUYwiRdGkMiVZoiRbOlu2qJMln8+yfZIt63yy*)
(*fUFOsuWz72P7nj/v4/fevQvvPb0OM701Xd091bl7pn4qQruz3dX/Sv/6f6e6*)
(*q+37JPBEag4ewO1oQk9BczD9YCfUeDv34sLbtJEaq79MTcU0npV4piAyjbI4*)
(*NV7dvXP++jNX3H3f9U8/d88nPv/sqx9/6LGfu+HsHTsPnpzec2zsmrPrb7vv*)
(*0KWHj19674mbbjlw1dWbtmwfnV1XaUzyQrUvm7+sT7pshbRspbC8j1/Rz63M*)
(*cv05dgAw2dY711zUm7c6D0Ro/dPQInYha2o6rKlv9uP1PXBEdReRvMAVRK4i*)
(*C/WCOFiShsviSFUcb0jTw/m1k6WF1bXFjSNX7pw9c2jD9fvXnNw9c9XC0J5p*)
(*cb7aNyFfVmczRZiR4TIJ9mm7i6iPcLYeVjP8Q9J9IFUYsnQCrvyA2xxwp2f5*)
(*K0lWyZm+o3eneDUmoR7cCp8E8dZ3EJ5J9FNYBKQGbKLijvUTY7VYWuh8sFuq*)
(*QvO0PJeQ1EgGThoHVxgKhNQY084Samqt1LS8JmPDaoGVJFoBH6Tm7YoOdWXp*)
(*HOwup3+Yaz2n5mCVG2+Dkhqnb6CnYJqSZJEpysxIIz+/dvTEif3ve/+dr7/1*)
(*1Ne+8eYP/uSX3/2tNz/ymQfvfOSKq86tueL0zLm7dj7x3A0f+diltz792Aee*)
(*v+2Oe686fGzD5l3jk2sL+cEBUFRILbNCvGylsKyPW97Prsyy/TlGJTXt7dcQ*)
(*QqKpM3YvatQ/JbUkCCU1jm0mnmM1UuPzIl+U+LLM14rCUFkarcljdXm8IU4O*)
(*ibOj4tpJefNccc9C49o9M7dcvemu4wt3Xb3x4oHZ6zaWdwwPzJWWDQuZCqsu*)
(*q2lPq2U5kGObW5Xq2/az2vpzWn0glR9ZOgFXfsBDDqYDLH8F8d005UHRu1N8*)
(*7khjGINPgmhN4hGF3bwZ72SKmxFsbqkYApZyVQQ/pOYtQyMfksOoYBCkxiAU*)
(*1vaJ9tUx0DZu1/cFTOmymqWAe1ILwwZyL4oruDW1Vvuq2zEaG+iptz4KHBT5*)
(*XDEPx0eL27bO3HLb8Q+//vgXv/qRb3337e/90Ve+9u2XXvjY7Xc/ccWpOzce*)
(*v7julgf3PPnCDZ/4/GPv/IsPvfnpR9/3zLlT53cuHl49t1Atj+WY0mX9Umal*)
(*mOnjL+tjlw8wK7OMQmpZ0LydDERJan5a1qh8SmpJkDFMW6SmboajkRqnYFpB*)
(*4kt5vloUBsviaF2eHC5MjypJmhmX5ibF+Rlhy1p5/5bq9Qen7zu9+X3ndz51*)
(*065HTy3cujh8cApsrC2fkDJ1LlNkMhJYwYMBLpfVSE2/XZfVrqnfKUyVFEU2*)
(*Ejt6b5IcfLJeR8N8ZhWBonenKaocV0JrkrBPBjKZBiJCG8it7XiYbTibjODW*)
(*VaM4m+qhIM7HM72xr2OwfcAnqalLKa13WzGQQT9kmuGzvt+DE6mlEdYAMak5*)
(*lNRP2fWGQ23A2xGLAtqU03YUQYuD+zGSoYQUjmWbsMZppKZEvEDgBwr53ORE*)
(*ceeuubvvP/3Wpz/w1W+8+a3f+fS3v/+Jz/3KE8+8fuMDzx65+MjOcw9svfOx*)
(*A088f/2n3nnfV7/50me/8vTPvXLb+Tv2Hrxm7fz2em0CsGWV1PrETD9/WT+7*)
(*PMv06QtqCKm5kE8X4afhjMqnpJYEGeNS3bOUhTqpCRwrqRuWcgWZKxf4WkkY*)
(*rimYVpybrK6brc2vqmyYKy+sLW5Zl9+5qXBkZ+3CVTOPXtj24n0HP/rQ0Vfu*)
(*3Pvwsdnja7kdIytnCpkhIVNmMzJYrpMaB/RdcFj9gkqipBaHgGVCvB9h8mGB*)
(*ldzmQEktdnealorqKLQmSXqmz94brEgMICxUOAZGrQAbJSRSg100dizFMM0n*)
(*34MCHPuua1mHyDwFtPvOQPPus1btL5Faa1s+/dtjPZRnU4pmJgHfpIb+ilY+*)
(*4RBzJjVoEwkYwk/ESY3QCS9xmv6gD+RapKYkldTy+ezoqLSwZfyGm6545vl7*)
(*X33r0Z//7Pve+NxDL3zslvd/+PQTHz796MvXPfCBK+9/6spLT1794s/f+dbn*)
(*Hnn145ceeebMifPbFo/MrtlSrYzn2FKmT8j08SqpZbkVObZfxTQmB5zCJ9sQ*)
(*q1Wo2NbUSGYNqgjU/I5JWw/WSA3w6kJwO6mVhZGGPDVaWjfbWFg3tHXj8OVb*)
(*Rha3D+3ZXju4s3r8wNAdp9Y+c8/ix5+69osfuvHtJ6/7ufObT2/JL04NrK5k*)
(*RuRMhVNIbRkP+jmQ5dS3DSJrapCuqfmS+4EDgENSb9bXEimpBYBsloVy8AmG*)
(*8wGBklpK5+XY3Sl6RbsvSCMzxo8sq9GhX6HdL/DChlF7pvFimT/alGh45uei*)
(*sfSHAK9l8gwR9+eU+iWDdwIjNX2KanXb1rTTPg21wlto+rJRvZNHT7C1gtak*)
(*NvXpixapGff5dA2p4U4MHxTOpIZjmnE64RBjkMVQ4EhqhMbbea2OxiyRGrtE*)
(*agLLiTwnanc/FvK54SFx3fzQVdfsuPvS6fc8fu6Rp8+99+nrH3725KPPXf/M*)
(*axefff3Wx56/4b4nrrv1gSPvefKG9z9326PPXLzl3qsPXb2wZXFmZr5WGmaY*)
(*woo+LqOkAW55jusD7ADUNn6EbXc/ekhe5LMPx+W9qTCBFqkBllWTTmoCz0gC*)
(*m5fYgsyWCly1zA/VxInh/NqZ2pYNI4s7Jq/Yt+rqw3PXHJ46ceXEuWun33vb*)
(*ltfef+VX37j47bcf+Mabd3z0gf3ndlf2r86trWfG8pkqn5FARgB9PBzg1K+u*)
(*mNadBjqmpdsZxij3Y6fp/OxTNgeyQE05bbG+Ywqe1MjdAghnTS11itedmi5n*)
(*aUxaGgW1tjlUHKHGktT8Fzak2gM2pGZqPjtjPF80rv4QxoWi78/phQV8dcad*)
(*AGNKGqm1Q1jzhkWgf0WEEBnQXwnUSm2kZqysMdBYa9O35WMZ7O7HACskYhl9*)
(*1ZWPci447i4IxwLuWp3dDrSKBOyMJ3QsOKnxDC9wvMQrSYl4QanADDWk2Zna*)
(*rsU1155avOGmgzfdcfjmu66448ErH3jfyUeePffws+fufuTEuTuPHL9h8eT5*)
(*g6cvHL7uhkMHr9qxafuq2fnRocmyXGWh1N/PLlPve2RXArYfKqTGZCHMqvES*)
(*IImp7JIXpb0PU7XU9FBqYnOsljh1IRhKAiNLTF5migW2UuIaVX50UJqbrmzZ*)
(*OHJgz6rjV2248fSWG0/NXzg9d/sNa558YNcnXjjxjbfv+u2vPPztz9z75iOH*)
(*Luyt7J/LKqQ2XjBIbaVCaur7r1tXXkpUnuQ+bNDctoZj9mmgCWukDoSSWgf1*)
(*lKtMS6N0FLCS3QGm8vq/dLAZWmZLmL97J9PhointD7p81oYHpdp7eA8UMUyD*)
(*LfzSf24BFxLAQAPETJiGwloTzdjmY2sYqQH9KbbUYxps/66JfAD6R1QS1iOZ*)
(*3AMfa4ZhHKtuyaAtqPEix8u8kri8yFaKwshgcXamsX37qiNXbj1+ctfJs3tO*)
(*3bjnxlsO3nL31bfdd+3Fe45ff/ORY6f37r9yx57DO3Yd2Hb53q0bt66fnpsc*)
(*mRyuDFWEogCE3ADTN8D2Zdl+dUGNGYBQSVlGSZTUqAiEd35jQU1LOQXWGDbL*)
(*sTmeh6LASGKT1Moltl7hhhv87GRxy8bhwwfWXn9i++0377ntwvbbL2y6++aN*)
(*zz68/+1Xz/7KZ+741ufu/9obF1++f/HsYmlxtn9VJTMiaXc/wowAFVLrZ9Xv*)
(*FrSrU1ILQi79mEFqA9Yp10waqWVjITVIHA6lIgjsjq9nyZWKRiGRM6bBniE1*)
(*6G9xqmv6gy5KahGpGRuwaEJJDS6RWnNNDVkjM5bfsiZSY0FzXxEkIaSWYzXg*)
(*65KnNRNIas4e1e5Iz5ZYGqa/MliBNV4jNUkjtYLIl2S+UZGmxiob58f379tw*)
(*4uTimRv2nT23/9TZxRNndl53euex67YdPraw//CGPQc37N6/cfvu+c3b1y5s*)
(*Xbd2fnZ8cnhotF6pl3iZA5xCav3afo/9gNFJTV1TM7oiJTUqZ9mTGmySmpZa*)
(*y2oqqckSU8izpSJbLbODNW5qLL9xfvDgvjWnrt1+y4W9F8/tuHhuy+0XFh6/*)
(*tO+jHzz1qZdu+MyLN77xxPFHb9x0bLO8ZbxvopCp89rej/AyHvZxYIAB2aXA*)
(*nmJa1OpMatlcf3JIzdlRpyII7ClMg8lrFM/TPfmJXUBq4QEIIFbglw5czmaH*)
(*VIrecR1tsiO11g6NxoGMSfqHWhYQtH0dzGCYxmlJxTf9W2qd1HIJIjU/nUo/*)
(*Ny5SczCJZMgH5RYMS9A+opKatkW/yHIyzxUErizxtSI/2pDn5wYP7F1349n9*)
(*D1469Z73nLrvvqvPn9993YmNR46u2rdvbNeuwcsvbywujh06uOqKQ2uuOLju*)
(*4P5127dOzk6XR0fz1bogyDnI9eWYFTmmDyikBnVMa7sFV4uXKKl1swL/fl7P*)
(*yQRr+tNqGqmxrRsgmUqJadTYsWFx7erq7stnjh7eeOq6baeu3XT6uvU3nlp/*)
(*983bH7//wOP37Hn0tp0PnF24Yd/ozhkwV1s2JKhvvpZyGREu50Afk+tvIzWq*)
(*qAWST2rOIRza//FpKJkhX0+5ykQ1ih8WID8LdBGpBd5SlnRjqWCvG7iczQ6p*)
(*FL0baFmRWjMh2+0310haUp89ar6pVdveT//PSBDimMYBjNSC/+rRu/z0K/3E*)
(*WEjN2SSSEgU1oHCOV0lN6StKZwBAYJg8z5YUTMvzQxV+Zqywa+vk+TN7n3n/*)
(*zZ/+xBOf/PijL71w29137j953ZoDe+uLu4o7t0s7t4mH9tZOHpu57dy2e2/b*)
(*d8dNu6+9cs3CfHFmkm80gJRfyfLLALMcMCsVUtPuezTfeWve7ibkHUV8ViCV*)
(*W1l9dUQktMObTkSenkVug1S3FoE8zwhCa1lNhuUirFeZkSF+drq0ZWF8967Z*)
(*g/vnDuybOXRg6sorpk8em7twcsMNx1adOjh57eLogfn8fGPlRCFT5TJyLiNk*)
(*MwJYwYJ+JjegPVOZGD/YcwJpJzWsMEmBAipdiWoUI1bxYAN5qABCILUwKMbI*)
(*LUpSszMDtyHs65JY1fEA0NrZwGR2GLXXa8vxqEBzQawd0IzEqK/DUjlMu4uN*)
(*Uzfw47XEMc0nkHhW3StC4NS/ck2KY7QVND2pbwtSE6eknJIYLsdy6rfU2hNv*)
(*iZGr2dB0mOVAi4DUSIoT4JHOMi+56mtqKqmpa7QiAwsCW83zgyVxrCGsmSoc*)
(*XJy59/Yjb73+4Le/+dFvfePDX/jso08+duz8mbUHdst7tjOLW7P7doAzxwYf*)
(*vmvb6x888ZmPXHz5mRN3X1jYvVlaM5MbaqwoFC7jhQxkLwPMCgj7FFJDGM14*)
(*nrJZxAhIzbJCgsqKChfe2QhPNHV4/Fw7UlO8Hc9DQYCSCGUJFguwWmaGGvzU*)
(*RHF+7eCG9cObNg5t2lBb2FTdvqW+e1tj/46hXRuL2+bEbbPihpHcROGyQSFT*)
(*YtQFNT53GQ9WqphmQ2q9PCVFK5B8UoPE37zZxZzBGkPlSolqFCNW8WCDq6Ai*)
(*cOggHALesrUjtQAv5MGGaK7uYFJHb4PGwFGSWg/OjK1tHhkD0/S3r6pJXyJT*)
(*gm0FwnheEESBF5X/51VxraR8LoiiqH6qoZoKcAyjn9x8li0H2BzUk0pqgOXU*)
(*m4nYjqQWcbu0E5h1BwP2oqRmkvqcmkru6qt8RZYpily9KI5U5anh/Pyq8tH9*)
(*c++57/gX337qD3//i//29z7/69946SMv3XTXLZsP7hb3bMvu3dp3dBHef3Hu*)
(*069e/7vfeOqPf/vVr3/+0jMP7Tu4Q16/amCkcVmpmBHFDMNm1GU1uFIjtRxK*)
(*anCJ1Ki6UJ5JDUKnHVCRzM2kxnIKrMEWrIFCHlZK7GBdHBstzM5UZ2cqszPF*)
(*mWl5ZlpcNSOtmZHWzYirx+D04MBUrX+ssLzGqZgmg4yQu4zLLeeAdt9jLktJ*)
(*LVYBfSt++6TtKALomhqVRyWqUYxYxdu87zaoCCNcD1aWwVvEBifBBtyejg2H*)
(*HgMiITXYwzMjaO24b6ymtTBNSyynPmsk8CqMiaIkKElQkizwksChSeRZgWN4*)
(*Vl9qY9XEss23XefUpJGaeuujRmosCalFL8suirsdV7K7VneTmnGjrNKNlF4h*)
(*cmxB5GpFcbiWnxwprJstH9g9c/vNB19/5f5v/drr3373tV9656mXn7vh9ps2*)
(*HdjJK6R2aGfuzLHy84/v+62vP/bnP3j9L3745tc+fefjd23dtxmum1o+XM8o*)
(*pCaJGVYltWUAroCwH2rPPbZWxqzurbXa5jSQIvvJhMqb/JAafjA+CixITYU1*)
(*wHGA54EggLzMlEtcoy6NDBXGRoujI/nhYXFokG3UQaOWa1QHGuW+emFFVVpW*)
(*4jIF/dk09b7Hy/jscja3kgXqapoyvUGroUe7VlTS3YQtdmnvU1Mxzc2DrvE8*)
(*p8Zo79NMDhRQ6UpUo+iXjt2M5AitEEpqqD0dDUAPA1GRGuzZu5WM59TQ1TTY*)
(*xDSVuHieFxVCE2VJyktSQRKLklCShKLIFQRWSXkeyhyUOCiyUGAgr94jpN0R*)
(*yWtLbIx+D2Rrx+tc8yVFTFKXPEwdzBV8uVKvkJq2JCuom/Nz5bwwWJUnhgtz*)
(*U6XLN49ee9Wm9z5w3Ruv3f+xNy69/srtTz569YUza/ftYPduyx7bx99zfvoX*)
(*3rjhp3/01j/8p0/96fc//KkXr7379MTONcvmRjNDlUypoJEal4FLpKbtzLAE*)
(*a6ZyWmEa3WovzQqQ1GwOAzipqbCmkhqUJbZY4GtVebCRH2zIjbpYq3HVClMu*)
(*w3IpVy5kS/mBotiX51eIzDIeXMZlM1x2GatgWnYFk+uH6npNWHMZFbE6kRpU*)
(*l9WSTGqmI5MDBVS6EtUoJiigfQNa0SslNZJ6iIvUelTNYNWC1JQQW302TSM1*)
(*SRLzkqhimihUZLGWFxsFsVFUU73AV/NcWeKKCrUJrCSwgsipb88StC3aFd6D*)
(*zTCHBUuJSWqQbIlmgWMa7BlS0/fq5zmlY3BFma+XpdFBeWa8sHFtbe/lk2dO*)
(*bLv/7qMP3nf03jv2Xjiz/uiB2rb1K3duWH54Z+7iicbLT+z59S/f/S+/eNs7*)
(*Hz316C2rTi7ChYnMTCPTKGaKckYU1DU1jdSWA/VRtaxtmOSwbU7Q/ZAuhUSp*)
(*AEkNywR54tEgNc2LqfdACowksYU8X63ItZpcqQjlElcsMsUiLBZAsZAr5rMF*)
(*aUDmVwrMCh4uZ3PLmOxlTFb5dznMroDZfpDL0kA6AUoBqbkoTJKggEpXx0Yx*)
(*eZ5Qpw87UuvxacuolljGSwJJjaQqKKlFqhaptWEaRPYQ4TlRVBdESiJbEWFV*)
(*BIN5OFripmrCTF2aqYvTNX6iyo+U2ME8W82zRZlVYhhB4gSBVRfXWLZ5D6WC*)
(*fnApMSobtjyD1b4Oxh5s8dQKopBGTe+Qmr5dqMCzeYmvlKTBmjw+nJ+dLM3P*)
(*1S7fNn5o/9yhA6v2L47v2FLesJZdPbl84+q+3QvMNQeqd5yde+rS4sO3bbzt*)
(*5OSR7ey26cxsPTNSylTkTF7MCFyGYRRSWwGZPn3vR9sYyWFBLeivC3p5vku1*)
(*8PG4tKamwtrSbrb67iKKf5NlvlSSyiUpn1d+hpKUk6SsJCppQBIGRL5PYFdy*)
(*cAULVrC55UxuOcyt0NJKkKOklhClgNTIvyekpJZAJapR7EitxxU4qYF2OfzJ*)
(*Qf7N8G884WHOpaBeKAChpKY+ZMZrN6zpmMYq0bUksAWJUxBsqMhMVNhVDWHD*)
(*eGH7bHVx3dDe+aHda+o7ZksLE4V1o/LsoDBe4+slNi9DQWIEkeF5hlcJTd9Z*)
(*QrujUmU0HqqbTHBLKxoWSX+/dvNhkRhqJZz3d6DqNVLjeU6WhGJBqpaloUZ+*)
(*YqQ0O1WdXzO0sHF0w/zg2rny9CQ/Npwbqa+YHO5bMwW2rZMO7Khfe3Dy2J6h*)
(*A9vKW1bB1cPLR4qZWj5TFDMSn+G5yxhmOWT6IZNVn4RsK5UjmoV56yMltZRK*)
(*77RG87U9p6Ym9KXYUNu0nxVFvlAQ83mBFwDHZTlugOP6OVZJfWpiVrJwJQtW*)
(*MmAFk1upABoESuoDoF8P/gMJDBgCBVE93aqUkRreW9CGBkmCAipdiWoUoxf1*)
(*MqnhLtGok6CaxiHDRPUHO3kOIIHVU5BBBZkmJWeCi8IS5Dk1JZpW4IzTnjBT*)
(*V9M4RuKZgshWZG64yExV2Q2jws5V5cMLIyd2zdx4YK2STu+evnrL0IH56q65*)
(*8uap/NyIOFJlC3JOVGBNVDdJU2BNe/kxq94FqW7ezysJQB4ADiCkxlik5hu0*)
(*Y4lALL8ZCFY9QmrGr0qXEiVBksWCAmuV/FCjNDZSnRirToxXhobkaoUtFrJ5*)
(*ua8gr6wU+hvl7GgNTg4yM8Ps7LD672QDDpcHytLygrBc4pcL3AqOXclABdNy*)
(*eiANdbhP5MNo4fUiqmDFtF4F2E5q6HvWmuIUXynwksSLkuIxIaduk5Rl2QGW*)
(*6WdgnwZlK7Sk0hkE/VAFNCX15UC/tgN8wGtqSZiwUigSUssmh9Q6Hpn8ILDX*)
(*lKhGiSCwSaMCr5AoSS2MdvQcQAJKauFcoRncQnU1TYUz9W5HJQDhRZ6TBbao*)
(*Yho7VOJnGoICYkc2D910eN2l6y9/8paDz95+6IkLi/dds/6mfRPHt9YPrS9d*)
(*PivNj3ETDaZagoUSmy+wcp4VJfWxNU5dWuMhqycBMAJorqw1HxdizEndhMS4*)
(*4YiSmlt5HmhBqZ3amqTGq+95EEVJgbV8pVSsVUq1aqlaK5VKspznBVFdhxVF*)
(*hfT5skJzRWmwnB+tF0eq+aGK3ChLlaJQlDlZhAKf5bksq66j5fQr6FuVGt3J*)
(*SNq+pvoGp0sFjH6SotNiwoU2kDEuLdfUYCuxza2TWPXLqCap5VhmgIH9ILcy*)
(*l12Ryy5X/lV+BjqpwQGN1BRM69eCf6en1z04hyRMWCkUcIa11h7+5JgW83Nq*)
(*lorFGCpdHSPzsEeuZf60b6AONvDa0HOzIzU/gxSfF4I1Xs/cOU/UANORloUK*)
(*o7OZlgMCzNmbMaEiCdOKPLRviHntXWkapgm8JPJ5iS/nuVqRG6uL8xPSgYXa*)
(*LcdWf+DeA28+efIXXjz/2efOvv7IlY9f2HznscnTu+tHNhd3rRHXjzPTQ8xQ*)
(*ja1WhUpZLJWkQkGWZUlQ4m9eYDhBwTQ9AXVxTQutofWyGvJcSAykFoFSTWod*)
(*LUc4rUlqrPa6B057GZ+kbiWqJVmQZEEQtXCXgzwH9cfZCpJQELmyLDTK+Wpe*)
(*KElcSeZLslDKC7LICuoL+dT9Q9Ul4eaA1UnNvJSmvs0vB40tnfwU2YPsfLIf*)
(*R03lU5YVjn64NC6R16gjD9A2k/60mpbUV62xTVLLKqSmLvWqdNYHwEot6Xc8*)
(*9rdIbQAlNUsje5PU4hgUVs9IN1+y1kw542ebg21ScCa6qY3ucCwxGh941YEE*)
(*rKmZSuS5jB1nsST0OtQG0w+Whjnb7610+mHkpBZUeQOUZT10vLpDHQZrHoxj*)
(*TY281UJoFJTUeI3WOEHgFFIr5PlKiR+s8tOj8vZ1xRuunPnQg/ve/cw9/+qL*)
(*D3zn83d/4aVrn79/213XDJ7ZIxxZAHvW5bbOZNeODUwPg7FBbqghDzWKQ4O1*)
(*wUajXm8UiyVBlBVSAywPFExr8hqv7t/fXNdrfq/ZCo60Wx/1mMjHdtxJVtpJ*)
(*jfhQqMIax+g7iWqvUOdFUZBEBd+VpPysfMKpyxNKUu++ZUUF5dTEygJXEPm8*)
(*wMrqz+qvsvbmPl7dkqb5Qj6E1FgGuQGytZSmYpozqQU7pkxfN+UIFJIfo7JU*)
(*x+ZGxqXhkox74bSkviESMEu7QS7tbMuopDbAMmpimAEI+zVM60NgbaC1RuPU*)
(*4iGRWsKdpxHeGOMimstakZr2rjsk6WQdPabBlhvpWBtJaFzCTtvxmJCCTxJ1*)
(*jMTcDkx8Fggwc3Ib/E95puHpPKMFXgS3doJ2QLMrsulgvHVcNR+ebQTd2PIq*)
(*wfaiyMriVj1Eas1oV932QwM1jte22ZckXn1bUEUYHRTnpgv7t9cevLjw5TfO*)
(*/PUPXvzL7/3cH37z0hdfOfTk7RNn9/UfXcjsnstsm8lsnMisHl42PTQwPsSN*)
(*DRXGhqsTYyMTY5NjoxO1WkPOFxleJbUco8Ia5JTEq/FNa2JTC6UEQUtfWrcS*)
(*hOgzIoEVPHwRrjqFcWnyfuKzRzkTNICtpw01UmNVUFO4TBff7G+tpH5FoByg*)
(*vhyC5RlGUH9geAZqSflV/UTQ/8qqVMY2t31oLYIz+iK4cT+D7mNBxKTWVnxK*)
(*aslTx+Y2unPzC6O2p5aapKbCmrZ1v3aXdjOpXx0w6rKanhRqU+94VGBNSzkd*)
(*02BWz4SSGi69XZIQ73kLz0I1puPVk9C4vUBqHjKMvS+ZrggwkWfSfaSm2wxD*)
(*I7Wgy2d9LdOH+Egktwc/0rIOYxykgctD5TgfHHzN6HcewtZ7r3hWEFhJ4vJ5*)
(*oVQSGnVxfFTesKZy9YGx59936Lv/4t7//jef/Md//9KPvn3fpz649YGz8lXb*)
(*MotrM1unVUxbO5qZbmTGa8tHqrmRhjw2VJ0cHZ0YnRofnarXhwvFCidIkBXM*)
(*pNZ8/EM3BsM0PVZKp3qB1KBjQRBSg2zzVeoc3xKHiuX4ZlIwTX+zg35HY/MO*)
(*2Oa72LWNaVjjgSEjpsZsME0rDh4mJIdjMoCSWkLUsbkRUtNgDSc1HbX0W7Tb*)
(*btpWME1PKqappKbBmsZrAzqmET7KREmNkprJmI5XT0LjRkZqPtuiwxeMZMEY*)
(*oRLVlwyTTCI/q1tJDf0B+Ca12GUXEZFYjh+JNj3oSVKLv5gGqTFLpCbLQqEo*)
(*VtTd1OWpscLCusaJo6s++tzp3//1J//n33/57//D67/37gOvPrFw8Rp+74bM*)
(*ltnM+onMmrHM7EhmopEZqa4YqoDhujw2WBsfHhkfnhwdnmzURoqlGi/kGVZU*)
(*txMx7n5kudYTaUv3QLYxWvD3kkSnHiE1aD9BA/11C80HDhn924AmmWHimLa0*)
(*9JRik/bgUkdBF1t1A5aoDb2DKTZSM/IknNfi9wM9o47NTUxqOXUprfkUW07f*)
(*g7R1D2TOSBqsqUlfTSO8R47B1LFclNSCtSQ5gxRQUnPzV/8C7fKfW3L6kmGS*)
(*hzK6mtHCLkJHO4EVqTkcb7SLyf4ENh+JKKm5knNBElFShNR4trn5o0JqxaKk*)
(*klpdnhwpbJyrX31w9vn3X/uNLz34Zz98/Q9+46mvf+7mZy6tP3uVuHtjZvNc*)
(*Zn46MzeZmR1fNjXaPz4ERur8SL04Uq8O1RqD1eF6ZbhSGizkazxfgIyYA+ou*)
(*/ZAR1O36GU4NcdBbHZFXqhnhTPwzkCdRUgPoi/HYtpesoVGofu8iq62gGUnj*)
(*Mvw+2KU4V0fAJri1c5xBasDKu5qKHMYwNPKkpJY0dWxuB1JrbtuuJW3fUf2R*)
(*2hxEfm3hGwJrnnYFXBoaZHtbUVIL1pLkDFI8erRUEho34aTW0TymfeM7/Coe*)
(*Zu1E9SWTYa5q0tWMFrbxHe0ENqSGt51RLrSAaHiQzOZzVheTWvSOzltJ/dSM*)
(*xZe0zeCCVbfRN0hNEgoFsVwSB2vS+JA8P1M9uHP8wTv3vfHS2V/54oNf/MTF*)
(*j37oqku3rj55tLBnW9/Wjcs2rluxfm123Rp2zWppdio/OVIcH6yO1Gr1UrWS*)
(*r5fkelGuyVKVYwsQSrkcD4BOaupe/VnA5pRk8BpKag5mp0E9S2ptv2r3JkL0*)
(*gbJ2TGO0TfbVBLFkWl1ts9ugs/YVt6Xjgcm92HmYkByOq3kt+Z6/a9SxuR1J*)
(*rfl2LTUt3cqYa/uVyZn3sW2Cm/m9bB1NpaQWoyXJGaQgVaQWyGEdB6nn5iCx*)
(*ECDycAk8t+T0JZNhrorpakYL2/iOdgIyUjP+lOuiNTXLgJm8rfEj0aYHsZJa*)
(*XBTgtpg+K8eJ1KBOaurej6LIybK2o0iZH6nxq8byW+fL1xyavP3c+scf3PvI*)
(*Pdvvu7j2ppMjJ46Wj+6X9+/md20XFndVFncN7tw+smn90Oqp+vRYY7RRrxUq*)
(*RbEsceom6wJX4pgCAyUABKiQGmySWg5yKqnp+6lBFjTfhEVJzZf8jEoPYjCZ*)
(*Prc7DDkBua3R8llFzMCl2yohZC2Pb3cvdh4mPIdDPq8l3PN3k0ia20RqrUW0*)
(*rCWpGS9H7gRrbZhGCFauDg7kmBhlCgVjHBSJCs/w6NFSCW9cVP5JzTgsOKPM*)
(*lw5qXkhUX/IjvGYclEwj7Y53IM3kFxmX5axBaCd5SaMveBIogLDIgVeOvis+*)
(*q70RiGc4gdVffc2KIivLTLkA6yUwMciuneJ2rJeOLlbOHZ+88ZrRG44N3nB1*)
(*49y1Izefnrr+muGrr2hcc2T8qsNTh/ZO7dgyum5VY9Xk4PhQvV4qF6WSyBV4*)
(*Ns8xeZbJK6QGgQgVWINqAlAwSE17SbHxzmJ696MvkfeTQHqUZ1Jb+tAR0+xI*)
(*TYM12LpJEliSWkefE57DAZTUkie75jYNRuO7AxOaoXc/tt0S6Qxr2kaRzXt8*)
(*yfjLrXOgpBasJckZpCANpBZsXyXxyX78tsPgsotL0RNdFTZRfcmnCGZU10UL*)
(*Ngpya5XJ56SO1Cyrzq5KOxrptpgRlzp2UiNv64B7Bbrfg/ZwEM+o77TieYYX*)
(*GEmEBSlbkvqGygPTQwPzkwOLG7lrDzROHKyfPly76fjYfTfNP/3Q3odu33zx*)
(*+tXnTqw+eWz2yL6JnVuG18/VVk/XJ0frQ7VqpVjNiyWBzbNQZtQkMVA0YE0n*)
(*NaAkYKymsfqbsuiOIn4UcY/CEcwZ3MxRcacFNUtSa9t8Jmd+xQOhhzUqwU/x*)
(*7QQoqSVPDh2+va+2SE2jMP111aZn1ixgDSU4Rue1nCWpBV4uSmrBWpKcQQoo*)
(*qXk9xoOcQ1NvGSanLyVNllGQqX7IuxbaZHgj2sGLZQM5X8VyEic0MgJ5nmLs*)
(*IhbPLdJlwn2CnaMI2Du1k5rx2iuF1ASF1CRYlHOVfP9ILbtqNLcwyx65vHrr*)
(*ibW3n15715k1959f//jdl7/0xNEn7995z/n5W06vuf6qqSt2D+7YWFk3W5yd*)
(*LI+PlIdqlUqxkpeKAqeQmsS0EoRLpAZapIZg2hKppRrWepDUYDuOucjBN6kx*)
(*NqSGFhN1OxFMl3Z+j07cMcq56dHOu3T3o7pe1oHUdFiz/BwnNQ9mdxxQlNSC*)
(*tSQ5gxT0HqlBsm/PQmqRYCeIRPWlpAkPFfCap6TWUeavvr26AruIxXOLdJlM*)
(*nRPvY3ZH+hdGagzHMgLPihJXyLOVEjNUY6ZGuA2z0r4t1YvXrnv+katffPTY*)
(*C48c/uCDe597aO/Ljx18+t5tl86vu+3U7KnDw/u25BfmhNkJbmJUGhmUa5V8*)
(*sVCUxDzPyywrMYyoJfUH4zk1FNMsSc06Sk+Deo3U7H4lkiOmdSa1TqegDjnY*)
(*idipTJTUkieSpm+Rmr6vo75e1pnU7JJ+A6ROat6GPImv6BpSi2x4OluSnEEK*)
(*epLU4lLg3S9RfSn5wis/AlJz5Xksp3X/DerBEkPtd4N4jyrtIhbPLRKSXI0g*)
(*wjYlydCUlf6zZQcI1odA2HwRVWvzPcgxkGOh9ko1vljkGzVhfERaM1PYvr5y*)
(*1eLYA+e3f+JDFz734Zu/8NqFt1849bFnr3r10X3P3LXp0g2ztx4fO7m/sriR*)
(*27SKmZ1gx0eFoUGxUhbzeVkQJV4QWV5ktNeo6f/qez+qG/VDDsM0K1JLIa/F*)
(*2J/J+0kgPSoA5PRGatpeImiipEblLMKm17frRu5s9EtqxqYiHtRrpBa3IcmK*)
(*rkEKSc1/Xw1VDqPJYXbwdrtIovqSodibwE545fskNed8nE9xuEoCSc1b/zTZ*)
(*kCJSI6wckoNdNT0gILVgZTRrk9SYJqmJIpfPC+WyODyUn50qb5pv7Ns+cuLQ*)
(*zGO3733n9Tvf/eylf/2l93zn8/d89fWzbzy259nb1jxwcvTi0fp1u6XFdblN*)
(*s2D1FDsxJgwOCsUSJ+YFXuJ5UeAEkeF4aCRWfSSOYXgrTDOTWkpvg6Sk5kLu*)
(*Sc20HOy8sb9pTAVS6s5lIiC1aCyhMuSmwlFSM+8iQpqYiEiNMB+fOcAQFh3w*)
(*nIPN1psluK+IyzBASS1CBd7c+CyQhE6e2CbAK793SM0yPCA5l5Kaz4NdNb1J*)
(*ljNF4AO8SWrsEqnxHJQkvlAUK5UmqS3MD+7fPnrdgakHzm1948lr3/nwuXc/*)
(*eet33r71l18//eYjO54+P3HnkcK5vcI1W8Hi2r6F2ezcFDM2xtUbbL4E+TzL*)
(*SiwrcozAK1kDjtUT5DiGVe+1ZGCTzthOpJa62yApqblQD5PaUonidoDdKrRi*)
(*iZseGKTmPVns0u/aYHwW9txPPJyIX458+Li9XDSjktASdHjGaxigpBaEgvq6*)
(*w63wWcCuL0VpYWLnGnysUVLrqF4jtXiFzoCmKgoqtrRsxyapsRqpsQpOMfm8*)
(*UCrJlYo0NChPTZQ2zQ/u2T5+1b7pC8fXv/fW3S88cuWnnr/+a2/d9qXXzr36*)
(*3n3vuX76+t3y1dv4QxuZXWvhplXs6il+ZISv1lipADlZwTSWEThGIUBOIzWF*)
(*w9pITV/H01LXran5ian8DDry3hJgv/KTg964TphGRmrGziQwGaRGolBtoDKJ*)
(*uP5B4MnzmpquWELNbiI1D14xCUOVOopUK1F9KWnCq8Khfkjq0Pjc7WAnP4Wk*)
(*QT20MminJG/9JJA5gnZXB9m1fjQ1prctoyKTup2IrJKaVK1KQ0P5yfHSurn6*)
(*tk0je3dMXLV/9syx+dvObH3o1t1P3n/ofXftvev0+uv3Dx/aJC2u5bbNwvUT*)
(*YHYEjA7CahUWikCUISdqC2oK/nGc9tI2Vnt7m/oCN4ZZIjUd1vT1NfVlajn9*)
(*fWqg9S9o/px+kbej5Yhz5XxcuSmS3OyODIrUnJLldZdSa1d12HaKaeygPjCQ*)
(*78GoUipAdHt54LDm69vIhJBa2Ccap3s+1052TszhWjRQ6Q4RtmOPLxZELLeD*)
(*C2AsE6p5fuTBb3guHXotD3NEUOtxXaaOK7AxSiM1VhA4WRaKCqnV5OGhwsR4*)
(*adV0dX5NY/PGke1bxnZuG927c/zQ4sTRfVOHd4/v3dK4fF1xYUaYn+BWD4OJ*)
(*WnawNFDK90vSgCBkeQFyAscp7KetoGlvbGvbZtLAtFZSH1hT32Ccg0ALqFtr*)
(*IRqppVZoo7tqa8+kFqBMjGN5TGAD3A2mLZ3S4rW2HBDj7UhNUQA2U6VQZKRG*)
(*1Z2kZnLClNS6XpTUEihKaqZT/JCaJzNVUVKzlF3snYTpQLGN4zhe4CSZLxSF*)
(*SkWs16XhQXlsJD85UZqZra2aa8ytaaxd15ifb2yYH5xfU5+bLs2O5yeHxYkG*)
(*P1plh0pMtQAKck4Ushyf0+CMZVo3Oqp3q0EWo7OlBA1SUxMECXhGgFwOdpr6*)
(*v+kwn6WLoH7wCCf5zaHLZDNdU6PSBSipkambSE2XyQ84X8unu6PBT0JESS2B*)
(*8kxq6QpCCBUGh5L0Z0pqlsKrIjldjmVZndREic/n+VJJqJSFakWoV4VGXRwa*)
(*loZH5JFReWREHB4Whoe4wTpbr8BaGdZKsFoECqNVCqAoA1kCvIJpbE7b30G/*)
(*MY3VMI1pIzVjy8mltwRoxwAtpU0dSS2o5VRL7oumC6WXcXBSS864o4pelNQI*)
(*RUmNkloXiJJaAtXFpObBwrhIDWKw5v+6qRPeXskhNZMZjLqvSJPUBFGBNU6W*)
(*uUKBLxX5SomvVPhqla/W+Gpd+Zer1thKBZZKsFAASsrnQV7OyZKSgCQCQQAc*)
(*l1OfSGNA66Y05IkiyLYW18ykpsHa0o1s0chU/56dgMNZwZJa4Dl4uFaSnaSl*)
(*KKlRoYqe1NDhn6IJkZIaJbUuUCpIrdf6iQdSS8vEnS5Sg763sItMIUGlHanh*)
(*l4i+fhhMTVLjlcQqSRAYSWILeb6Y54oFrlBkC0WmUIRaAnI+J8k5QcrxEuDF*)
(*HCdkWSHLKYymJF4hNcCyzY3O2jqcvl4GWO2pOBa3gWFiIzW9CcJwBYGTGnpK*)
(*4AY7D4G0uEqTKKlRoYqe1ExK+IRoKGmk5n/kUlLrQVFSS6AsGwX9hLFa1OjW*)
(*idszqQVVIWlxVmFYmApSYzWhP2ub9kOOgwLPyBKnJEliZJmR8zBfUP+VZCAq*)
(*gCZBXmIYEUIBQB4o/7IiwwrqG61ZjtGytLpw8+ZG7bZIa1KLVM6+wn9usL3R*)
(*gY1cZejhGHKhTWAyL72uUreZkhqVLpBCUovFSVJS83k5h+/oPOdJ5VaE7eiq*)
(*x9IW9CnLRkFHJYkPIW+yiCd9yzjKOdLzQ2rOroywliipoVeJF0xwS1BSM3hC*)
(*BSoGqLAmsAqvCbzyAxRFqCCbKDGCCLV9HRleZBleOQ6o24HwUGW0FqbpWVpc*)
(*GDRvg0wIqQUou8GIkxo6Hi2HpAmOjHzCNN9CaIlMsBOxJT5FSY0KVew9OS2O*)
(*Lpmk5jlbGDmpRZktlZ0CJzXagv5lWYfoqOzoQ8idTIyTPsBkd5j/NTWfpNaz*)
(*wpsmJWCik5q2/QfL6O+l5jkt8YyS9E33FSLjeI5V35XG6o+dLT151qF0FpgW*)
(*aflCk8NIJCc1yw/1Wgrb1Zjyx50MJTWqLlDsPTktHi9ppAZ9r2WA8EnNMkO0*)
(*QlLkf1Cb47XEjwgrnJJa4DJVKforXofoJyTBoTdSi7jV8CDK7jD/z6mlZVpJ*)
(*mvCmSQmpNcUwS4ltvqlaR7EmkrEsx3I8q27Crz56BvTFMqx0WCeNvxLwIRPg*)
(*+LXMyj+p2f0pQJnayeRhgn3cNUqh9sflsamSI0BJjUxJIzX/IxfEsaZmqo0U*)
(*OR903kmLzbgI7aekFrgcSA122s+NkNQIw8gImszSHlMQ5WCef1Kj8ia8dZJP*)
(*anZWMQajNTdv5Fro1nxRmrpPCOhAalBNZpyLtnzQbFL7Jx6yspyF8azISS1G*)
(*WboUk81pdCNoEUjcJlV3C1BSIxMlNf+OIpkTPaEoqfnJsGdl1KQzqZmEVyk5*)
(*qfkwNhhZxvaEEabnEMu54EmollQoMlJzNRzcHmYc3Uza2hnQ6AzoSX/0zGqf*)
(*EPVE0JwdoZoAo5+jvmKtebALG4JTUKSGt6MzCBCSmrN3cmskuRxIDdA1Napu*)
(*UfJJDZ8dYglLkkZqMA13P6JKSBjpWZTU/GTYswqb1BLFaNDKHnTg6J/Y9Rkc*)
(*0yipRazUkZrtSNGSumujCl4qqSnIpaRsk70Y7f1oreNwUssBFdOyOeUcNge1*)
(*DUgYtpVi6Ux4Sf1gmqkm7VjAEnnckpphahjD0GECoqRG1TWKndQslcCJNa5Y*)
(*KLyLRkxqDtkGm2dIoqTmJ8OelVtSs5uUAyG1yBrLJ6lls9n0hlipFt40AZKa*)
(*/75nR2omgzX8UlfMcgzMKv8qmKaRWhbAAQW/FFJTdx9h0GUyE6m1uA6wWcDl*)
(*IK8kwHAgjhddW8mSp0hOdGhBy1EJrL458dCIaIAR7Ig27MHtBwm+abOjDGdI*)
(*SY0KBkRqrhw4yZGU1NDrhpQzcENqMJydNFLkfyip+cmwZ+VAas5fbuP5+CQ1*)
(*0C7cwmDlQGrQ3pnoh/kntQTOIKkQ2j1wRvMzCVp2PLcZWh6M5wn1ZTGmmbJQ*)
(*oTNowJr6s1Y+nNRaObYW4RBSUzENNG+jhLF6O3woEbr0jrWNZwICIjXDgPDm*)
(*C1POKOmk8Tsf1H5Lv03VOwJWCiRPn5kkcJ6Ni9QI5bYFcT8A/VW7t3ZPkf+J*)
(*htRSl3+KWjAViiCSccjf89XxnC0JtKNVqF+ipBa98EZEI/xgSc1DhninsstN*)
(*x6mckUBb0s9rPsMGlzYMaeWrExnQV9aMux+XMM336HQ1ytCD8WpEP/EweC1z*)
(*wzPv6Doc8oftnBi4c7OcmnFnEvh1O8qy0girEa9zD5VPlVKhjs6uY/u8hOd8*)
(*0LMSOM8GTmr+v6VE5cqXmpyYcUqws3CXKTxScxiVVFShytssgDsK3PmQOBNg*)
(*I0pqyZFpkvI8YdnNMp5JDc0Qn0mBKamPnQG9N9mRVpslrTOX9iKBrbW6IHyz*)
(*Kz9vOUAsz3U7d+BmeJt98F6BchlQbzYNLNSxvLrdn0CsT/eYWg01iU7xVA4i*)
(*ITVLd0ouVy7I7qwEzrMRrKn5/MaS/OYEUzgUYKN78/OpUCyk1t1VShW7HPqb*)
(*w4gmITVXV3eWh3IlcAaJS+QzAklunkNuu1nGA6nhfcPOKoAc25rs3BoepPDB*)
(*RXhWDpPlueRjx26geRhxzl3CaPRYhiRIEql1bBfP7o6qy9Tx23vUnYb6NYhJ*)
(*uOON4KKuFHZV+KxtQEktZFFSo+odOY9oB1KLysAOSuAMEpc6No2rtksOqVka*)
(*ZnlRYH8LHGFxCKvIOSuH0WQSfiIhqUH7kYtmjh7g/+ZAkjpkWbYHSQ01o2OA*)
(*lDQXShWjyEnN8pSQ1LEPJ0HJJzXyOgSYvF3ULkPThyQn+jQgAvknNbtze43U*)
(*urJQXSa9geyCHG+kZnIRofYBSmqGOjZNGOMRz5DE+5HnTGgw2o0dOrNDf0b7*)
(*ascrdpzE7WrA+YtxvAh2xgBMzpYYeWazWc8dwGQ5fnXlTzGSWhjd24MZ5Igd*)
(*sW1UCVRHUnM+JSSloosmnNSSIFM74s2KlzEVTa+LklpQ6spCdZnQQM65x6LH*)
(*E0aGwP0NYG6VakcarAibJsCGsMyQZDogzNzz3SN2cbLDMparanEGLs9nkRTB*)
(*OLJjtaBIFSypGVOkyc4YSQ0mY7oBrZeP+Klnqt5RMoPk5FjiIEpqHeWBMlLR*)
(*9LooqQUlD4XqynpIjgAi5w914WPBuYGMv1JSi14d6znwhrDsGAFehTxDtNeZ*)
(*8ME4l2RNjVyEy2qu8gftcErSlCT529UMiT3owZZraqZTYoxtAu/eng0IdhRQ*)
(*dbEoqXkWJbWOSkU7epb/prGrH0pqqOzu/+m+ekiO3IYQHkjNiDPRgDO8Nk21*)
(*Iw1WHes58IYwdQxLEDA1EGF74etBzmYbltiRGoOJvJh2FpKQWq71eneSmnc1*)
(*XgAmaLNsBzyRGm6GZZHRJTbj4FginFD9jAcDYreHKvlKMqnFbUUHReBkKKkl*)
(*VoE0jV39UFJDRUktSuFxHXk9owc7n2V3FUJ5KFeqHWmw6liNgQ8uU8cIm9Qc*)
(*jEd7EU5q0Go3j1B7DmoMSmrOlU8+FkxHoqfg54JASc10GP5lTlzhTeDd28Ol*)
(*0asD5Nuq6E2iSoWSSWqpUEh+xpQtDTCSoJCmb7sRR0ktjFOoSOSnv5EfDNqV*)
(*cyNvjU4dqaGOzRT44EIztAxWcbkiNVMvcsgc73UAA8bIYM1ktk5qfjq5IcNs*)
(*tKrtphXjc28DDW9NUwCD1qFxcAQUTG5w9JdGrx5Uo1N1sSipeVYYfgZ3X6kI*)
(*MLq+24Q3cVtWnfOo7L7aJvE8ABOd2sKQqS1MdY5+2PFcuwPwbCmpRSnCZgpw*)
(*cKEZ4t0JFxrVmzKxNA/vRZZXQf2GnQMJhNQIK9BkdlCkZgdHJPaER2rGwfgx*)
(*ESvw7u3h0riiN4YqRfJAanTK0xU4qVnOC8mvbT/eJi1uKjxSs7tcqPknTSTd*)
(*wDSvxfUlZIxfBccoUwPZNZZlO5riNFMmrhiNklogIh9rwV6RMEMTYph+hVbh*)
(*rmUnsey0zigH4yA1YMOYrq5oZz/Eqst0mMmekEjN0kjnY0JVsN3bswFxzWJU*)
(*qZNbUuvBKMVO0VRF8mvbciII9cToZWqFsJs++Y0erEj6gKm3UFKLUqbWsWss*)
(*wnZED6akFr3IISLiixqybCxT0+PewJLC7E6xOyaQAU5eWLwIPmveRGp2xbQz*)
(*JihSwwNL3EL0E9LiBaTAu7cHA3w6NKrYRTisAhE5qXn+foncBodvsRI4z1JS*)
(*M0Q+F1j2N2c/T5JV2LIktfAMSEWjByhXHg8NbKKf43qT1Ahl5wcsm8kUoOIB*)
(*toM82Oa5ydLe3LHY7/+ixulGo+s9xMg5kE5iN/tEWWNo6VBjPJjBYHJVJ+iR*)
(*/knN1IK4ha6KFqw8u5EADaCklnb5nJLscrVKhj9sfqJd0vpIQ6ZTfKdUklo0*)
(*3iZ2h0Yozz3W7qwEkhp6OUpqwcpDcEVJLZnCm9KucdF2dIVpkTV6d7R19EVw*)
(*mMddZQKtvs1DMzR96K2HmI6PndT8mIGTGrSqQ2dL3FYjfjDh9B3jyIrSjTjb*)
(*kARLApGfnpPSqgABxyGOoMR0OiCQUxwTOl49kxphc/ucOyw9oZ8jO17Om6mR*)
(*ydu0SH5K9IPX2XVEY0zy2z1A+XTvYZtnUncP50BkahqAfD9v1IBxjP/bGsNT*)
(*dzRZNKWwnPL8XxqNhUydCr00y7LG5wB5ls05Z4eyWB7fMaq0PIbEEvxIb7Vn*)
(*WfPGQHO23NJ+koviB6OXRg3DTcUtd1VeZ3sI5f+K3iw0fo7egDDktmKT0xye*)
(*BcIitZxVsvvcIXk4pWOGzfU1aDNmOw7haFqcfBryOWEF4rUimKC9uXQPp/gz*)
(*k1RJdu/dKrdVGlQr+AGuLgjgwxPeOsav6SI1KktF2f+B/TNoEPteF/2Ts4vw*)
(*4EBIJgLC+QKvQMsjA6ln00BzttDBZugYTuCWW37ukFuAPcqhjB2bJholwYZg*)
(*hfYxwmctTaekcQoAGKn568YOmJaclA5SszMvjEuEl79/4b6d8CzygYxeKLLx*)
(*m3AP35VyW5lo/ZPPCL5MRERJzVmWA8TyV2N2NjYnT9eY6lkn4Kf/uz0Rj+XQ*)
(*rsJoq2mKHEgNdxTefDhuCZ6Dka1D/GnnQEKaVuwq0M5COzNMZhOaGstcSVjk*)
(*GH0OwBS9DcHK1O3J5+UkNIdngeBJLXYQi5rUfFRXB1FMM1UyeW0D96TmKv9A*)
(*hHtRS0VpUnfLQ2V2jCtMBwfYZJTUHGQ5QED77gTGAcbsrJNausYUXsze6RLJ*)
(*ITWF0XieJyc1Pz4ct8QyE1PfxuPPLiA1V6ZGP64Ji4w3TcRGmn4IJM8YiwMS*)
(*QGoRO2GTM/EdGKSF1JrqSGqWjsKnH06IUhEEeq7hLmggt+qpwkYvkuoNtv4p*)
(*qTkIbw5jOjaFgujsrJNaTCZ7VC+P6wSSmnGwIdOR/sMDy6gSzwfv3rl0kprJ*)
(*GHxBLbGdH29rZ8VlYVqyJb90kkktjCkb7UJBBAbpIDWliEy7jALoNzkQOoqE*)
(*uxEHpSUITG8NRy9aV12mtAzSWGTq7caviSW1GNsxvb0oYlLLtstEahzHkZCa*)
(*f1lGlXjmHePP9JJa2Kb2jsKoQKOBYvEqvUxqsDWoUUjxll/cFOZuTc2uHkwr*)
(*76Y2BZh81BhVB9EaJhTtjWEoxiqlpOYg3Akb0zEeCgY7R6dLqe5FUVoO7EkN*)
(*aO9W06Mjh15n2a88xAmmHmt3umX3BmkjNUuzwza1dxR4BaLhcVB5upKpz5OU*)
(*LoxZIGJSM3Jm2h+Y9aq0kJq10zNqA9p/4WP6U077hhZfmHP4lUT+c4hMloYl*)
(*1loqKnLFGyekOsaORqYGAu2khn6Iz9E9Urep7kWxkNrAwICBaSZYg+7JKxBS*)
(*83YwJTWqwKX3qBjbJfmkFqoYRD6y8UhqAGb1FAupmXpdxxrAIQ6tOrwOPVRp*)
(*2kktDFGP7Sw6qYUhSmpJFtrnjekYECig+S4K+RzXaSmmpSKz3Og8pjU100QP*)
(*ELIgbBFgBSOEpziciBqWHFIjFHp8ukgNL0VilRY73crU50nKiA+T9JJaQPJB*)
(*akBNiSI1pl0OxWYwmT53W48pJbVQjexWzxOUaP10mVIdY0csy7nYYTZnkHtI*)
(*El7D+Lh2ZXCqe1E0lps6j7GspsgSK/Ae5WCnJYx0tIeE1Oy6usmqyEjNrVJK*)
(*aoHE+REopKrTiw/jC0pjJDXLKgWY3GYbh9JCapjdrRpGnVtcXdFEfKmeagNU*)
(*qgZCDKL1E6qir1468B1kag7LudiZ1NJSvcDqlk5ypaWYlko4qdmFbaZPQiI1*)
(*O5OMYyipBS5Tu5tsS6apYWQbbJ4eDEgaqZEbkwylg9RI9n5MAqbZGZkEkZgU*)
(*rM1Jc9pJE62fUEVYvQH2+WQO/ITI1Bx44OpMajBQCgi1mXyO61T3ogSSmuUj*)
(*bOgxeCAXBqnhZuOX7kpSi7cn27kdy1+7W3GVtGO373hKGKSGym22cSgdpGa3*)
(*owhIwJPmpksndp4lwbRAzDbaJd5RkPxhmHwLUy3Cug02+E/m2E+C8MnRcjpG*)
(*Z/OUDhCfZqe6FyWQ1Oy6FrTqk5CSmr1Q+0HKSY3Q+URsZwRXCfsSlhd17vYd*)
(*T/FMas75xz6g3CgFpKa0mJZsH1WL1xWklNRCMjs5QwD4uweJiopcCV9Pj1jO*)
(*0SYeOOExUkgTtKumiasRU92FoiQ1o5+gm4rgMbkzrEGrYD5UUrMcCLooqQUu*)
(*u7a26z+WPSQyOyO7XJSydPKuTgl8IoDpq3DgDdYiJTVoXaVGVad0UotX4U2p*)
(*CRkCgJJa7ymukCbV0XUgQr1xx4DTMnBCPwlvgnaOKgORz2xT3Zcis9wyljP1*)
(*FlM0bheE47+GRGqmK+KHOQ8cQmPCE1qfwJ7FTNYmkNRgu+fpyPJdoBiLY6pk*)
(*Ekss28Wn/Q5+NQ3O1jOp5TRSCx3TWhY228iytknqOUXjLhov4ef7/zR07FBI*)
(*DV86sVSAV3QWaFdk102snKuCpHU8j4j0Rtd+ZAp79Erw9uCwcTzA5MdCkyXG*)
(*JWCEpObWOaS3L0VpOUoNaJ0z7TCOrpuYAkXL1gf2pGbXYYA9qVlODXZ9O+Fu*)
(*xG5UWhpsHBBvcUjGOFqoML4d6qgIGj3GCAGtWEpqXgU8J/WORB+nu0yqPPfn*)
(*oCb9CGTnDBOlNHTs7l9TA1aK3Rj01xgtsfxTeKTm/9w0Cm100L6gph/ggdQs*)
(*Yc2VPQ7Z2pkdrExmWMbq3aooCwhsSM3yGHy5xO4sYBOuO5xCHlI6Xz35ncTO*)
(*bLvDLP8apQjdiHFMXKQW9iVcOdIwLh07qcHUT9CR0VYAmGaqZ5Jqd3bLSVOM*)
(*7oJcqejtoKtJLSRX5tMe0InU4nWVgZMa7o5SMTT8yJKnTH9Ff3WVs/HGNA+G*)
(*2bl3Z1KzO8aUswd7IMZovdA9ohTJtG46hpDUOn4OPJEaidPugk7SsVEiNsau*)
(*USw9Q+wzaffJ1O1JOgbJSKFKoDxPc5ZuOeEtnnx3kYqpBFBSi9we0Nuk1gty*)
(*JjXLg91m6012xvgkNT9TBg7yHjKhclDH1jHN+2igaHeuQ5xg96cASS3tSlqU*)
(*5RBNUVKLRqZuT9I3emGkdKXchk9oLIE2caJ8iINMc0rSlIqQA1BSi9yejj02*)
(*DFIjCfIBcm8eSW7klyY8kiSrVAyrQEgNP8t/8e2McSA142Dnq3erD+lumRoU*)
(*tMtbnpTUOgqtH8thHr09lNTiFSW1XpCHod01pJbY/pmKkJKSWvT2xDK4OpIa*)
(*ahgJqbm6NPnBzvl4vusvYpGTmkOjhNFVXJFaDrkLzs5yV/CYimmlp9QRz90K*)
(*tAv9EyU1VCZSQwuYTFIzrKKkFoYoqVGRCFgpbqM6CO2oCTQ4FSEloKQWh0kO*)
(*cXvE9hhCDUssqXXfmlqSSS1YA9IyrUSseOvEFIH7byOHEIKSmqWSMC6A/e1J*)
(*gZBa7AVMvkzdnqTGem2kdJ88BDMAUxiGBS60rybN5lSElICSWhwm2dkQb58B*)
(*abj7MaisQlVIpOYfVO2MsaRg9MhAMLlb/YwfxTvhBk5qDvlQUrNT7FOSQyUH*)
(*SGqJbcQkTCuU1KhMMnXLtC9qG901MrMJx3UShn9HUVKLxaRkkpphQ2JJzZVi*)
(*D4BTTWoJD666Rh7qOaR2Ae03qPi5CiW1tAi0Cz/A0jOQN0rH/MMWcFT09tjJ*)
(*1O1JzKMjpbvVZaQGI8QNV18sJyHq7qjIqi4WJdCVOc8RSegz3UFq8c7F3URq*)
(*zvGbf5Oo3Cqkvg2sSM3bVSzPpaSWQOENjceHoZJaqN4DECi8q7uSqduT2EZH*)
(*Sg8qyX3YkJ1VYZttOBNKaulSAl2Zcy8Nqc+4yjYuUgt2CMfrxLqe1AK8NJVb*)
(*BV6TpgnUVbjonBv6uStSMxnTC90m+gFi2VKWpGY6yxupWR4QAanlrAQwhWeG*)
(*B1NJTLIsXewFoXKQh96ODkBTX01I18XlbFiwZqNVymBym0NiBSipxWFSxNOW*)
(*q64bC6kFPmnG68S6idQcjnHOgfDSVG4VeE2aRp8fUnMYyG79MGpML3SbiAeI*)
(*gytw+BUGffNVjKSGHhN7B/Mw9CxLF3tBqIKVKZZIYNfF5WxVsGYblYNjWpeR*)
(*WjLbOhAl05XFVeHJJ7UAGyjejh0gqQVrmEN45pPUqCJTGH0b2MhnPqY/ufXD*)
(*3T09mRRxYR1cQccTPThqh294yDNxK7sAwCi4n64eqqkkJtmVLhqDqaJRGkkN*)
(*Fxo5OAch3nK2E2EObi9KFaxS6srCi4c7fl9KeHVKas4idxQBtjVJVs5O0jOp*)
(*EdY2dYmBKNi+7dwo3vA8KFIjsSSBnSqBJpGIsK27gNTwv8YeFVBSoyIRsFLc*)
(*RnVWeKRGcsWgjqQKSSl1ZZH1HEpqIclbfBvUdZ2PIawWS1IjP9jOvI7Xpeqo*)
(*KPu2f1JDI4oeIbXuVrCOOi5SM/XJ2KMCDxG45SlhF4TBZHdYqGaEJJPZ8ZbC*)
(*zpjI2hq9tM+q8EZqjJa0c5b+T7/VEai/MFpq/UVNjJa0v6kHIrmB9oRdN66Y*)
(*jQrG5Mqg7wEeeIdxcKcWoyM+UvPWQJalCKStPQ/hGEd9eNf1ny11g4Eoymna*)
(*1JMtWxDv7abhnLNSIMPczqS0K8mFCpZuYiS1pH1/6yFQiSW86RqFVGlht0gs*)
(*bW0ZX7nNAYU1y7/awRqSgPp3hgEMm4OsDmstQFMSqyXtKKCRGuiUVKBjKanF*)
(*LurKLJXAeiBsIPJ2TGAZoxH1Nh2VaocQntlozugl7HqUnRmm6rUjtQhKEZd8*)
(*2uB/CFtOfB37PN4BLBU73RBWr2X3s+yW8fYWqljUcTh4ztbU2QLMPCHyVm8m*)
(*FGI6CWp0xkJGS1BLOqmxgOFySlJhjTUYjQGcllgtmaGM0RJGaqxGaix6USqq*)
(*JCgJkUxH2Q0cNE5IeBHiEvU2HWWEarQXobIM1KFNj3KIc/Co3i5aDqPyk+Df*)
(*4rXBVPOm5nAwDGCybL646Ab9Tt65ehlkNyeHIlBS8ym8w8Q+9EgUqsH40Asw*)
(*84TIW70FSmp8luFzkANKai6lcUzOSDqssRBJLYJr+5CSGlVylEZ3SkmNKjyR*)
(*RK09KNQzkNSMnUsxfehAauEVId5mjdcGU7Wb2sLSMLwd7douOaTW8ciORaCk*)
(*5lOWNZz8yuw4PP1E7PjQ85xVYuXNv3UmtSaUMUwz6aRmJG2pTCc1ViE1IQs1*)
(*WAMcbCZexbTWshqkpEaVKqXRnVJSowpPzlFrz8rD/Iv6Frv4PxDPQ3IWjhsR*)
(*yHnBMfCcSY50JhRCUsM/xOWndA72o1f3k6FzPaRoNkys0hhaQGx4mn71GbED*)
(*SmpWwiM6HNNaXNbiNfU5NKAkFuhrZkpSsQqyHGAFjdSEHOQBUBNsJh3ZzJhG*)
(*SY0q+fLsTiOOeVBRUqMKr/sZI4L2IlRuK9w43m5IBhXIERpmMsbtVZwvaqYU*)
(*x4f40GM89zHyyMEzqeGFMllrd0AYAwevNEtjOuZj1JtzPaQLLpIpyxpOfmXa*)
(*DW39V0pqHeXWA5juacQ/1P+goBkLIAcZrp3UGJBTkkJqPAs5lmU4HnBilhUV*)
(*UlNhDQhATSis2ZBajm3fe6S5WEdJrReU/Pb17E5DmpGh4x4FxgGU1Hpc4XU/*)
(*Y0TQXoTKLgi3rCISr+I/wic8ET2my0iNZHIJltQ8mBqITJVmakdn88xRHyW1*)
(*SGRZw8mvTLwvmUY0JTVnufUV+Ni0+ETbyZFDSK15x6NKVjklqTuGKKTGcywv*)
(*QF4hNSnLiNqymg5r2soaVJJKagBJBqlp2WjYZ4Y1C5Ck6jIlv3E9u9Pw5u6O*)
(*4Y3llzCQklovKbzuZ4wI2otMsqxzy1rCvYrdibjcGuN8FnpMgOGi6bp2pXD4*)
(*0glERGrtbw5Sr6j7Scvkbk0tSqFXB25IDcc0FNYoqYUn06BLS2U6d3hKargs*)
(*vwuy/JPd6c6CLVJbWlNj9BsT9S351cRykOMYhdQYnoe8kOOELMNrj6rxQEuw*)
(*mTgtGyQZUKZjGiU1qkTK83Qc8cSNX840fNB5wTiSDq5uVXjdz+hIXTOTBiW0*)
(*ztFw17KWTIMRP8YUe7ttUEJ/ZRwQbIBkuq6d/8T9T3CdSkewpRfAdjrMMKCN*)
(*1ECrfTqSWrwjAq9hS0EsUHQmNfJsqdzK6DbpIjVI5lu8hRag60jN8gtz0D5H*)
(*dDy9s7R1NH01jdPuR2RbT6yxPMOLHCewyg8Mz0CeBRyXZbksww5ANseoj61B*)
(*JTG8lnTU41S6M8MaY333I6R3P1LFL89zU8SzGG4ePufiPpAOrm5VeN3P6Evd*)
(*MZMGJXz0GZ+bjmTaFywcqtH4k4eomNxloc4hqDY1XdTOGMsYJqBO1fbGV/uX*)
(*t6qRBnqM9mwHzOWaCeR0dlN+SAGpmTy8ZbWbeqkDqeFltMuzpxTUpGlqshSR*)
(*GrRatzWpN0kNtzkiUmOapKZgGseqieUYHc1YBdNknpOUxCk/MwIHeS7HsVmG*)
(*GYCMQmqQ49XELmGaRmptsIY+s6bdFcnQHUWoEiXTfEQ+PUU5kaHRgqX/NP6a*)
(*zWYpqfWCwut+Rl9K40waksgDV9OXJyRnoUPbQ4UTXsJ5gc/nRQEm/XPc/wTU*)
(*qXRAY50YDQk2jNcNwdYj+O2kxrgiNTv7wxuS0J7U8KAXbwIHUqPCRUkNWpGa*)
(*qVp6mdRQs32SGnS1rKZiGqvd5agmVmBZkWUklpVYPs8LBUEoigq1MQILeXUv*)
(*yByrP8Cm3hmpJMCybUm/b7J5Z+WSz2xuUkLffE2VMAGMegjPisbVmCZlO4cP*)
(*KKn1ksLrfqa4NPD80yicQeyEjjhTqO+cczSkFlS4aLoo+isapViSGmwPTjxd*)
(*n2EQ+Oq4psaYSQ0SkpodE1m6X/JO4kGmKcDSKpMlSGV5x7SunEGcC0VJDRJ4*)
(*PEpqukhIzbmYVlSm3d7YSgYrqTs7cqyKaQLDiSwnc3yB5wo8X+TlipSvykoS*)
(*iwIrMYwIGaH1aJp6SyQDdHbTXny99Pprhskp5qnJdNcBJTWqblDY8zJ+rY4O*)
(*33LithtcaXSSVKgiiAlpJzHkYbCjsbTdifjQdjjMwSTjAIcjQyI1B0/oMLkH*)
(*QGpM2z2NpjBDYzRGBzo97GkjNU93P3bsA+ENSUtjoE23DNYMPAoNJNt4RUmt*)
(*ozr2IkpquuycGOrfOtYkTmrq0hnLc5yaWPWeR/VxW/2pNFbFNIaTWaHAi2VR*)
(*qkr5er48VKoMl8qDBbki8jLDSZCTACvqSaU2IMAcr6YsB7M8k+O1FTdGc3vQ*)
(*cHnGshp9n1q4opUZgYzR6vAVa+CXc3b4pmMMkyz7Q1A2+w63qLwrvI5n6tuB*)
(*559SGRVO0ttRF4HXpJEDPrQtK9yyrUG7Oh4WOKmh3g91OGj9hEZqes7YuaCJ*)
(*XRB7SMs4GHjdUcRUvabQyjjFW3FIhNuAK3BX3OOkZtcHSOoBH3epIDU7xxJU*)
(*5r1Gas4dxgrTGPVBNBXTBJ4TeX2vEH1tjVMxjRUZVmL4AidX5cpIpTHVGJkd*)
(*HpkZGp5uDE5UG2PlxkipOpgv1cR8mZMKCtMBRgJQBECEOREOCGBApzZOATL1*)
(*+yoAW7YhO4q0P6rmy1eTD5neEY2ZI5AHp+3/cib/BhzjMeOAYEnNdCIltRgV*)
(*Xt8zOhL1robQ2mYIbmiB7UPSsiZN49oPqREeFmCAhLlAa4cTNam1RZUWmAYx*)
(*UnO1S7+l/bE7QNSAsC3pDocQCKkReoD0kprlrz57O0g5qeHyQ2pNLkNksJpC*)
(*Zzwv8LzI6xs7chzDs4z2YJpCapzEiCW+MlwanxtdvTAzv31u1aaJyfmhsTW1*)
(*qfVDqxfGJtfWh2aKlXFRHoRMuR8U+7OFgVwhl82DAQkOiDArgByXU0hNSfpj*)
(*ak0hpGbcnEBJLSglZMroKUXW/UwO3+GiIFpSgy7eakTVQW7rMLzuZ/Q36l0N*)
(*obVtmnwdhoBzTUYcyBFGmD7HMk5qzmGMH1JzON0Boyyr3dK7Akx2+cfuACMj*)
(*NTvZVVQyZVdL+KSJ9wHyYno7K3aZ7AzW7NTVhn85lBQnNQ3W9KfTOI7nORXW*)
(*BOVfhdtYgWdFdYNHXubEIl8ZLIzODK7ZPLN+x6oNu1av2T6xZsf4xr3TO69a*)
(*f/DUtm1H5tbsHh1dKJdWc9zoABzqz9YHstXcQAn05+GAzGRFCAQA+SzkslCH*)
(*taa5lNSoEiqT3yDsVJ67n9uz9OMTQmqxfyuY0iHfsc4ZmzccOWTlqqNC4li9*)
(*12ZSZ1nWBvorOovZHWZZk3hbmw5z/it+jHPmkGzs+An1TbO5HSjZ/cnn5Qj/*)
(*BDuF33bN17HqAhRJ0wcrP20RvbU+5TAtQvr1I1WgchgRlqSmwxrUnlRTYU0Q*)
(*9MRKAisLnCyIBaFYlUcmG6s3TG7evXZhcW7D4vS6XWMLh6YPnt1y+t5Dtzx+*)
(*7TV37tp5eu3cFcONHbKwJsdMD+TGBrJD2YFarr8EBwpsTmagBBjt/diMuqN/*)
(*zviyB92xPxBSo0q7ktD0zpN1eJczfd4xrqCkZtjgULTEqmOdM8hKjXNXdNV8*)
(*6MEOeVJXbCdj9KH1hn7iQGr+r+vcGcj/RG6S2z6Adhv8Z8v1LFOl+ZEDqfnM*)
(*OVQ5L8YR+oHATfJ8rjFG0nJXWypILfnVSEUih/FrS2qsSmqQaz2vJgq8LPJ5*)
(*iS/IQkGSy3KlUZxcNTK/ZWb7vvntB9dsPzy3/9TGk/fsu/TCjU994u7nfuGB*)
(*u148cc17du24aW7meKO2Ryps5fl1DJgG2RE4UGOzZQEUWSgDRhxg+H7IDkBG*)
(*gTX9HkgLUrO8z5yqR5QEZwhDfn7W4VqmP7klNbvAjITUoNcyRhMzkNgAEx+M*)
(*mdSx6nRSc7gXizwru4PR7mFpQLqqNBpZRsummkSrLqgBYhr1lg1nHGPpEPCO*)
(*FPbIdSY1B++XZAVuMCGgkbiCsE0ilMng5Ddxikgt4TVJ1VEO7cg0t+O3ITV9*)
(*Mw+O5UVBzMtSMS+V8nJJLlfzw8PltWvGtm1ftXf//IEr1h25Zv3Few49/cot*)
(*X/jGh772O69/7fsfffHLD979yslrHtm549bVq68dHDtUrO7gxXVZdmoADg8w*)
(*dcBUckxhgBH7dVIDTBbakRqgUUHvKiHOMGI5j1nnswhjNpzUuqyq0aLFbYsL*)
(*dZx2yUnN83WBI6nBtFVplDI1H16TgQ8xV6Me7ycRh/qGnEnNufslU5Yj14NT*)
(*ZdrlcKGclRwmjo45k5iE7GbgOkNKamGIklp3yDnqa8Ka9nAap6QlUmtiGstz*)
(*GqlJcjFfKBfK1UKjVhgfLq2fG9m1bebogXXXXbnh3NntTz995vPvPP5v/vDt*)
(*P/jzr3z/J19553defvGXLl168+zZDx48/ODC7ltXbzgxNL5Xqi3A4qqsPJEV*)
(*BvvZ4kpGWgkVUuNUUgPaJpBA/Q95pRolNarekzdSg9jXrZaBmeUBpsApuKLE*)
(*ppROXh2n3dhJrWt6SBgyNR9ek91EaiGFiHa+K+GytDm8YN7Sk1v6dpNi5AvD*)
(*KkpqASqNg4UKV4cxq74kTUvaHvwc09wBUiW11lb9vCSKspQvyuVqsVEvjTQK*)
(*08OlhdVD+7dOnTg0f/HaLQ/etv/Tb9z7u7/5kb/9u3f/yz//5l/9n//qu3/x*)
(*hS99/+XX3n348S/cdOdHjp37wJ6rLq3ferqx6oA4sgXU5vrzYyu58jIorYBC*)
(*n0pqbFZ9vaT23hKgvmWtlSipUfWenMdsGFdh7L/ipopSHafdeEnN23fyPSI8*)
(*QsZrsstILd6VL1NXJOmZfiqf8FsyBwu9XdSUg3OGgZMacJTpGMLcKKkFKPLK*)
(*p0qynNtRfwZMITUONkmtuaymPqTGqVv1i4IgiVJeKpbkSrUwVC+ODxZWj5R2*)
(*zA1fvXP1HdfueOLWKz7y/rO/8Ysf+MmPfuG///Nv/bf/9b3/+v/8mz/6x6//*)
(*xp996is/fPHj333fq+/e98Gv3Pzet64+8+jG/edH1l8hTmzpr0wt46sZKC0H*)
(*/ErA9UMup66hoWtqlNSoelXO86zbfDpeBT0mIbNPz6rjtBseqaFZOaypUVnK*)
(*st7wTwIfWeh1e5nUwqth9HIOf7UcuWGQWkd1CPncf9limiks83fVbSynngSK*)
(*khpVZOo89Wukhq6psSqjcYy+oCaKoiTJeblUylerxeF6aXKwtHassnvd2Ol9*)
(*Gx45f/j1h2/86kcf+g+/+fH/66+/8bP/9YOf/ewP/8fP/uCn/+3bP/r7r/z2*)
(*Tz7xrT999df++ENf+8GTn/7W3U+8cfj8e9buO1Vat7t/cDYj1TKsdBnklkOu*)
(*T9urH0BGdwQqnTVhjZIaVe/JYcx6mF5dHZOQ2adn1dldh0xqpjxpAEAo0P4A*)
(*jvGhqRpDIjVLmY7pYlJDi0xSw95aIVRSMx3jaqHQOVtnecvWlL/lnyy7osPn*)
(*CZRD0WBi5sq0VCaVszrO+0vPqbHNBTXtPddtpJZXSK1YqFVKI/Xy9FB5/Xht*)
(*3/qpm45sf+6uU1967oHf+eLzf/f77/zsb7/zs/+pktrPfvbDf/i/v/Pn/9sv*)
(*/ejv3v7Bf37r93/6+u//1Ye/8+/e//NfOvngswvXnC9t3rd8dFWmWMsIUobl*)
(*lzFcH9N6qxqAmqn6AhslNaqelMNcFg2pmQ4gNpzKrzq2WhikZlwUxzTaAQgF*)
(*HElN/xVdAHKQh0t3lF0/8dOXQGpJzfPlHP5q2XyEwbzpGPRXn8XBrx4sqTnI*)
(*odelRc71Q0mNKhoxlns/cqyOaTqpCSqoqaRWLhbqlfJovTw7VNk42Ti0afaO*)
(*Y4uvPnD+66889oe/9Nrff/+d//cv3/3Z//7bP/sf3/vZ//e9//p/vPuTf3jn*)
(*P/7tJ//9f3nrx3//5k/+6WN/8tfPf+UbNz7z0pYztxQuP5AZX5Up1zOSlOH5*)
(*ZSy/kuEGNFJTNxVRWU29B5KSGlWPyiFsC5vUcAPoFBClOtZ5qKRmCq5wYyIL*)
(*81InyxozEURIpGZnDNpDstksJTX/l3P4q2XzkYwU/BgHUnNbOmdSc5WVsywn*)
(*kbSvzqeI1OK1gSpU6d0MIzUOJ7WCLFeKxUa1Mt6orh6pb54ZObJl7o6rFl+8*)
(*6+w7T9/3nTef+uFXXvrJb3zsn/74y//806//8z+++1c//eKf/PjNH/zxi//2*)
(*xy/8+G9e/bt/eusv//OLX//mjc+9vHDjReHyvZnxqUylmslLGYFfxrVIDSik*)
(*BjTPT0mNqoflELa5mhdIfLjlMYGHjlSE6ljnlNSSKcsaMxEECawFaAwltcAv*)
(*5/BXyxb0P1IsOctzbniGgciy7ABbow/8uvGK+kCqkGTyG0zrvkeWMdbTOI5v*)
(*PqRmkJqskFq+UCmWGpXaaL22anRwYXb80Oa1F67Y9fj546/df+Htp+788vP3*)
(*fvPN9/7uL37gh99+9Ue/99Z3//Xz3/rW47/2zQe/+73Hf/znr/zDP378b/7m*)
(*w7/6qzd+8LmNZ2/kduzMjI1lKuVMXsyI/DKeW8kaa2pAH9RQ31qE7tJP1YNy*)
(*CNtIooWgrt6V02vC1bHawyY1k/BQnGKanfBRYyKIyKoudaTmrVoiJjVnhURq*)
(*uIJFv6DUg6RGFaOSMweFNMBxtZ5TU3cU4VmO53nlP1ZQk/omNUnM5/PFQrFc*)
(*LFdL1cFydWqosX5qdPf6Vdfs3HTL0cWHTl3x/gtXPX3zkQ/efviF+698/anT*)
(*n3j15lc+dOKFDx599eUrf/lrt//pf3zlH//u4z/9i5e/+s7JJ9+3+sTxga2b*)
(*M6PDmUoxkxcykk5qbJZp7iiy5PAoqVH1phzmNQefEBRbUUyLUTGSGiRe6EnI*)
(*FJkoWdYY+nOUhJs6UvOmbiI1V33DLpZzyIH8yKBESY0qPCWE1EIdTe3DtfU+*)
(*NdgiNfV/PCcoSVBvfZSlQqFQKpbLxUqlWKuXqhODg2smRrfNTe/ftObqHRvO*)
(*7Fm4cHDzhf3zNx+Yu/mK1Xef2vTQrTvvvnnT/betf/K927789rk/+9HLf/tn*)
(*r/+nP3j6Mx89dOmOoSP7MhvWZIZrmYqcyfMZiVsmsBqpMSqpIQ6vhWmU1Kio*)
(*rGTyDwHiFZ1Y41IspGZ39cSSWgL7J+i0f0K8pGZnm+kwVz4kIaQGk7Gpgk9S*)
(*s5Qr8nJFaoHYYMrZ9DklNarwFDYfkfwpgu89LElNhzV1B0hFPM8roKbuz58v*)
(*Fovlkkpq1VKtXq6ODw6uHh/dNDuxY83U4rrp/fOTh9aPHV4/fOWGxrHN9ROL*)
(*Izccnbzx6ok7zs4+dWnbL37y/J/9wUs//r3nfvtX73v+sU3njguXb8jMjmXq*)
(*hUxJzOS5jMgu4xVSYxBS0/7TFti059QgJTUqKguFSmr+M6HyJufKD5zU0F5E*)
(*QmpJ+DIzCZG5SV1Eai6uEjupGZbE3h8iIDWHQNEVqfmxwSFn0+cAk6vrUlHF*)
(*IodhEj2pQTtY0x9bY7WlNUHdoV+W5UKhUC6WKtrdj/VSZbRemx4eXDMxvGFq*)
(*ePP08Nbpxvbp6q7Zyv41laOb6icXRy9cNXPX9Wseu33Lhx8/+NWPX/jBv3z/*)
(*d75872dfufres8NHdqxYP5GZqGWqUqYoZGQuI7ArOKaPYQYg07r7EUIkMeTD*)
(*G/cMveMreq28KZLb3ui57fATSfJxPsZDX6Idz7OMqiNvFP+D3Y7ULHPGZyXy*)
(*qwfol4LKJ0AFWLpAZNdJAEZq+F+XpmGyS4RXCodLW1oCbIYPznQklns42PRh*)
(*sFGcT+gLldQs/5S0QUHVBQr7yy5yUnM+OAyTTGrtLcKpy2qi+pxaqVCsFEvV*)
(*YrlWLA5WSqP18uRgZdVIde1Ydf1YZdN4acdM5cD84LWXT9xybN3DN13+/ENX*)
(*fOzZ67702rlffvPmr3/8ljefOvzwhVXHtmc3T2amK5mRQqYmqqSmPqSmLqj1*)
(*QzgAYQ4gU4S2t8gSsnWUw8Tkyt+mVD1V2HTJVW8MsPlIMnE+xs4YB79EO55n*)
(*oVVH3nD+axsnL0iMaTAmUoNYrJ4ExdvzSRY1Ovoc7XdjGmasU/u5YZbJVqaC*)
(*mIpg57I6VgV+CZ+dNtgQzk9uoZIa+cFUVD5F8rWAH7/kitSiEbqsZvpE366f*)
(*0x5WU3fpz8ulQr5SKFSL+XopP1gpjFQL4/XCdKOwaqiwdqSwZbqyf8PIyT2z*)
(*d5/Y/PSd+199+OjHnzz+mWev++T7j772nn3vPbPq+t3S5ZOZuUpmTMoMCpmq*)
(*kCnwGZFbybH9jEZqQCU1Fc5ybckdqeH3e4TxNEcCZVn2bi1sumS4DufeaBlL*)
(*BHJpEts6HuA2vPFudK8KrTrLOgxpjrDMNowWD7BjRyy3lsdSRktSQ2cB0iK0*)
(*bbzMYikRobhppIBOb5dAzyKMB8gPTkWv9kxqbq8SXuZUVJBswiIfj66WyWIn*)
(*NcsPdVZTpMKaKBZkuZRXYC2vwFqtJNeL0mBRHC6LE1VpdlDeNFXdt3H81L51*)
(*916/69l7jj7/wNEXHrji5+5cfPSG9bdfOX58q7hz8rK5UmZMyDTYTI3NlLlM*)
(*nlsusP0sM8DALIS51j0XKqBlQRPTKKkRyrLs3VrY1Mmyc5p6o4nU4jPWWnZu*)
(*0ORAEmt/8oVWnWUdpp3U0itXAUBcFRIYqUHTahrCaMnb4MsolInUHA7uelJz*)
(*CDIpqVF5U/JbFh+thAMz+UWzlPk2SJbleU7UYC0vSUVZKuXlSkFJUq0gNgrC*)
(*cEmBNXHNSHHbqqHD22bOHNpwx4ltd55YuP34+puPzJ7ePXh4g7xjcmBtVcM0*)
(*JlOFmTKTKbLLZLZPYHIczLEwpz2gBpuY5onUYNzPqUVzFYerU1JLsvAGsuwq*)
(*SZj0ScZRLEELec7xDkZvQg22tDx6UiNxIyHVc6LaDnTaLcR0cCzGW5JaNpsF*)
(*HkgN4rCWREyD9hOfZTGNGoiG1GKPAFGrcFJL1BCjSrhi78x2Mrq0Plr115GY*)
(*YK1jDpFYGrAYTCqsqS/B5kWBlwQhL4lFWS4rvJaXqnmhnheGCvx4RYG10rbV*)
(*Q3s2jB7aPLp/Q23P2tLOVdKWcbCusXKmmBkVMnWF0UCmBDJFuLzA9EtMVoCQ*)
(*g/qL1Jo3XSj1mwUeSS1exRsc2k1Y0VtCZSm8gSy7ShL4AtjI1bmhGkZ4WOw1*)
(*6UqowVEGfkkmtYQ0H+hBUoP61NtOasmQaRHfjtTsSkrYmugQ8Exq8QaBqGF2*)
(*pBZSR01p9EuVOqGYhpIayVc3qZZpOBu3QfLazv28ymuCLErqzZCyVJbFiiRU*)
(*JW4wr8CaNDdSmh8vb5wsrh8T143wa4e4VbXcRKFvRFxeZ1VMK+YuK8K+Aszm*)
(*GSBBRoAcBzgWsEyOZbS5IAeg5zW1eBVvcGg3YUVvCZWl8Aay7Co+u1Ag3Q+0*)
(*y1VfCjtuJw+Vnb9Yi3Go2gk1KcrAL5l3PyaqgUDrNkLy7he95cGTGoR2G4nE*)
(*K0JSM52FDq5oSA3GDSyoVXaYFlJHpaTWTUpma6Jd2sA0XD1FasYza/r6msgr*)
(*sCYWJCUJBZEvCmxJgDWJGSnxoyV2pJgbKfQraayUG8n3N4QVVW55mVlWAMvy*)
(*YEWBGVAwTWYYEbJ8i9TYFqkBlc5SSWrxSp+UKaklVnhE4RBOeGu4wGdeNFZB*)
(*s3V43iHUuJ3Q5ZpCLMuxkCgQ0IWaZGlb4I+ZBNKOoba4/2wDqTRXxsTVtUIh*)
(*NQhTSmqmU0yDK1hSIzQ1XqEDwZU7xfMh+Tw5Bafyr4S3Jmjd9zjQLoPUuhLW*)
(*8KmNQXYXad0JKahPrgmCLPCywOV5Js9DFdZktp5n6nlQz2cb+exgIVeXsxWx*)
(*v8T3FdiVMlwpwX6JyUkMFBlGgKyBaSqp5SipeZdpwkpgINrjsmQH54jC21WC*)
(*bXRgJZLjA7TBZIbb4y1HRAIHCGE9U1JzpV4gNVPHNn7Ite4FIh+/NhdIbpwG*)
(*PJHa/9/etXZHCsLQj7sV8DHTdrv//48uSGUzSYjgEy33eHocqxDCJeT6TPEG*)
(*jB5rlFohWa5wTa2oMFhRIArhcAwKKLVfE6BYu+WVNXA784tYC0qtG59ZGxe7*)
(*0trl0ZtHp9479WfQXw/99VR/7fLulq9n8/loPvq3Z/f2aH8PphmMGozptel0*)
(*G2TauBhTlVoO0KnFgHo1rUDQjIKNG8VOnbFpHQWK0uxX5AxG2F6UnQExw+BN*)
(*DlvVRW+fYHO5ZQavxFbFbn4hMlZF+ClbvrkxsDqUfvvUZTbmXBo0rspKLT0C*)
(*hMl0sevYVOoAsNVRY1Tyne3p9hee0lfcEoHJQZehy2rbnLAqANDymFJrJ3TT*)
(*A2t9b1farjd9p4dOv/fm89l9PtuPh/kY9Pugn49xGfTQq75rOmMX1VnRZ1ov*)
(*08z4hNqLUlMafkwNKrViPZw7Bexqww3YeEvQjILtoGI7LkaqYpVasIQmcqgL*)
(*ihovMUt2VWq+TPQz0TM7ua6cHpFB58qDLYfVoS67k1KL0Z4d4JS3lMyJxN5E*)
(*qWUdtR7oZEvMHhW536CigqJkDR4IHEYr1Wt3Umoq8o4guBEpNXeRrTNda5Wa*)
(*eQ5Wpg0fj+45uEtsVpq5pVdDr3t3m2Pj3xvilJo2rXa6zC2NaadFj+9+DBrt*)
(*Hkrt4FgNGRs69LDaK2KgGUWZZM5FyUoNeps+ZcwmeGdbfZpSQ9CvDhSmhp2Q*)
(*SKSYMcfYyTokawist5BVHx63UWpCV9K4Kig1SOZZV8BDoOuELkP/omYfRku/*)
(*QqnIKrVyol9FsSg5jQw8RzM+lGk3U2rQfvgTTkmTUvM3Q1rtZpWa6bt26K1G*)
(*6x+DXdGjLntr26azkm18b4i7ZqbfjPt6mm6/lZo2TViMualSO8WYqtRKA80o*)
(*9iDJ5oEot8ByBqkiZ9hkmVZIrhJzYFVqQhNi23e1k3rMI2sIVKW2EjSuXkKp*)
(*HTMpozZSorJOyy3/Zoyq2ApHZp5otMJJ/x4aLYC2Av6EEQa+XWT8OW5xbxpx*)
(*38i2f7vO7m811ptxtzYq+7PzX01zH7V2H7n2Ys0rNavNvCS7rlILKME8ysmq*)
(*1EoAzSg2Z8vm4ShWoJBsrKldJmp6mcEGqtGupdSQz9HKSggyLSg1GkmqUkPl*)
(*r1RqCAvGLyIMhKX01ZUaVTpoBxUBu1uWE+Ah6UoN/pdl4H6DSC5WIGqWZ2JU*)
(*n+2pip+GY2YKDzRaY+dtLhcAWaAmKE6m6ddn1giccDNWiY0azN3d2OrxmTSn*)
(*1LwIM/Caml+8TLMarsFKTb2+UaRkP5fABJaQNWaWABpG9qDK5iRMyYLY/XMr*)
(*ms1eFuRXrEy7ilKLjeI9lBrawlqySaXpSKxX9sa1lFrWQGOrQ+sN+Q7sKV25*)
(*BrM9yAYo2kYYFhLdCw9Zo9SOmX9nBaCs1FTaS/vZELHG7JS+qzgdMVLJXXYk*)
(*/6ExRU3o+yE2fcMtjEKbdnF7+Tc4uutkVoaNqswJMz2KMMUoNSfGjHuTyHRN*)
(*TQGNBpVayaChJoveC8JULKdCNrBm1Kh4MNg+upD/YzZvlaaymQbcgkqODR8F*)
(*LqX9Jph9Tu3cHpEHMlpZCcHh0JhN6lqATQbIJr4S4irrw0TL2b6WTwWzJcON*)
(*6L+KaJPTGZ4LuQdjbWEbK7tRLiTxkFj4is3CGyaxKXXR7Yh7sWYKbIdF6cwW*)
(*pdC7ogRQAqBJme01gS174KdxCblXmM0NkGxgh2+Z5lSXE2b/xZhfpuLM975g*)
(*UX4hSu0SQNyIsZQl0hp2LQh3P4fM5eDqYSTd7MVNi0UeOikIwwddTYMyzX9j*)
(*ZVapndUvtEVhXe9zJ4lc4LkU3aT29R5bNmxzIzBi76xSY5lP61Wv6fe59N4K*)
(*hpyfpPuwjV3ghNlDZFkk0y+WVi2GyTyZQ4nHtjS0JaR51NRw1AKlVuCNDRUI*)
(*glITznAerNR+GmYDCPrvq0zTSKk1k/xSk+oyc0HpchqNBcvS6Lw7NyMIG9Gx*)
(*s+EuscaKil0Biac4MRJTavBwRPuG3PFIlRp8GVRiPny8Q7xtgnPQUXUI7wTE*)
(*LsHV6b1ASZuFFK7KQ2adS/YFstavo7M3cGe2OYcNYVmpZR2bmNMK++SmxCp+*)
(*ZoDaCc0jKd93aVm166rULgW2x1VVaidhgWORzg53P3p1Rp81C0dtaHaZWKbU*)
(*9NwMS3NXiKrUKi4BmYTm9RSuJlkZ5XyQZkim/ZqAvq5SplLzlSYqNWrtsgC+*)
(*gfU3BSRYilKb5Qwi7X5KLYyaXAtPRKxRUKnRo9gzyeU3dtm4O0WpoQP9bVS0*)
(*tKzadVVql0JsAqpK7Xgsdiwj1v5fSrv81bHFoP5ElI7FRrSnvA/8r1CgbMPS*)
(*JlZULISQavpRg87cot3QLA+lGVVq7ENqscGiEk537AFoT6g9mJeo1Cq2BWVp*)
(*zM+JvYB4uxKx6mS2LPDDMZh1NZRsMflWcmZYlG0w2qSHOxqZY0njPyHiDto=*)
(**)
(*"], "Byte", ColorSpace -> "RGB", ImageSize -> {495., Automatic}, Interleaving -> True, MetaInformation -> Association["Comments" -> Association["Software" -> "Greenshot"]]];*)


(* ::Input:: *)
(*ColorConvert[image,"Grayscale"]*)
(*Dilation[ColorConvert[image,"Grayscale"],3];*)
(*MorphologicalComponents[ColorConvert[image,"Grayscale"],0.3,Method->"Nested"]//Colorize;*)
(*positions*)
(*Overlay[{ColorConvert[image,"Grayscale"],SetAlphaChannel[MorphologicalComponents[Dilation[ColorConvert[image,"Grayscale"],4],0.3,Method->"BoundingBox"]//Colorize,0.5]}]*)


(* ::Subsubsection::Closed:: *)
(*check loaded data and detection*)


(* ::Input:: *)
(*Manipulate[*)
(*plot0=Show[dropletImages[[frame]],ImageSize->500];*)
(*plot1=Show[trackedDropletImages[[frame]],ImageSize->800];*)
(*Grid[{{Length[sizes[[frame]]]},{(*plot0,*)plot1}}]*)
(*,{frame,1,Length[images],1,Appearance->"Open"}]*)


(* ::Input:: *)
(*maxSize=400;*)
(*singleSizesQ=Map[#<maxSize&,sizes,{2}];*)
(*singleSizes=Pick[sizes,singleSizesQ];*)
(*singlePositions=Pick[positions,singleSizesQ];*)


(* ::Input:: *)
(*maxDistance=20;*)
(*Histogram[DistanceMatrix[singlePositions[[1]],singlePositions[[2]]]//Flatten,{0,1000,10}]*)
(*Map[If[#<maxDistance,#,-1]&,DistanceMatrix[singlePositions[[1]],singlePositions[[2]]],{2}]*)


(* ::Input:: *)
(*ListPlot[sizes[[;;;;10]],PlotRange->All]*)
(*Histogram[Flatten[sizes],{0,1000,10},"LogCount"]*)
(*Histogram[Flatten[singleSizes],{0,1000,10},"LogCount"]*)


(* ::Input:: *)
(*ListPlot[Length/@sizes,PlotRange->All]*)
(*ListPlot[Mean/@sizes,PlotRange->All]*)
(**)
(*ListPlot[Length/@singleSizes,PlotRange->All]*)
(*ListPlot[Mean/@singleSizes,PlotRange->All]*)


(* ::Subsubsection::Closed:: *)
(*check tracking*)


(* ::Input:: *)
(*Manipulate[*)
(*ListPlot[{#}&/@({xDefects[[t]],yDefects[[t]]}\[Transpose]),PlotRange->{{1,nx},{1,ny}},Frame->True,PlotRangePadding->None]*)
(*,{t,1,Length[xDefects],1,Appearance->"Open"},TrackedSymbols:>{t}]*)


(* ::Input:: *)
(*boxLength=20;*)
(*nDroplets=Dimensions[xDefects][[2]];*)
(*Manipulate[*)
(*Show[*)
(*dropletImages[[frame]],*)
(*Graphics[{*)
(*Opacity[0.3],Table[If[xDefects[[frame,i]]!=-1,{ColorData[97,i],Rectangle[{#[[1]]-0.5boxLength,#[[2]]-0.5boxLength},{#[[1]]+0.5boxLength,#[[2]]+0.5boxLength}]&@{xDefects[[frame,i]],yDefects[[frame,i]]}}*)
(*,Sequence@@{}],{i,nDroplets(*goodTrajsQ*)}]*)
(*}]*)
(*,ImageSize->500]*)
(*,{frame,1,Length[xDefects],1,Appearance->"Open"},TrackedSymbols:>{frame}]*)


(* ::Subsubsection:: *)
(*check overview movie of tracked droplets*)


(* ::Text:: *)
(*There is jittering due to inaccurate trajectory tracking*)


(* ::Input:: *)
(*trajectoryParts=Flatten[Partition[#,lengthThresh]&/@goodTrajectories,1];*)
(*cleanTimes=MapThread[Range[#1,#2]&,{starts,ends}];*)
(*goodTimes=Pick[cleanTimes,goodTrajsList];*)
(*timesParts=Flatten[Partition[#,lengthThresh]&/@goodTimes,1];*)
(**)
(*boxLength=20;*)
(*allZoomedInDropletImages=Table[Table[*)
(*boxCorners=Round[{{Max[#[[1]]-0.5boxLength,1],Min[#[[1]]+0.5boxLength,nx]},ny-{Max[#[[2]]-0.5boxLength,1],Min[#[[2]]+0.5boxLength,ny]}}]&@trajectoryParts[[dropletIndex,t]];*)
(*ImageCompose[Image[ConstantArray[0,{boxLength,boxLength}]],ImageTake[dropletImages[[timesParts[[dropletIndex,t]]]],boxCorners[[2]],boxCorners[[1]]]]*)
(*,{t,Range[lengthThresh]}]*)
(*,{dropletIndex,Length[trajectoryParts]}];*)


(* ::Text:: *)
(*single droplet*)


(* ::Input:: *)
(*Manipulate[*)
(*allZoomedInDropletImages[[dropletIndex,t]]*)
(*,{dropletIndex,1,Length[trajectoryParts],1}*)
(*,{t,1,lengthThresh,1}]*)


(* ::Text:: *)
(*all droplets*)


(* ::Input:: *)
(*Manipulate[*)
(*ImageCollage[allZoomedInDropletImages[[All,t]],Background->Black]*)
(*,{t,1,lengthThresh,1}]*)


(* ::Input:: *)
(*counter=0;*)
(*pthMovieOut=FileNameJoin[{NotebookDirectory[],"movie_"<>ToString[dayIndex]}];*)
(*Do[*)
(*plot=ImageCollage[allZoomedInDropletImages[[All,t]],Background->Black];*)
(*Export[FileNameJoin[{pthMovieOut,"frame_"<>IntegerString[++counter,10,IntegerLength[lengthThresh]+1]<>".png"}],plot];*)
(*,{t,1,lengthThresh,1}]*)


(* ::Subsubsection::Closed:: *)
(*check clean tracking*)


(* ::Input:: *)
(*xDefectsClean=Select[xDefects\[Transpose],Count[#,-1]<6000&]\[Transpose];*)
(*yDefectsClean=Select[yDefects\[Transpose],Count[#,-1]<6000&]\[Transpose];*)


(* ::Input:: *)
(*Manipulate[*)
(*ListPlot[{#}&/@({xDefectsClean[[t]],yDefectsClean[[t]]}\[Transpose]),PlotRange->{{1,nx},{1,ny}},Frame->True,PlotRangePadding->None]*)
(*,{t,1,Length[xDefectsClean],1,Appearance->"Open"},TrackedSymbols:>{t}]*)


(* ::Input:: *)
(*boxLength=20;*)
(*nDroplets=Dimensions[xDefectsClean][[2]];*)
(*Manipulate[*)
(*Show[*)
(*dropletImages[[frame]],*)
(*Graphics[{*)
(*Opacity[0.3],Table[If[xDefectsClean[[frame,i]]!=-1,{ColorData[97,i],Rectangle[{#[[1]]-0.5boxLength,#[[2]]-0.5boxLength},{#[[1]]+0.5boxLength,#[[2]]+0.5boxLength}]&@{xDefectsClean[[frame,i]],yDefectsClean[[frame,i]]}}*)
(*,Sequence@@{}],{i,nDroplets(*goodTrajsQ*)}]*)
(*}]*)
(*,ImageSize->500]*)
(*,{frame,1,Length[xDefects],1,Appearance->"Open"},TrackedSymbols:>{frame}]*)


(* ::Subsubsection::Closed:: *)
(*check cleaned trajectories and their intensities*)


(* ::Input:: *)
(*Manipulate[*)
(*p0=ListLinePlot[cleanTrajectories[[i,All,1]],Frame->True,FrameLabel->{"t","x"},PlotRangePadding->None,FrameStyle->Directive[Black,18],ImageSize->{Automatic,200}];*)
(*p1=ListLinePlot[cleanTrajectories[[i]],Frame->True,FrameLabel->{"x","y"},AspectRatio->ny/nx,PlotRangePadding->None,FrameStyle->Directive[Black,18],ImageSize->{Automatic,200},PlotRange->{{1,nx},{1,ny}}];*)
(*p2=ListLinePlot[cleanIntensities[[i]],PlotRange->{0,0.3},Frame->True,FrameLabel->{"time t","mean intensity"},FrameStyle->Directive[Black,18],ImageSize->{Automatic,200}];*)
(*Grid[{{p0,p1,p2}}]*)
(*,{i,1,Length[cleanIntensities],1}]*)


(* ::Subsubsection::Closed:: *)
(*check intensities*)


(* ::Input:: *)
(*Manipulate[*)
(*p1=ListLinePlot[intensities(*\[LeftDoubleBracket]goodTrajsQ\[RightDoubleBracket]*)[[i]],PlotRange->{0,1},Frame->True,FrameLabel->{"frame index","mean intensity"},FrameStyle->Directive[Black,16],ImageSize->300];*)
(*p2=ListLinePlot[Rescale@intensities(*\[LeftDoubleBracket]goodTrajsQ\[RightDoubleBracket]*)[[i]],PlotRange->{0,1},Frame->True,FrameLabel->{"frame index","mean intensity"},FrameStyle->Directive[Black,16],ImageSize->300];*)
(*Grid[{{p1,p2}}]*)
(*,{i,1,Length[intensities(*\[LeftDoubleBracket]goodTrajsQ\[RightDoubleBracket]*)],1,Appearance->"Open"}]*)


(* ::Section::Closed:: *)
(*get trajectories and intensities (multiple)*)


(* ::Text:: *)
(*takes 20min with precomputed data*)
(*takes 60min with precomputed data + videos*)
(*takes 3h without precomputed data*)
(**)
(*create movies in section below this one*)


(* ::Input:: *)
(*days=Range[6](*\[LeftDoubleBracket]{-1}\[RightDoubleBracket]*)(*\[LeftDoubleBracket]4;;6\[RightDoubleBracket]*)(*\[LeftDoubleBracket]{1}\[RightDoubleBracket]*);*)
(*useExistingDataQ=False;*)
(*createDropletOverviewMovieQ=False;*)
(*lengthThresh=1600(*800*);*)
(*cutTrajectoryQ=False;*)
(*useDayMaxQ=False;*)
(*dt=1.0/30;*)
(*minSeconds=10.0;  (** TODO: calculation? **)*)
(*padFactor=2;*)
(*movieLengths={8344, 7252,8046,9225,5244,2251};*)
(*maxZeroPadding=Max[movieLengths]; *)
(*pthout=FileNameJoin[{NotebookDirectory[],"output"<>"_2maxLength_frames"}];*)
(*pthRawMovie="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Videos\\Activity videos";*)
(*Print[AbsoluteTiming[*)
(*{meanNormSingleSpectra,meanNormAllSpectra,allSpeeds,allWidths,allPeakPositions,allWidths2,allPeakPositions2,allMeanThetas2}=Table[*)
(*Print["dayIndex: ",dayIndex];*)
(**)
(**)
(*If[createDropletOverviewMovieQ\[Or]!useExistingDataQ,*)
(*(** get movie data **)*)
(**)
(*movieFile=FileNameJoin[{pthRawMovie,"Day "<>ToString[dayIndex]<>".avi"}];*)
(*Print[AbsoluteTiming[*)
(*images0=Import[movieFile,{"AVI","ImageList"}];*)
(*images=images0[[;;(*2000*)]];*)
(*dropletImages=ColorConvert[#,"Grayscale"]&/@images;*)
(*][[1]],"\[ThinSpace]s"];*)
(*{nx,ny}=ImageDimensions[images0[[1]]];*)
(*nFrames=Length[images0];*)
(*Print["Number of frames: ",nFrames];*)
(*,*)
(*{nx,ny}={720,480};*)
(*nFrames=movieLengths[[dayIndex]];*)
(*];*)
(**)
(*(** check if required files exist **)*)
(*pthData=FileNameJoin[{NotebookDirectory[],"output_droplet_frame_data"}];*)
(*filesExistQ=And@@(FileExistsQ[FileNameJoin[{pthData,#<>"_"<>ToString[dayIndex]<>".hdf5"}]]&/@{"trajectories","intensities"});*)
(*useExistingDataQ=useExistingDataQ\[And]filesExistQ;*)
(**)
(*If[!useExistingDataQ,*)
(**)
(*(** progress indicator **)*)
(*pi=0;Print[Overlay[{ProgressIndicator[Dynamic[pi],{0,1}],Dynamic[ToString@(NumberForm[pi*100,{4,1}])<>" %"]},Alignment->"Center"]];*)
(*counter=0;*)
(**)
(*(** analyze images to track droplets; get trajectories and intensities **)*)
(*Print[AbsoluteTiming[*)
(*{sizes,positions,trackedDropletImages}=Table[*)
(*foundDropletsImage=MorphologicalComponents[Dilation[dropletImage,3],0.3,Method->(*"Connected"*)"BoundingBox"];*)
(*{sizesFrame,positionsFrame}=ComponentMeasurements[foundDropletsImage,{"Count","Centroid"}][[All,2]]\[Transpose];*)
(*trackedDropletImage=ImageCompose[dropletImage,{Colorize[foundDropletsImage],0.5}];*)
(*pi=N[++counter/Length[images]];*)
(*{sizesFrame,positionsFrame,trackedDropletImage}*)
(*,{dropletImage,dropletImages}]\[Transpose];*)
(*][[1]],"\[ThinSpace]s"];*)
(**)
(**)
(*distanceThresh=30;*)
(*historyThresh=40;*)
(*boxLength=20;*)
(*Print[AbsoluteTiming[*)
(*{xDefects,yDefects,goodTrajsQ}=defectTracker[positions,{nx,ny},distanceThresh,historyThresh,boxLength];*)
(*trajectories=Transpose[{xDefects,yDefects},{3,1,2}];  (** timeIndex, dropletIndex, {x,y} **)*)
(*Export[FileNameJoin[{pthData,"trajectories_"<>ToString[dayIndex]<>".hdf5"}],trajectories];*)
(*][[1]],"\[ThinSpace]s"];*)
(**)
(**)
(*Print[AbsoluteTiming[*)
(*intensities=calculateAvgPixelIntensity[dropletImages,trajectories,boxLength,{nx,ny}]\[Transpose];*)
(*Export[FileNameJoin[{pthData,"intensities_"<>ToString[dayIndex]<>".hdf5"}],intensities];*)
(*][[1]],"\[ThinSpace]s"];*)
(**)
(*,*)
(*(** load existing data files to save time **)*)
(*trajectories=Import[FileNameJoin[{pthData,"trajectories_"<>ToString[dayIndex]<>".hdf5"}],{"Datasets","Dataset1"}];*)
(*intensities=Import[FileNameJoin[{pthData,"intensities_"<>ToString[dayIndex]<>".hdf5"}],{"Datasets","Dataset1"}];*)
(*];*)
(**)
(**)
(*{starts,ends}=Transpose[*)
(*{FirstPosition[#,x_/;x>0][[1]],*)
(*Length[trajectories]-FirstPosition[Reverse@#,x_/;x>0][[1]]+1*)
(*}&/@(trajectories\[Transpose][[All,All,1]])];*)
(*cleanTrajectories=MapThread[#1[[#2;;#3]]&,{trajectories\[Transpose],starts,ends}];*)
(*cleanIntensities=MapThread[#1[[#2;;#3]]&,{intensities,starts,ends}];*)
(*nAll=Length[cleanTrajectories];*)
(**)
(*plotOps={Frame->True,FrameLabel->{"x","y"},AspectRatio->ny/nx,PlotRange->{{1,nx},{1,ny}},PlotRangePadding->None,FrameStyle->Directive[Black,14],ImageSize->{Automatic,200}};*)
(**)
(*If[cutTrajectoryQ,*)
(*(** cut all trajectories to be of length lengthThresh **)*)
(*minLength=lengthThresh;*)
(*goodTrajsList=(Length[#]>minLength)&/@cleanTrajectories;*)
(*goodTrajectories=Pick[cleanTrajectories,goodTrajsList];*)
(*goodIntensities=Pick[cleanIntensities,goodTrajsList];*)
(*nGoodOnes=Length[goodTrajectories];*)
(*nBadOnes=nAll-nGoodOnes;*)
(*timeMax=lengthThresh;*)
(**)
(*lengths=Join[{1},Length[Partition[#,lengthThresh]]&/@goodIntensities];*)
(*indexEnds=Accumulate[lengths];*)
(*droplet2IndexMap=Table[Range[indexEnds[[i]],indexEnds[[i+1]]-1],{i,Length[indexEnds]-1}];*)
(*Export[FileNameJoin[{pthout,"droplet2IndexMap_frames_."<>ToString[lengthThresh]<>"dat"}],droplet2IndexMap];*)
(**)
(*speeds=Norm/@Differences[Flatten[goodTrajectories,1]]/dt;*)
(*intensityParts=Flatten[Partition[#,lengthThresh]&/@goodIntensities,1];*)
(**)
(*,*)
(*(** pad all trajectories to have the same length as the longest trajectory **)*)
(*minLength=Round[minSeconds/dt]; (** 2s **)*)
(*goodTrajsList=(Length[#]>minLength)&/@cleanTrajectories;*)
(*goodTrajectories=Pick[cleanTrajectories,goodTrajsList];*)
(*goodIntensities=Pick[cleanIntensities,goodTrajsList];*)
(*nGoodOnes=Length[goodTrajectories];*)
(*nBadOnes=nAll-nGoodOnes;*)
(*timeMax=Max[Length/@goodIntensities];*)
(*maxLength=If[useDayMaxQ,timeMax,maxZeroPadding];*)
(**)
(**)
(*(** sort trajectories by length: from long to short; also shortens goodTrajsList **)*)
(*sortList=Reverse@Ordering[Length/@goodTrajectories];*)
(*goodTrajectories=goodTrajectories[[sortList]];*)
(*goodIntensities=goodIntensities[[sortList]];*)
(**)
(*speeds=Map[Norm,Differences/@goodTrajectories,{2}]/dt;*)
(*intensityParts=goodIntensities;*)
(*];*)
(**)
(*(** plot all,bad and good trajectories **)*)
(*p1=ListLinePlot[cleanTrajectories,Evaluate[plotOps],PlotLabel->"all: "<>ToString@nAll];*)
(*p2=ListLinePlot[If[Length[#]<minLength,#,Nothing]&/@cleanTrajectories,Evaluate[plotOps],PlotLabel->"bad: "<>ToString@nBadOnes];*)
(*p3=ListLinePlot[goodTrajectories,Evaluate[plotOps],PlotLabel->"good (length>"<>ToString[minLength]<>" frames): "<>ToString@nGoodOnes];*)
(*plot=Grid[{{p1,p2,p3}}];*)
(*Export[FileNameJoin[{pthout,"trackedDroplets_"<>ToString[dayIndex]<>".png"}],plot];*)
(**)
(*ListLinePlot[#,Frame->True,PlotRange->{{1,nFrames},{0,0.4}}]&/@goodIntensities;*)
(*plot=ListLinePlot[intensityParts,Frame->True,PlotRange->{{1,timeMax},{0,0.4}},FrameLabel->{"frame index","intensity \!\(\**)
(*StyleBox[\"I\",\nFontSlant->\"Italic\"]\)"}];*)
(*Export[FileNameJoin[{pthout,"all_intensityParts_"<>ToString[dayIndex]<>".png"}],plot];*)
(*Export[FileNameJoin[{pthout,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}],intensityParts];*)
(*Export[FileNameJoin[{pthout,"all_trajectories_"<>ToString[dayIndex]<>".dat"}],goodTrajectories];*)
(**)
(*(** movies of droplets **)*)
(*If[createDropletOverviewMovieQ,*)
(**)
(*If[cutTrajectoryQ,*)
(*(** cut all trajectories to be of length lengthThresh **)*)
(*trajectoryParts=Flatten[Partition[#,lengthThresh]&/@goodTrajectories,1];*)
(*cleanTimes=MapThread[Range[#1,#2]&,{starts,ends}];*)
(*goodTimes=Pick[cleanTimes,goodTrajsList];*)
(*timesParts=Flatten[Partition[#,lengthThresh]&/@goodTimes,1];*)
(**)
(*allZoomedInDropletImages=Table[Table[*)
(*boxCorners=Round[{{Max[#[[1]]-0.5boxLength,1],Min[#[[1]]+0.5boxLength,nx]},ny-{Max[#[[2]]-0.5boxLength,1],Min[#[[2]]+0.5boxLength,ny]}}]&@trajectoryParts[[partIndex,t]];*)
(*ImageCompose[*)
(*Image[ConstantArray[0,{boxLength,boxLength}]],*)
(*ImageTake[dropletImages[[timesParts[[partIndex,t]]]],boxCorners[[2]],boxCorners[[1]]]*)
(*]*)
(*,{t,timeMax}]*)
(*,{partIndex,Length[trajectoryParts]}];*)
(*,*)
(*(** pad all trajectories to have the same length as the longest trajectory **)*)
(*trajectoryParts=goodTrajectories;*)
(*cleanTimes=MapThread[Range[#1,#2]&,{starts,ends}];*)
(*goodTimes=Pick[cleanTimes,goodTrajsList];*)
(*goodTimes=goodTimes[[sortList]];*)
(*timesParts=goodTimes;*)
(**)
(*allZoomedInDropletImages=Table[Table[*)
(*If[t<=Length[trajectoryParts[[partIndex]]],*)
(*boxCorners=Round[{{Max[#[[1]]-0.5boxLength,1],Min[#[[1]]+0.5boxLength,nx]},ny-{Max[#[[2]]-0.5boxLength,1],Min[#[[2]]+0.5boxLength,ny]}}]&@trajectoryParts[[partIndex,t]];*)
(*ImageCompose[#,ImageTake[dropletImages[[timesParts[[partIndex,t]]]],boxCorners[[2]],boxCorners[[1]]]],*)
(*#*)
(*]&@Image[ConstantArray[0,{boxLength,boxLength}]]*)
(*,{t,timeMax}]*)
(*,{partIndex,Length[trajectoryParts]}];*)
(*];*)
(**)
(*counter=0;*)
(*pthMovieOut=FileNameJoin[{pthout,"movie_"<>ToString[dayIndex]}];*)
(*Do[*)
(*plot=ImageCollage[allZoomedInDropletImages[[All,t]],Background->Black];*)
(*Export[FileNameJoin[{pthMovieOut,"frame_"<>IntegerString[++counter,10,IntegerLength[lengthThresh]+1]<>".png"}],plot];*)
(*,{t,1,timeMax,1}];*)
(*];*)
(**)
(*(** calculate power spectral densities **)*)
(*windowingQ=True;*)
(*nPaddedSamples=padFactor If[cutTrajectoryQ,lengthThresh, maxLength];*)
(*paddedMemory=ConstantArray[0.0,nPaddedSamples];*)
(*powerSpectralDensities=calculateTemporalFreqSpectrum[dt,#,windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose]&/@intensityParts;*)
(*freqs=powerSpectralDensities[[1,All,1]];*)
(**)
(*(** non-normalized spectra **)*)
(*spectra=powerSpectralDensities[[All,All,2]];*)
(*Export[FileNameJoin[{pthout,"spectra_"<>ToString[dayIndex]<>".hdf5"}],spectra];*)
(**)
(*(** normalized spectra by max of all spectra **)*)
(*maxSpectra=Max[spectra];*)
(*normSpectra=spectra/maxSpectra;*)
(*normMeanSpectrum=Mean[normSpectra];*)
(**)
(*(** normalized spectra by max of individual spectra **)*)
(*normIndividualSpectra=#/Max[#]&/@powerSpectralDensities[[All,All,2]];*)
(*meanNormIndividualSpectra=Mean[normIndividualSpectra];*)
(**)
(*(** perform fits to individual spectra **)*)
(*fMax=2.0;*)
(*indexStart=2;*)
(*fMaxIndex=FirstPosition[freqs,_?(#>=fMax&)][[1]];*)
(*iNormFits=NonlinearModelFit[{freqs,#}\[Transpose][[indexStart;;fMaxIndex]],{(aa/( 1.0+(xx-x0)^2/bb^2))^2,x0>0},{{aa,Max[#[[indexStart;;]]]},{bb,0.01},{x0,0.01}},xx]&/@normIndividualSpectra;*)
(*iNormFits2=NonlinearModelFit[{freqs,#}\[Transpose][[indexStart;;fMaxIndex]],{i0^2 (1/(2520 Sqrt[2 \[Pi]]) aa bb^2 (-((128 aa^7 bb^7)/(64 bb^2+(\[Omega]-8 \[Omega]0)^2))+(448 aa^6 bb^6 (-2 cc+\[Pi]))/(49 bb^2+(\[Omega]-7 \[Omega]0)^2)-(672 aa^5 bb^5 (-2+4 cc^2-4 cc \[Pi]+\[Pi]^2))/(36 bb^2+(\[Omega]-6 \[Omega]0)^2)+(560 aa^4 bb^4 (-8 cc^3+12 cc^2 \[Pi]+\[Pi] (-6+\[Pi]^2)-6 cc (-2+\[Pi]^2)))/(25 bb^2+(\[Omega]-5 \[Omega]0)^2)-(280 aa^3 bb^3 (24+16 cc^4-32 cc^3 \[Pi]-12 \[Pi]^2+\[Pi]^4-8 cc \[Pi] (-6+\[Pi]^2)+24 cc^2 (-2+\[Pi]^2)))/(16 bb^2+(\[Omega]-4 \[Omega]0)^2)-1/(9 bb^2+(\[Omega]-3 \[Omega]0)^2) 84 aa^2 bb^2 (32 cc^5-80 cc^4 \[Pi]-40 cc^2 \[Pi] (-6+\[Pi]^2)+80 cc^3 (-2+\[Pi]^2)-\[Pi] (120-20 \[Pi]^2+\[Pi]^4)+10 cc (24-12 \[Pi]^2+\[Pi]^4))-1/(4 bb^2+(\[Omega]-2 \[Omega]0)^2) 14 aa bb (-720+64 cc^6-192 cc^5 \[Pi]+360 \[Pi]^2-30 \[Pi]^4+\[Pi]^6-160 cc^3 \[Pi] (-6+\[Pi]^2)+240 cc^4 (-2+\[Pi]^2)-12 cc \[Pi] (120-20 \[Pi]^2+\[Pi]^4)+60 cc^2 (24-12 \[Pi]^2+\[Pi]^4))+1/(bb^2+(\[Omega]-\[Omega]0)^2) (-128 cc^7+448 cc^6 \[Pi]+560 cc^4 \[Pi] (-6+\[Pi]^2)-672 cc^5 (-2+\[Pi]^2)+84 cc^2 \[Pi] (120-20 \[Pi]^2+\[Pi]^4)-280 cc^3 (24-12 \[Pi]^2+\[Pi]^4)+\[Pi] (-5040+840 \[Pi]^2-42 \[Pi]^4+\[Pi]^6)-14 cc (-720+360 \[Pi]^2-30 \[Pi]^4+\[Pi]^6))))^2,\[Pi]/4<cc<\[Pi]},{{aa,1},{bb,0.1},{\[Omega]0,0.001},{i0,0.1},{cc,2.1}},\[Omega]]&/@normIndividualSpectra;*)
(**)
(*widths=#["BestFitParameters"][[2,2]]&/@iNormFits;*)
(*peakPos=#["BestFitParameters"][[3,2]]&/@iNormFits;*)
(*{meanWidth,stdWidth}={Mean[#],StandardDeviation[#]}&@widths;*)
(*{meanPeakPos,stdPeakPos}={Mean[#],StandardDeviation[#]}&@peakPos;*)
(**)
(*widths2=#["BestFitParameters"][[2,2]]&/@iNormFits2;*)
(*peakPos2=#["BestFitParameters"][[3,2]]&/@iNormFits2;*)
(*meanThetas2=#["BestFitParameters"][[5,2]]&/@iNormFits2;*)
(*{meanWidth2,stdWidth2}={Mean[#],StandardDeviation[#]}&@widths2;*)
(*{meanPeakPos2,stdPeakPos2}={Mean[#],StandardDeviation[#]}&@peakPos2;*)
(*{meanMeanTheta2,stdMeanTheta2}={Mean[#],StandardDeviation[#]}&@meanThetas2;*)
(**)
(**)
(*(** plots **)*)
(*Print["Number of good intensity trajectories: ",Length[intensityParts]];*)
(*Do[*)
(*plot=Grid[{{*)
(*ListPlot[{dt Range[Length[intensityParts[[i]]]],intensityParts[[i]]}\[Transpose],Joined->True,PlotRange->{0,0.351},Frame->True,FrameLabel->{"time t (s)","intensity"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->None,AspectRatio->1],*)
(*ListLogPlot[{freqs,normSpectra[[i]]}\[Transpose][[2;;]],Joined->True,PlotRange->{10^-10,1},Frame->True,FrameLabel->{"frequency f (Hz)","PSD"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->{Automatic,None},AspectRatio->1],*)
(*Show[*)
(*ListPlot[{freqs,normIndividualSpectra[[i]]}\[Transpose][[2;;]],Joined->True,PlotRange->{{0,fMax},{0,1}},Frame->True,FrameLabel->{"frequency f (Hz)","norm. PSD"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->{Automatic,None},AspectRatio->1],*)
(*Plot[iNormFits[[i]][f],{f,0,fMax},PlotRange->All,PlotStyle->Directive[Red,Dashed]]*)
(*],*)
(*Show[*)
(*ListPlot[{freqs,normIndividualSpectra[[i]]}\[Transpose][[2;;]],Joined->True,PlotRange->{{0,fMax},{0,1}},Frame->True,FrameLabel->{"frequency f (Hz)","norm. PSD"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->{Automatic,None},AspectRatio->1],*)
(*Plot[iNormFits2[[i]][f],{f,0,fMax},PlotRange->All,PlotStyle->Directive[Red,Dashed]]*)
(*]*)
(*}}];*)
(*Export[FileNameJoin[{pthout,"intensity_spectrum_day_"<>ToString[dayIndex]<>"_dataSetIndex_"<>ToString[i]<>".png"}],plot];*)
(*,{i,Length[intensityParts]}];*)
(**)
(**)
(*(** logarithmic **)*)
(*(** ugly hack, due to bug in mma :/ **)*)
(*psdTicks=Table[If[exponent!=0,{exponent,ScientificForm[10.0^exponent,NumberFormat->(Superscript[10,#3]&)]},{0,"\!\(\*SuperscriptBox[\(10\), \(0\)]\)"}],{exponent,-24,0,6}];*)
(*psdTicks2={#[[1]],""}&/@psdTicks;*)
(*fMax=15;*)
(*spectraLogPlot=Show[*)
(*ListLogPlot[{freqs,#}\[Transpose][[2;;]]&/@normSpectra,PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Directive[Gray,Opacity[0.5]]],*)
(*ListLogPlot[{freqs,normMeanSpectrum}\[Transpose][[2;;]],PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Black],*)
(*Frame->True,FrameLabel->{"Frequency f (Hz)","Norm. PSD (a.u.)"},FrameStyle->Directive[Black,14,AbsoluteThickness[2]],PlotRangePadding->None,FrameTicks->{{psdTicks,psdTicks2},{Automatic,Automatic}},AspectRatio->1*)
(*];*)
(*Export[FileNameJoin[{pthout,"spectraLogPlot_"<>ToString[dayIndex]<>".png"}],spectraLogPlot];*)
(**)
(*fMax=2;*)
(*spectraLogPlotShort=Show[*)
(*ListLogPlot[{freqs,#}\[Transpose][[2;;]]&/@normSpectra,PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Directive[Gray,Opacity[0.5]]],*)
(*ListLogPlot[{freqs,normMeanSpectrum}\[Transpose][[2;;]],PlotRange->{{0,fMax},{10^-18,1}},Joined->True,PlotStyle->Black],*)
(*Frame->True,FrameLabel->{"Frequency f (Hz)","Norm. PSD (a.u.)"},FrameStyle->Directive[Black,14,AbsoluteThickness[2]],PlotRangePadding->None,FrameTicks->{{psdTicks,psdTicks2},{Automatic,Automatic}},AspectRatio->1*)
(*];*)
(*Export[FileNameJoin[{pthout,"spectraLogPlot_zoomIn_"<>ToString[dayIndex]<>".png"}],spectraLogPlotShort];*)
(**)
(*(** linear **)*)
(*fMax=15;*)
(*spectraPlot=Show[*)
(*ListPlot[{freqs,#}\[Transpose][[2;;]]&/@normSpectra,PlotRange->{{0,fMax},{0,1}},Joined->True,PlotStyle->Directive[Gray,Opacity[0.5]]],*)
(*ListPlot[{freqs,normMeanSpectrum}\[Transpose][[2;;]],PlotRange->{{0,fMax},{0,1}},Joined->True,PlotStyle->Black],*)
(*Frame->True,FrameLabel->{"Frequency f (Hz)","Norm. PSD (a.u.)"},FrameStyle->Directive[Black,14,AbsoluteThickness[2]],PlotRangePadding->None,AspectRatio->1*)
(*];*)
(*Export[FileNameJoin[{pthout,"spectraPlot_"<>ToString[dayIndex]<>".png"}],spectraPlot];*)
(**)
(*fMax=2;*)
(*spectraPlotShort=Show[*)
(*ListPlot[{freqs,#}\[Transpose][[2;;]]&/@normSpectra,PlotRange->{{0,fMax},{0,1}},Joined->True,PlotStyle->Directive[Gray,Opacity[0.5]]],*)
(*ListPlot[{freqs,normMeanSpectrum}\[Transpose][[2;;]],PlotRange->{{0,fMax},{0,1}},Joined->True,PlotStyle->Black],*)
(*Frame->True,FrameLabel->{"Frequency f (Hz)","Norm. PSD (a.u.)"},FrameStyle->Directive[Black,14,AbsoluteThickness[2]],PlotRangePadding->None,AspectRatio->1*)
(*];*)
(*Export[FileNameJoin[{pthout,"spectraPlot_zoomIn_"<>ToString[dayIndex]<>".png"}],spectraPlotShort];*)
(**)
(*(** individually normalized spectra **)*)
(*fMax=2;*)
(*normSpectraPlot=Show[*)
(*ListPlot[{freqs,#}\[Transpose][[2;;]]&/@normIndividualSpectra,PlotRange->{{0,fMax},{0,1}},Joined->True,PlotStyle->Directive[Gray,Opacity[0.5]]],*)
(*ListPlot[{freqs,meanNormIndividualSpectra}\[Transpose][[2;;]],PlotRange->{{0,fMax},{0,1}},Joined->True,PlotStyle->Black],*)
(*Frame->True,FrameLabel->{"Frequency f (Hz)","Norm. PSD (a.u.)"},FrameStyle->Directive[Black,14,AbsoluteThickness[2]],PlotRangePadding->None,AspectRatio->1*)
(*];*)
(*Export[FileNameJoin[{pthout,"norm_spectraPlot_zoomIn_"<>ToString[dayIndex]<>".png"}],normSpectraPlot];*)
(**)
(**)
(*(** output **)*)
(*{meanNormIndividualSpectra,normMeanSpectrum,speeds,widths,peakPos,widths2,peakPos2,meanThetas2}*)
(*,{dayIndex,days}]\[Transpose];*)
(**)
(*(** save data **)*)
(*Export[FileNameJoin[{pthout,"meanNormSingleSpectra.hdf5"}],meanNormSingleSpectra,{"Datasets",Table["meanNormSingleSpectra_"<>ToString[i],{i,6}]}];*)
(*Export[FileNameJoin[{pthout,"meanNormAllSpectra.hdf5"}],meanNormAllSpectra,{"Datasets",Table["meanNormAllSpectra_"<>ToString[i],{i,6}]}];*)
(*Export[FileNameJoin[{pthout,"allSpeeds.hdf5"}],allSpeeds,Join[{"Datasets"},Table["allSpeeds_"<>ToString[i],{i,6}]]];*)
(*Export[FileNameJoin[{pthout,"allWidths.hdf5"}],allWidths,Join[{"Datasets"},Table["allWidths_"<>ToString[i],{i,6}]]];*)
(*Export[FileNameJoin[{pthout,"allPeakPositions.hdf5"}],allPeakPositions,Join[{"Datasets"},Table["allPeakPositions_"<>ToString[i],{i,6}]]];*)
(*Export[FileNameJoin[{pthout,"allWidths2.hdf5"}],allWidths2,Join[{"Datasets"},Table["allWidths2_"<>ToString[i],{i,6}]]];*)
(*Export[FileNameJoin[{pthout,"allPeakPositions2.hdf5"}],allPeakPositions2,Join[{"Datasets"},Table["allPeakPositions2_"<>ToString[i],{i,6}]]];*)
(*Export[FileNameJoin[{pthout,"allMeanThetas2.hdf5"}],meanThetas2,Join[{"Datasets"},Table["meanThetas2_"<>ToString[i],{i,6}]]];*)
(*][[1]],"\[ThinSpace]s"];*)


(* ::Section::Closed:: *)
(*only create movies*)


(* ::Text:: *)
(*runtime: 19212.4\[ThinSpace]s*)


(* ::Input:: *)
(*days=Range[6](*\[LeftDoubleBracket]{-1}\[RightDoubleBracket]*)(*\[LeftDoubleBracket]4;;6\[RightDoubleBracket]*)(*\[LeftDoubleBracket]{1}\[RightDoubleBracket]*);*)
(*useExistingDataQ=True;*)
(*createDropletOverviewMovieQ=False;*)
(*lengthThresh=1600(*800*);*)
(*cutTrajectoryQ=False;*)
(*dt=1.0/30;*)
(*minSeconds=10.0;  (** TODO: calculation? **)*)
(*movieLengths={8344, 7252,8046,9225,5244,2251};*)
(*maxZeroPadding=Max[movieLengths]; *)
(*pthout=FileNameJoin[{NotebookDirectory[],"output"<>"_2maxLength_frames"}];*)
(*Print[AbsoluteTiming[*)
(*Do[*)
(*Print["dayIndex: ",dayIndex];*)
(**)
(*(** get movie data **)*)
(*movieFile="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Videos\\Activity videos\\Day "<>ToString[dayIndex]<>".avi";*)
(*Print[AbsoluteTiming[*)
(*images=Import[movieFile,{"AVI","ImageList"}];*)
(*dropletImages=ColorConvert[#,"Grayscale"]&/@images;*)
(*][[1]],"\[ThinSpace]s"];*)
(*{nx,ny}=ImageDimensions[dropletImages[[1]]];*)
(*nFrames=Length[dropletImages];*)
(*Print["Number of frames: ",nFrames];*)
(**)
(*(** check if required files exist **)*)
(*pthData=FileNameJoin[{NotebookDirectory[],"output_droplet_frame_data"}];*)
(*filesExistQ=And@@(FileExistsQ[FileNameJoin[{pthData,#<>"_"<>ToString[dayIndex]<>".hdf5"}]]&/@{"trajectories","intensities"});*)
(*useExistingDataQ=useExistingDataQ\[And]filesExistQ;*)
(**)
(*If[!useExistingDataQ,*)
(**)
(*(** progress indicator **)*)
(*pi=0;Print[Overlay[{ProgressIndicator[Dynamic[pi],{0,1}],Dynamic[ToString@(NumberForm[pi*100,{4,1}])<>" %"]},Alignment->"Center"]];*)
(*counter=0;*)
(**)
(*(** analyze images to track droplets; get trajectories and intensities **)*)
(*Print[AbsoluteTiming[*)
(*{sizes,positions,trackedDropletImages}=Table[*)
(*foundDropletsImage=MorphologicalComponents[Dilation[dropletImage,3],0.3,Method->(*"Connected"*)"BoundingBox"];*)
(*{sizesFrame,positionsFrame}=ComponentMeasurements[foundDropletsImage,{"Count","Centroid"}][[All,2]]\[Transpose];*)
(*trackedDropletImage=ImageCompose[dropletImage,{Colorize[foundDropletsImage],0.5}];*)
(*pi=N[++counter/Length[images]];*)
(*{sizesFrame,positionsFrame,trackedDropletImage}*)
(*,{dropletImage,dropletImages}]\[Transpose];*)
(*][[1]],"\[ThinSpace]s"];*)
(**)
(**)
(*distanceThresh=30;*)
(*historyThresh=40;*)
(*boxLength=20;*)
(*Print[AbsoluteTiming[*)
(*{xDefects,yDefects,goodTrajsQ}=defectTracker[positions,{nx,ny},distanceThresh,historyThresh,boxLength];*)
(*trajectories=Transpose[{xDefects,yDefects},{3,1,2}];  (** timeIndex, dropletIndex, {x,y} **)*)
(*Export[FileNameJoin[{pthData,"trajectories_"<>ToString[dayIndex]<>".hdf5"}],trajectories];*)
(*][[1]],"\[ThinSpace]s"];*)
(**)
(**)
(*Print[AbsoluteTiming[*)
(*intensities=calculateAvgPixelIntensity[dropletImages,trajectories,boxLength,{nx,ny}]\[Transpose];*)
(*Export[FileNameJoin[{pthData,"intensities_"<>ToString[dayIndex]<>".hdf5"}],intensities];*)
(*][[1]],"\[ThinSpace]s"];*)
(**)
(*,*)
(*(** load existing data files to save time **)*)
(*trajectories=Import[FileNameJoin[{pthData,"trajectories_"<>ToString[dayIndex]<>".hdf5"}],{"Datasets","Dataset1"}];*)
(*intensities=Import[FileNameJoin[{pthData,"intensities_"<>ToString[dayIndex]<>".hdf5"}],{"Datasets","Dataset1"}];*)
(*];*)
(**)
(**)
(*{starts,ends}=Transpose[*)
(*{FirstPosition[#,x_/;x>0][[1]],*)
(*Length[trajectories]-FirstPosition[Reverse@#,x_/;x>0][[1]]+1*)
(*}&/@(trajectories\[Transpose][[All,All,1]])];*)
(*cleanTrajectories=MapThread[#1[[#2;;#3]]&,{trajectories\[Transpose],starts,ends}];*)
(*cleanIntensities=MapThread[#1[[#2;;#3]]&,{intensities,starts,ends}];*)
(*nAll=Length[cleanTrajectories];*)
(**)
(*plotOps={Frame->True,FrameLabel->{"x","y"},AspectRatio->ny/nx,PlotRange->{{1,nx},{1,ny}},PlotRangePadding->None,FrameStyle->Directive[Black,14],ImageSize->{Automatic,200}};*)
(**)
(*If[cutTrajectoryQ,*)
(*(** cut all trajectories to be of length lengthThresh **)*)
(*minLength=lengthThresh;*)
(*goodTrajsList=(Length[#]>minLength)&/@cleanTrajectories;*)
(*goodTrajectories=Pick[cleanTrajectories,goodTrajsList];*)
(*goodIntensities=Pick[cleanIntensities,goodTrajsList];*)
(*nGoodOnes=Length[goodTrajectories];*)
(*nBadOnes=nAll-nGoodOnes;*)
(*timeMax=lengthThresh;*)
(**)
(*lengths=Join[{1},Length[Partition[#,lengthThresh]]&/@goodIntensities];*)
(*indexEnds=Accumulate[lengths];*)
(*droplet2IndexMap=Table[Range[indexEnds[[i]],indexEnds[[i+1]]-1],{i,Length[indexEnds]-1}];*)
(*Export[FileNameJoin[{pthout,"droplet2IndexMap_frames_."<>ToString[lengthThresh]<>"dat"}],droplet2IndexMap];*)
(**)
(*speeds=Norm/@Differences[Flatten[goodTrajectories,1]]/dt;*)
(*intensityParts=Flatten[Partition[#,lengthThresh]&/@goodIntensities,1];*)
(**)
(*,*)
(*(** pad all trajectories to have the same length as the longest trajectory **)*)
(*minLength=Round[minSeconds/dt]; (** 2s **)*)
(*goodTrajsList=(Length[#]>minLength)&/@cleanTrajectories;*)
(*goodTrajectories=Pick[cleanTrajectories,goodTrajsList];*)
(*goodIntensities=Pick[cleanIntensities,goodTrajsList];*)
(*nGoodOnes=Length[goodTrajectories];*)
(*nBadOnes=nAll-nGoodOnes;*)
(*timeMax=Max[Length/@goodIntensities];*)
(*maxLength=If[useDayMaxQ,timeMax,maxZeroPadding];*)
(**)
(**)
(*(** sort trajectories by length: from long to short; also shortens goodTrajsList **)*)
(*sortList=Reverse@Ordering[Length/@goodTrajectories];*)
(*goodTrajectories=goodTrajectories[[sortList]];*)
(*goodIntensities=goodIntensities[[sortList]];*)
(**)
(*speeds=Map[Norm,Differences/@goodTrajectories,{2}]/dt;*)
(*intensityParts=goodIntensities;*)
(*];*)
(**)
(*(** movies of droplets **)*)
(*If[createDropletOverviewMovieQ,*)
(**)
(*If[cutTrajectoryQ,*)
(*(** cut all trajectories to be of length lengthThresh **)*)
(*trajectoryParts=Flatten[Partition[#,lengthThresh]&/@goodTrajectories,1];*)
(*cleanTimes=MapThread[Range[#1,#2]&,{starts,ends}];*)
(*goodTimes=Pick[cleanTimes,goodTrajsList];*)
(*timesParts=Flatten[Partition[#,lengthThresh]&/@goodTimes,1];*)
(**)
(*allZoomedInDropletImages=Table[Table[*)
(*boxCorners=Round[{{Max[#[[1]]-0.5boxLength,1],Min[#[[1]]+0.5boxLength,nx]},ny-{Max[#[[2]]-0.5boxLength,1],Min[#[[2]]+0.5boxLength,ny]}}]&@trajectoryParts[[partIndex,t]];*)
(*ImageCompose[*)
(*Image[ConstantArray[0,{boxLength,boxLength}]],*)
(*ImageTake[dropletImages[[timesParts[[partIndex,t]]]],boxCorners[[2]],boxCorners[[1]]]*)
(*]*)
(*,{t,timeMax}]*)
(*,{partIndex,Length[trajectoryParts]}];*)
(*,*)
(*(** pad all trajectories to have the same length as the longest trajectory **)*)
(*trajectoryParts=goodTrajectories;*)
(*cleanTimes=MapThread[Range[#1,#2]&,{starts,ends}];*)
(*goodTimes=Pick[cleanTimes,goodTrajsList];*)
(*goodTimes=goodTimes[[sortList]];*)
(*timesParts=goodTimes;*)
(**)
(*allZoomedInDropletImages=Table[Table[*)
(*If[t<=Length[trajectoryParts[[partIndex]]],*)
(*boxCorners=Round[{{Max[#[[1]]-0.5boxLength,1],Min[#[[1]]+0.5boxLength,nx]},ny-{Max[#[[2]]-0.5boxLength,1],Min[#[[2]]+0.5boxLength,ny]}}]&@trajectoryParts[[partIndex,t]];*)
(*ImageCompose[#,ImageTake[dropletImages[[timesParts[[partIndex,t]]]],boxCorners[[2]],boxCorners[[1]]]],*)
(*#*)
(*]&@Image[ConstantArray[0,{boxLength,boxLength}]]*)
(*,{t,timeMax}]*)
(*,{partIndex,Length[trajectoryParts]}];*)
(*];*)
(**)
(*counter=0;*)
(*pthMovieOut=FileNameJoin[{pthout,"movie_"<>ToString[dayIndex]}];*)
(*Do[*)
(*plot=ImageCollage[allZoomedInDropletImages[[All,t]],Background->Black];*)
(*Export[FileNameJoin[{pthMovieOut,"frame_"<>IntegerString[++counter,10,IntegerLength[lengthThresh]+1]<>".png"}],plot];*)
(*,{t,1,timeMax,1}];*)
(*];*)
(**)
(**)
(*,{dayIndex,days}];*)
(*][[1]],"\[ThinSpace]s"];*)


(* ::Section:: *)
(*analyze results*)


(* ::Subsection:: *)
(*get intensities*)


(* ::Input:: *)
(*pthout=FileNameJoin[{NotebookDirectory[],"output_2maxLength_frames"}];*)
(*allIntensities=Flatten[Table[*)
(*intensityParts=Import[FileNameJoin[{pthout,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}]];*)
(*intensityParts*)
(*,{dayIndex,{1}}],1];*)


(* ::Input:: *)
(*allIntensities//Dimensions*)


(* ::Input:: *)
(*dt=1.0/30.0;*)
(*Dimensions/@({Range[Length[#]]dt,#}\[Transpose]&/@intensityParts)*)


(* ::Input:: *)
(*ListLinePlot[{Range[Length[#]]dt,#}\[Transpose]&/@intensityParts,PlotRange->{All,{0,0.5}},Frame->True,FrameStyle->Directive[Black,20,AbsoluteThickness[2]],FrameLabel->{"time \!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\) (s)","Integrated intensity \!\(\**)
(*StyleBox[\"I\",\nFontSlant->\"Italic\"]\)"}]*)


(* ::Input:: *)
(*pthout=FileNameJoin[{NotebookDirectory[],"output_2maxLength_frames"}];*)
(*allAnglesPerDay=Table[*)
(*intensityParts=Import[FileNameJoin[{pthout,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}]];*)
(*plot=ListLinePlot[{Range[Length[#]]dt,#}\[Transpose]&/@intensityParts,PlotRange->{{0,320},{0,0.4}},Frame->True,FrameStyle->Directive[Black,20,AbsoluteThickness[2]],FrameLabel->{"time t (s)","intensity I"}];*)
(*Export[FileNameJoin[{pthout,"intensityTime_day_"<>ToString[dayIndex]<>".png"}],plot];*)
(*dailyMax=Max[intensityParts];*)
(*rescaledIntensities=Rescale[#,(*{0.05,0.3}*)(*{0.0,0.3}*){0,dailyMax}]&/@intensityParts;*)
(*clampedIntensities=Max[Min[#,1.0],0.0]&/@rescaledIntensities;*)
(*angles=ArcCos[Sqrt[clampedIntensities]];*)
(*(*intensityParts*)*)
(*(*clampedIntensities*)*)
(*angles*)
(*,{dayIndex,6}];*)


(* ::Input:: *)
(*allIntensitiesPerDay[[1]];*)


(* ::Input:: *)
(*ListPlot[Mean/@allAnglesPerDay,Frame->True]*)


(* ::Input:: *)
(*allAngles=ArcCos[Sqrt[allRescaledIntensities]];*)


(* ::Input:: *)
(*allAngles//Dimensions*)


(* ::Input:: *)
(*allAngles[[1]]*)


(* ::Input:: *)
(*ListPlot[Mean/@allAngles]*)


(* ::Input:: *)
(*allRescaledIntensities[[1]]//Dimensions*)


(* ::Input:: *)
(*ListLinePlot[allRescaledIntensities[[1]],PlotRange->All]*)


(* ::Input:: *)
(*allRescaledIntensities=Max[Min[#,1.0],0.0]&/@Rescale[#,{0.05,0.3}]&/@allIntensities;*)


(* ::Input:: *)
(*allAngles=ArcCos[Sqrt[allRescaledIntensities]];*)


(* ::Input:: *)
(*ListLinePlot[allIntensities,PlotRange->All]*)


(* ::Input:: *)
(*ListLinePlot[allRescaledIntensities,PlotRange->All]*)


(* ::Input:: *)
(*ListLinePlot[allAngles,PlotRange->All]*)


(* ::Subsubsection:: *)
(*power spectra - creepy eyes*)


(* ::Input:: *)
(*data=Import["C:\\Users\\Jan\\Downloads\\thetaValsForJan.mat"][[1]]\[Transpose];*)
(*{nDroplets,nFrames}=Dimensions[data]*)
(**)
(*(** find lengths **)*)
(*lengths=Table[*)
(*nFrames-FirstPosition[Reverse[data[[i]]],_?(#>0.0&)][[1]]+1*)
(*,{i,nDroplets}]*)
(*MapThread[data[[#1,Min[#2+1,nFrames]]]&,{Range[nDroplets],lengths}];  (** debug **)*)
(*data2=MapThread[data[[#1,;;Min[#2+1,nFrames]]]&,{Range[nDroplets],lengths}];*)
(**)
(*(** filter by lengths **)*)
(*minLength=200;*)
(*data3=Select[data2,(Length[#]>minLength&)];*)
(*lengths=Select[lengths,(Length[#]>minLength&)];*)
(**)
(*(** get spectra and mean spectrum **)*)
(*dt=1.0/30;*)
(*nPaddedSamples=2nFrames;*)
(*windowingQ=True;*)
(*times=nFrames dt;*)
(*paddedMemory=ConstantArray[0.0,nPaddedSamples];*)
(*powerSpectralDensities=calculateTemporalFreqSpectrum[dt,#,windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose]&/@data3;*)
(*freqs=powerSpectralDensities[[1,All,1]];*)
(*spectra=powerSpectralDensities[[All,All,2]];*)
(*weightedSpectra=MapThread[#1/#2&,{spectra,lengths}];*)
(*meanSpectrum=Mean[spectra];*)
(*normSpectra=#/Max[#]&/@spectra;*)
(*meanNormSpectrum=Mean[normSpectra];*)
(*weightedMeanSpectrum=Mean[weightedSpectra];*)


(* ::Input:: *)
(*Manipulate[*)
(*ListLinePlot[data[[i]],Frame->True,AspectRatio->1,PlotRange->{0,\[Pi]/2}]*)
(*,{i,1,Length[data],1}]*)


(* ::Input:: *)
(**)


(* ::Subsubsection:: *)
(*get power spectra*)


(* ::Input:: *)
(*pthout=FileNameJoin[{NotebookDirectory[],"output_2maxLength_frames"}];*)
(*dt=1.0/30;*)
(*windowingQ=True;*)
(*lengthThresh=800;*)
(**)
(*movieLengths={8344, 7252,8046,9225,5244,2251};*)
(*padFactor=2;*)
(*nPaddedSamples=padFactor Max[movieLengths]; *)
(*filterQ=True;*)
(*badLists={(*{1,2,11,26,28,31,44,51,70}~Join~*){3,7,9,10,16,20,23,27,29,41,43,44,46,49,50,54,55,59,64},{4,5,17,18,21,22,23,33,36,38,47,49},{4,6,7,9,15,16,21,24,36,39,40,42,43,45,59,62,66,71,73},{3,6,7,11,13,14,15,24,30,31,32,33,40,43,44,51,57,65,77,79,80,82,85,92,96,98,103,105,108,114,117,118,124},*)
(*{5,13,21,32,33,34,52,55},{}};*)
(*listLengths={71,50,83,124,62,14};*)
(*filterLists=MapThread[Complement[Range[#2],#1]&,{badLists,listLengths}];*)
(*(*nPaddedSamples=padFactor lengthThresh;*)*)


(* ::Input:: *)
(*windowSize=1;*)
(*Print[AbsoluteTiming[*)
(*{meanSpectra,meanNormSpectra,allSpectra,allNormSpectra,weightedMeanSpectra,weightedMeanNormSpectra}=Table[*)
(*Print[dayIndex];*)
(*intensityParts=Import[FileNameJoin[{pthout,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}]];*)
(*If[filterQ,intensityParts=intensityParts[[filterLists[[dayIndex]]]];];*)
(*lengths=Length/@intensityParts;*)
(**)
(*times=Range[Length[intensityParts[[1]]]]dt;*)
(*paddedMemory=ConstantArray[0.0,nPaddedSamples];*)
(*powerSpectralDensities=calculateTemporalFreqSpectrum[dt,#,windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose]&/@intensityParts;*)
(*freqs=powerSpectralDensities[[1,All,1]];*)
(*spectra=powerSpectralDensities[[All,All,2]];*)
(*weightedSpectra=MapThread[#1/#2&,{spectra,lengths}];*)
(*meanSpectrum=Mean[spectra];*)
(*normSpectra=#/Max[#]&/@spectra;*)
(*meanNormSpectrum=Mean[normSpectra];*)
(*weightedMeanSpectrum=Mean[weightedSpectra];*)
(**)
(*(** moving time-average **)*)
(*If[windowSize>1,*)
(*timesAvg=MovingAverage[times,windowSize];*)
(*paddedMemory=MovingAverage[ConstantArray[0.0,nPaddedSamples],windowSize];*)
(*powerSpectralDensitiesAvg=calculateTemporalFreqSpectrum[dt,MovingAverage[#,windowSize],windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose]&/@intensityParts;*)
(*freqsAvg=powerSpectralDensitiesAvg[[1,All,1]];*)
(*spectraAvg=powerSpectralDensitiesAvg[[All,All,2]];*)
(*normSpectraAvg=#/Max[#]&/@spectraAvg;*)
(*meanSpectrumAvg=Mean[normSpectraAvg];*)
(*];*)
(**)
(*(** output **)*)
(*{meanSpectrum,meanNormSpectrum,spectra,normSpectra,weightedMeanSpectrum,weightedMeanNormSpectrum}*)
(*,{dayIndex,Range[6]}]\[Transpose];*)
(*][[1]]];*)


(* ::Subsubsection:: *)
(*normalized weighted mean of spectra (meaningful)*)


(* ::Input:: *)
(*fMax=1.0;*)
(*fMaxIndex=FirstPosition[freqs,_?(#>=fMax&)][[1]];*)
(*{indexStart,indexEnd}={1,fMaxIndex};*)
(*iFits=NonlinearModelFit[{freqs,#/Max[#]}\[Transpose][[indexStart;;indexEnd]],{aa/(1.0+(f/bb)^2),aa>0,bb>0},{{aa,1},{bb,0.1}},f,MaxIterations->1000(*,Weights\[Rule]Join[ConstantArray[1.0,Round[0.5fMaxIndex]],ConstantArray[0.1,Round[0.5fMaxIndex]]]*)]&/@weightedMeanSpectra[[All,startIndex;;]];  (** Lorentz with peak at 0 Hz **)*)
(**)
(*ampsEx=aa/.#["BestFitParameters"]&/@iFits*)
(*widthsEx=bb/.#["BestFitParameters"]&/@iFits*)


(* ::Input:: *)
(*Grid[{Join[{"day"},Range[6]],Join[{"width"},widthsEx]}\[Transpose],Frame->All]*)


(* ::Input:: *)
(*startIndex=1;*)
(*plot=ListLinePlot[MapThread[{freqs[[startIndex;;]],#1/(Max[#1]#2)}\[Transpose]&,{weightedMeanSpectra[[All,startIndex;;]],ampsEx}],PlotRange->{{0,2.0},{0,1.6}},PlotLegends->Table["day "<>ToString[i],{i,6}],Frame->True,AspectRatio->1,FrameLabel->{"Frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]](*,PlotLabel->Style["individually normalized avg. of non-normalized spectra",Black]*)]*)
(*backgroundPlot=ListLinePlot[MapThread[{freqs[[startIndex;;]],#1/(Max[#1]#2)}\[Transpose]&,{weightedMeanSpectra[[All,startIndex;;]],ampsEx}],PlotRange->{{0,2.0},{-0.04,1.6}},Frame->True,AspectRatio->1,FrameLabel->{"Frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","PSD (a.u.)"},PlotStyle->LightGray,FrameStyle->Directive[Black,18,AbsoluteThickness[2]]];*)
(*Export[FileNameJoin[{pthout,"meanSpectra_variable_length_normalized"<>If[filterQ,"_filtered",""]<>".png"}],plot]*)
(**)
(*plots=MapThread[*)
(*Show[*)
(*backgroundPlot,*)
(*ListLinePlot[{freqs[[startIndex;;]],#1/(Max[#1]#2)}\[Transpose],PlotRange->{{0,2.0},{0,1.6}},PlotLegends->{"day "<>ToString[#4+1]},Frame->True,AspectRatio->1,FrameLabel->{"Frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","PSD (a.u.)"},PlotStyle->Directive[ColorData[{"BlueGreenYellow","Reverse"}][#4/(Length[ampsEx]-1)],AbsoluteThickness[4]],FrameStyle->Directive[Black,18,AbsoluteThickness[2]](*,PlotLabel->Style["individually normalized avg. of non-normalized spectra",Black]*)],*)
(*Plot[#3[f]/#2,{f,0,2},PlotRange->All,PlotStyle->Black]*)
(*,ImageSize->400]&,{weightedMeanSpectra[[All,startIndex;;]],ampsEx,iFits,Range[0,Length[ampsEx]-1]}];*)
(*plot=Grid[Partition[plots,3]]*)
(*Export[FileNameJoin[{pthout,"singleExperimentalPlots.png"}],plot]*)


(* ::Subsubsection::Closed:: *)
(*normalized mean of spectra (meaningful)*)


(* ::Input:: *)
(*startIndex=1;*)
(*plot=ListLinePlot[{freqs[[startIndex;;]],#/Max[#]}\[Transpose]&/@meanSpectra[[All,startIndex;;]],PlotRange->{{0,2.0},{0,1}},PlotLegends->Table["day "<>ToString[i],{i,6}],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]],PlotLabel->Style["individually normalized avg. of non-normalized spectra",Black]]*)
(*Export[FileNameJoin[{pthout,"meanSpectra"<>If[filterQ,"_filtered",""]<>".png"}],plot]*)
(*(*Export[FileNameJoin[{pthout,"individually_normalized_mean_spectra.png"}],plot]*)*)


(* ::Input:: *)
(*startIndex=1;*)
(*Manipulate[*)
(*plot=ListLinePlot[{freqs[[startIndex;;]],#/Max[#]}\[Transpose]&@meanSpectra[[i,startIndex;;]],PlotRange->{{0,2.0},{0,1}},PlotRangePadding->{Scaled[0.05],0},PlotLegends->{"day "<>ToString[i]},Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&@Subdivide[Length[meanSpectra]-1][[i]]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]],PlotLabel->"avg. of individually normalized spectra"];*)
(*plot*)
(*,{i,1,6,1,Appearance->"Open"}*)
(*,{startIndex,1,100,1,Appearance->"Open"}*)
(*,TrackedSymbols:>{i,startIndex}]*)


(* ::Subsubsection::Closed:: *)
(*normalized mean of normalized spectra (useless*)


(* ::Input:: *)
(*plot=ListLinePlot[{freqs,#/Max[#]}\[Transpose](*\[LeftDoubleBracket]2;;\[RightDoubleBracket]*)&/@meanNormSpectra,PlotRange->{{0,2.0},{0,1}},PlotLegends->Table["day "<>ToString[i],{i,6}],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanNormSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]],PlotLabel->Style["Individually normalized avg. of individually normalized spectra",Black]]*)
(*Export[FileNameJoin[{pthout,"meanNormSpectra"<>If[filterQ,"_filtered",""]<>".png"}],plot]*)


(* ::Text:: *)
(*single spectra*)


(* ::Input:: *)
(*startIndex=1;*)
(*Do[*)
(*plot=ListLinePlot[{freqs[[startIndex;;]],#/Max[#]}\[Transpose]&@meanSpectra[[dayIndex,startIndex;;]],PlotRange->{{0,2.0},{0,1}},PlotLegends->"day "<>ToString[dayIndex],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][(dayIndex-1)/5.0]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]](*,PlotLabel->Style["individually normalized avg. of non-normalized spectra",Black]*)];*)
(*Export[FileNameJoin[{pthout,"single_meanSpectrum_"<>ToString[dayIndex]<>If[filterQ,"_filtered",""]<>".png"}],plot]*)
(*,{dayIndex,6}];*)


(* ::Text:: *)
(*all spectra together*)


(* ::Input:: *)
(*plot=ListLinePlot[{freqs[[startIndex;;]],#(*/Max[#]*)}\[Transpose](*\[LeftDoubleBracket]2;;\[RightDoubleBracket]*)&/@meanSpectra[[All,startIndex;;]],PlotRange->{{0,2.0},{0,All}},PlotLegends->Table["day "<>ToString[i],{i,6}],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]]]*)
(*Export[FileNameJoin[{pthout,"non_normalized_mean_non_normalized_spectra.png"}],plot]*)


(* ::Input:: *)
(*findHalfAreaIndex[data_,halfArea_,dt_]:=Module[{area=dt data[[1]],index=2},*)
(*While[area<0.5halfArea,index++;area+=dt Total[data[[index;;index+1]]]];*)
(*index]*)


(* ::Input:: *)
(*{allMaxIndices,allHalfAreaIndices}=Table[*)
(*fullAreas=dt Total[Join[#[[{1}]],2#[[2;;-2]],#[[{-1}]]]]&/@normSpectra[[dayIndex]]; (** trapezoidal rule for integration **)*)
(*halfAreaIndices=MapThread[findHalfAreaIndex[#1,#2,dt]&,{normSpectra[[dayIndex]],fullAreas}];*)
(*maxIndices=Ordering[#,-1][[1]]&/@normSpectra[[dayIndex]];*)
(*{maxIndices,halfAreaIndices}*)
(*,{dayIndex,Range[6]}]\[Transpose];*)
(**)
(*plots=Table[*)
(*Histogram[freqs[[allMaxIndices[[dayIndex]]]],{0,1.2,0.1},PlotRange->All,Frame->True,FrameLabel->{"frequency f (Hz)","counts"},FrameStyle->Directive[Black,20],AspectRatio->1,PlotLabel->Style["day: "<>ToString@dayIndex,Black,20],ImageSize->300]*)
(*,{dayIndex,Range[6]}];*)
(*(*singleHistogram=Histogram[freqs\[LeftDoubleBracket]#\[RightDoubleBracket]&/@allMaxPositions,{0,1.2,0.1},PlotRange->All,Frame->True,FrameLabel->{"frequency f (Hz)","counts"},FrameStyle->Directive[Black,20],AspectRatio->1,ImageSize->300];*)*)
(*plot=Grid[{plots}]*)
(*Export[FileNameJoin[{pthout,"maxFrequencyHistograms.png"}],plot]*)
(**)
(*plots=Table[*)
(*Histogram[freqs[[allHalfAreaIndices[[dayIndex]]]],{0,1.2,0.1},PlotRange->All,Frame->True,FrameLabel->{"frequency f (Hz)","counts"},FrameStyle->Directive[Black,20],AspectRatio->1,PlotLabel->Style["day: "<>ToString@dayIndex,Black,20],ImageSize->300]*)
(*,{dayIndex,Range[6]}];*)
(*(*singleHistogram=Histogram[freqs\[LeftDoubleBracket]#\[RightDoubleBracket]&/@allMaxPositions,{0,1.2,0.1},PlotRange->All,Frame->True,FrameLabel->{"frequency f (Hz)","counts"},FrameStyle->Directive[Black,20],AspectRatio->1,ImageSize->300];*)*)
(*plot=Grid[{plots}]*)
(*Export[FileNameJoin[{pthout,"halfAreaFrequencyHistograms.png"}],plot]*)


(* ::Input:: *)
(*ListLinePlot[normSpectra[[1]],PlotRange->All]*)


(* ::Input:: *)
(*ListDensityPlot[normSpectra[[1]],InterpolationOrder->0]*)


(* ::Input:: *)
(*plot=ListLinePlot[{freqs,#/Max[#]}\[Transpose][[2;;]]&/@meanSpectraAvg,PlotRange->{{0,2.0},{0,1}},PlotLegends->Range[6],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","mov avg norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanSpectraAvg]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]]]*)
(*Export[FileNameJoin[{pthout,"avg_spectra.png"}],plot]*)


(* ::Subsubsection::Closed:: *)
(*moving average*)


(* ::Input:: *)
(*Manipulate[*)
(*iData=intensityParts[[i]];*)
(*iDataAvg=MovingAverage[intensityParts[[i]],windowSize];*)
(*p1=ListLinePlot[{{times,iData}\[Transpose],{timesAvg,iDataAvg}\[Transpose]},Frame->True,AspectRatio->1,ImageSize->300,FrameStyle->Directive[Black,AbsoluteThickness[2]]];*)
(*p3=ListLinePlot[{{freqs,spectra[[i]]}\[Transpose][[;;500]],{freqs,spectraAvg[[i]]}\[Transpose][[;;500]]},Frame->True,AspectRatio->1,ImageSize->300,PlotRange->All,FrameStyle->Directive[Black,AbsoluteThickness[2]]];*)
(*Grid[{{p1,p3}}]*)
(*,{i,1,Length[intensityParts],1,Appearance->"Open"}]*)


(* ::Subsubsection:: *)
(*import simulated data*)


(* ::Input:: *)
(*datas=Import[FileNameJoin[{pthout,"allMeanThetas2.hdf5"}],Join[{"Datasets"},Table["meanThetas2_"<>ToString[i],{i,6}]]];*)


(* ::Input:: *)
(*plot=Grid[{Histogram[#,{0,\[Pi],0.02\[Pi]},"Probability",Frame->True,AspectRatio->1,PlotRange->{0,1}]&/@allMeanThetas2}]*)
(*Export[FileNameJoin[{pthout,"angleProbabilities.png"}],plot]*)


(* ::Subsubsection:: *)
(*manually find best fits as starting parameters**)


(* ::Input:: *)
(*(** init array of default start parameters **)*)
(*startParameters=ConstantArray[{1,1,1,1,1},nDatasets]*)
(**)
(*(** manually override bad fit starting parameters **)*)
(**)


(* ::Subsubsection:: *)
(*find best fit simulation spectra to individual experimental ones*)


(* ::Input:: *)
(*individuallyNormedMeanSpectra=Import[FileNameJoin[{pthout,"meanNormSingleSpectra.hdf5"}],{"Datasets",Table["meanNormSingleSpectra_"<>ToString[i],{i,6}]}];*)


(* ::Input:: *)
(*plot=ListLinePlot[{freqs,#}\[Transpose](*\[LeftDoubleBracket]2;;\[RightDoubleBracket]*)&/@individuallyNormedMeanSpectra,PlotRange->{{0,2.0},{0,1}},PlotLegends->Range[6],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[individuallyNormedMeanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]]]*)
(*Export[FileNameJoin[{pthout,"individuallyNormedMeanSpectra.png"}],plot]*)


(* ::Input:: *)
(*globallyNormedMeanSpectra=Import[FileNameJoin[{pthout,"meanNormAllSpectra.hdf5"}],{"Datasets",Table["meanNormAllSpectra_"<>ToString[i],{i,6}]}];*)


(* ::Input:: *)
(*plot=ListLinePlot[{freqs,#}\[Transpose](*\[LeftDoubleBracket]2;;\[RightDoubleBracket]*)&/@globallyNormedMeanSpectra,PlotRange->{{0,2.0},{0,1}},PlotLegends->Range[6],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[globallyNormedMeanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]]]*)
(*Export[FileNameJoin[{pthout,"individuallyNormedMeanSpectra.png"}],plot]*)


(* ::Input:: *)
(*freqs;*)


(* ::Input:: *)
(*individuallyNormedSpectra//Dimensions*)


(* ::Input:: *)
(*individualSpectra=Import[FileNameJoin[{pthout,"meanNormSingleSpectra.hdf5"}],meanNormSingleSpectra,{"Datasets",Table["meanNormSingleSpectra_"<>ToString[i],{i,6}]}];*)
(*Export[FileNameJoin[{pthout,"meanNormAllSpectra.hdf5"}],meanNormAllSpectra,{"Datasets",Table["meanNormAllSpectra_"<>ToString[i],{i,6}]}];*)


(* ::Input:: *)
(*(** import simulated mean spectra from all days **)*)
(*individualSpectra=Import[FileNameJoin[{pthout,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}]];*)
(**)
(*(** cycle through all days and each spectrum **)*)
(**)


(* ::Subsubsection:: *)
(*spectra as a function of activity (days)*)


(* ::Input:: *)
(*plot=ListLinePlot[{freqs,#/Max[#]}\[Transpose][[2;;]]&/@meanSpectra,PlotRange->{{0,2.0},{0,1}},PlotLegends->Range[6],Frame->True,AspectRatio->1,FrameLabel->{"frequency f (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]]]*)
(*Export[FileNameJoin[{pthout,"avg_spectra_over_time.png"}],plot]*)


(* ::Subsubsection::Closed:: *)
(*fits of mean spectra*)


(* ::Input:: *)
(*(** perform fits to individual spectra **)*)
(*normMeanSpectra=#/Max[#]&/@meanSpectra;*)
(*fMax=1.0;*)
(*indexStart=2;*)
(*fMaxIndex=FirstPosition[freqs,_?(#>=fMax&)][[1]];*)
(*iNormFits=NonlinearModelFit[{freqs,#}\[Transpose][[indexStart;;fMaxIndex]],{(aa/( 1.0+(xx-x0)^2/bb^2))^2,x0>0},{{aa,Max[#[[indexStart;;]]]},{bb,0.01},{x0,0.01}},xx]&/@normMeanSpectra;*)
(*iNormFits2=NonlinearModelFit[{freqs,#}\[Transpose][[indexStart;;fMaxIndex]],{i0^2 (1/(2520 Sqrt[2 \[Pi]]) aa bb^2 (-((128 aa^7 bb^7)/(64 bb^2+(\[Omega]-8 \[Omega]0)^2))+(448 aa^6 bb^6 (-2 cc+\[Pi]))/(49 bb^2+(\[Omega]-7 \[Omega]0)^2)-(672 aa^5 bb^5 (-2+4 cc^2-4 cc \[Pi]+\[Pi]^2))/(36 bb^2+(\[Omega]-6 \[Omega]0)^2)+(560 aa^4 bb^4 (-8 cc^3+12 cc^2 \[Pi]+\[Pi] (-6+\[Pi]^2)-6 cc (-2+\[Pi]^2)))/(25 bb^2+(\[Omega]-5 \[Omega]0)^2)-(280 aa^3 bb^3 (24+16 cc^4-32 cc^3 \[Pi]-12 \[Pi]^2+\[Pi]^4-8 cc \[Pi] (-6+\[Pi]^2)+24 cc^2 (-2+\[Pi]^2)))/(16 bb^2+(\[Omega]-4 \[Omega]0)^2)-(84 aa^2 bb^2 (32 cc^5-80 cc^4 \[Pi]-40 cc^2 \[Pi] (-6+\[Pi]^2)+80 cc^3 (-2+\[Pi]^2)-\[Pi] (120-20 \[Pi]^2+\[Pi]^4)+10 cc (24-12 \[Pi]^2+\[Pi]^4)))/(9 bb^2+(\[Omega]-3 \[Omega]0)^2)-1/(4 bb^2+(\[Omega]-2 \[Omega]0)^2) 14 aa bb (-720+64 cc^6-192 cc^5 \[Pi]+360 \[Pi]^2-30 \[Pi]^4+\[Pi]^6-160 cc^3 \[Pi] (-6+\[Pi]^2)+240 cc^4 (-2+\[Pi]^2)-12 cc \[Pi] (120-20 \[Pi]^2+\[Pi]^4)+60 cc^2 (24-12 \[Pi]^2+\[Pi]^4))+1/(bb^2+(\[Omega]-\[Omega]0)^2) (-128 cc^7+448 cc^6 \[Pi]+560 cc^4 \[Pi] (-6+\[Pi]^2)-672 cc^5 (-2+\[Pi]^2)+84 cc^2 \[Pi] (120-20 \[Pi]^2+\[Pi]^4)-280 cc^3 (24-12 \[Pi]^2+\[Pi]^4)+\[Pi] (-5040+840 \[Pi]^2-42 \[Pi]^4+\[Pi]^6)-14 cc (-720+360 \[Pi]^2-30 \[Pi]^4+\[Pi]^6))))^2,\[Pi]/4<cc<\[Pi]},{{aa,1},{bb,0.1},{\[Omega]0,0.1},{i0,0.1},{cc,2.1}},\[Omega]]&/@normMeanSpectra;*)
(**)
(*mwidths=#["BestFitParameters"][[2,2]]&/@iNormFits;*)
(*mpeakPos=#["BestFitParameters"][[3,2]]&/@iNormFits;*)
(**)
(*mwidths2=#["BestFitParameters"][[2,2]]&/@iNormFits2;*)
(*mpeakPos2=#["BestFitParameters"][[3,2]]&/@iNormFits2;*)
(*mmeanThetas2=#["BestFitParameters"][[5,2]]&/@iNormFits2;*)


(* ::Input:: *)
(*iNormFits[[1]]["ParameterErrors"]*)


(* ::Input:: *)
(*ListLinePlot[mwidths,PlotRange->{{0.5,6.5},All},Frame->True,FrameLabel->{"age (days)","width (Hz)"},FrameStyle->Directive[Black,AbsoluteThickness[2],18],AspectRatio->1,Mesh->All]*)
(*ListLinePlot[mwidths2,PlotRange->{{0.5,6.5},All},Frame->True,FrameLabel->{"age (days)","width (Hz)"},FrameStyle->Directive[Black,AbsoluteThickness[2],18],AspectRatio->1,Mesh->All]*)
(*ListLinePlot[mmeanThetas2,PlotRange->{{0.5,6.5},{0,\[Pi]}},Frame->True,FrameLabel->{"age (days)","mean angle \[LeftAngleBracket]\[Theta]\[RightAngleBracket]"},FrameStyle->Directive[Black,AbsoluteThickness[2],18],AspectRatio->1,Mesh->All]*)


(* ::Input:: *)
(*Do[*)
(*plot=Grid[{{*)
(*Show[*)
(*ListPlot[{freqs,normMeanSpectra[[i]]}\[Transpose][[2;;]],Joined->True,PlotRange->{{0,fMax},{0,1}},Frame->True,FrameLabel->{"frequency f (Hz)","norm. PSD"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->{Automatic,None},AspectRatio->1],*)
(*Plot[iNormFits[[i]][f],{f,0,fMax},PlotRange->All,PlotStyle->Directive[Red,Dashed]]*)
(*],*)
(*Show[*)
(*ListPlot[{freqs,normMeanSpectra[[i]]}\[Transpose][[2;;]],Joined->True,PlotRange->{{0,fMax},{0,1}},Frame->True,FrameLabel->{"frequency f (Hz)","norm. PSD"},FrameStyle->Directive[Black,16,AbsoluteThickness[2]],ImageSize->{Automatic,300},PlotRangePadding->{Automatic,None},AspectRatio->1],*)
(*Plot[iNormFits2[[i]][f],{f,0,fMax},PlotRange->All,PlotStyle->Directive[Red,Dashed]]*)
(*]*)
(*}}];*)
(*Print[plot];*)
(*,{i,Length[normMeanSpectra]}];*)


(* ::Subsubsection::Closed:: *)
(*manual measurement of FWHM*)


(* ::Input:: *)
(*ListLinePlot[2{0.19,0.17,0.18,0.18,0.14,0.08},Frame->True,FrameLabel->{"age (days)","width (Hz)"},FrameStyle->Directive[Black,AbsoluteThickness[2],18],AspectRatio->1,Mesh->All,PlotRange->{{0.5,6.5},All}]*)


(* ::Subsubsection:: *)
(*translational droplet speed*)


(* ::Input:: *)
(*ListPlot[Sort@speeds,Frame->True,PlotRange->All]*)


(* ::Input:: *)
(*Mean[speeds]*)


(* ::Input:: *)
(*Variance[speeds]*)


(* ::Input:: *)
(*Count[speeds,u_/;u>100]*)


(* ::Input:: *)
(*StandardDeviation[speeds]*)


(* ::Input:: *)
(*speeds*)


(* ::Input:: *)
(*Histogram[speeds]*)


(* ::Text:: *)
(*TODO : check trajectory with enormous speeds -> likely has issues! remove outliers!*)


(* ::Input:: *)
(*StandardDeviation[Sort[speeds][[;;-30]]]*)


(* ::Input:: *)
(*ListLogPlot[allSpeeds[[1]],PlotRange->All,Joined->True]*)


(* ::Input:: *)
(*stdSpeeds*)


(* ::Input:: *)
(*allSpeeds,allWidths,allPeakPositions*)


(* ::Input:: *)
(*meanSpeeds=Mean/@allSpeeds;*)
(*stdSpeeds=StandardDeviation/@allSpeeds;*)


(* ::Input:: *)
(*ListPlot[{meanSpeeds,meanSpeeds+stdSpeeds,meanSpeeds-stdSpeeds},Frame->True,FrameLabel->{"time t (days)","speed \!\(\**)
(*StyleBox[\"v\",\nFontSlant->\"Italic\"]\) (px/frame)"},FrameStyle->Directive[Black,18,AbsoluteThickness[2]],PlotRange->{{0.5,6.5},All},AspectRatio->1]*)


(* ::Input:: *)
(*ListPlot[meanSpeeds]*)


(* ::Subsubsection:: *)
(*widths and peak positions*)


(* ::Input:: *)
(*Manipulate[*)
(*(*Abs[allWidths[[4]]]//MinMax*)*)
(*widths0=Abs[allWidths[[i]]];*)
(*p1=Histogram[widths0,{0,2,0.1},PlotRange->{{0,2},All}];*)
(*(*Mean[widths0]*)
(*StandardDeviation[widths0]*)*)
(*widthFiltered=Select[widths0,Abs[#-Mean[widths0]]<=StandardDeviation[widths0]&];*)
(*p2=Histogram[widthFiltered,{0,2,0.1},PlotRange->{{0,2},All}];*)
(*Grid[{{Length[widthFiltered]},{p1,p2}}]*)
(*,{i,1,6,1}]*)


(* ::Input:: *)
(*meanWidths=Mean/@allWidths*)
(*stdWidths=StandardDeviation/@allWidths*)
(**)
(*meanPos=Mean/@allPeakPositions*)
(*stdPos=StandardDeviation/@allPeakPositions*)
(**)
(*ListPlot[{meanWidths,meanWidths+stdWidths,meanWidths-stdWidths},PlotRange->All,Frame->True,FrameLabel->{"age (day)","width (Hz)"},AspectRatio->1]*)
(*ListPlot[{meanPos,meanPos+stdPos,meanPos-stdPos},PlotRange->All,Frame->True,FrameLabel->{"age (day)","position (Hz)"},AspectRatio->1]*)


(* ::Input:: *)
(*allWidthsFiltered=Table[Select[widths,Abs[#-Mean[widths]]<=StandardDeviation[widths]&],{widths,allWidths}];*)
(*meanWidths=Mean/@allWidthsFiltered*)
(*stdWidths=StandardDeviation/@allWidthsFiltered*)


(* ::Input:: *)
(*ListPlot[{meanWidths,meanWidths+stdWidths,meanWidths-stdWidths},PlotRange->All,Frame->True,FrameLabel->{"age (day)","width (Hz)"},AspectRatio->1]*)
(*ListPlot[{meanPos,meanPos+stdPos,meanPos-stdPos},PlotRange->All,Frame->True,FrameLabel->{"age (day)","position (Hz)"},AspectRatio->1]*)


(* ::Chapter::Closed:: *)
(*Single droplet overview movies*)


renderMovie[npics_,lenInSeconds_,reductionFactor_,pthFrames_,ndigits_,name_]:=Module[{fps,pthfnout,cmd},
Print["fps: ",fps=Round[npics/(reductionFactor lenInSeconds),0.01]];
pthfnout=FileNameJoin[{ParentDirectory[pthFrames],name<>".mp4"}];
cmd="ffmpeg -y -framerate "<>ToString[reductionFactor*fps]<>" -i \""<>FileNameJoin[{pthFrames,"frame_%0"<>ToString[ndigits]<>"d.png"}]<>"\" -vf scale=\"trunc(iw/8)*8:trunc(ih/8)*8\" -vcodec libx264 -pix_fmt yuv420p -preset slow -crf 16 -r "<>ToString[fps]<>" \""<>pthfnout<>"\"";
Run[cmd];
];

renderMovie[npics_,fps_,pthFrames_,ndigits_,name_]:=Module[{pthfnout,cmd},
pthfnout=FileNameJoin[{ParentDirectory[pthFrames,2],name<>".mp4"}];
cmd="ffmpeg -y -framerate "<>ToString[fps]<>" -i \""<>FileNameJoin[{pthFrames,"frame_%0"<>ToString[ndigits]<>"d.png"}]<>"\" -vf scale=\"trunc(iw/8)*8:trunc(ih/8)*8\" -vcodec libx264 -pix_fmt yuv420p -preset slow -crf 16 -r "<>ToString[fps]<>" \""<>pthfnout<>"\"";
Run[cmd];
];


(* ::Input:: *)
(*pthData=FileNameJoin[{NotebookDirectory[],"output_2maxLength_frames"}];*)
(*pthRawMovie="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Videos\\Activity videos";*)
(*pthDropletTrajectory="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Code\\tracker\\output_droplet_frame_data";*)
(**)
(*nDays=6;*)
(*allIntensities=Table[*)
(*Import[FileNameJoin[{pthData,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}]]*)
(*,{dayIndex,nDays}];*)
(**)
(*badLists={(*{1,2,11,26,28,31,44,51,70}~Join~*)*)
(*{1}~Join~{3,7,9,10,16,20,23,27,29,41,43,44,46,49,50,54,55,59,64},*)
(*{4,5,17,18,21,22,23,33,36,38,47,49},*)
(*{4,6,7,9,15,16,21,24,36,39,40,42,43,45,59,62,66,71,73},{3,6,7,11,13,14,15,24,30,31,32,33,40,43,44,51,57,65,77,79,80,82,85,92,96,98,103,105,108,114,117,118,124},*)
(*{5,13,21,32,33,34,52,55},*)
(*{}*)
(*};*)
(*listLengths={71,50,83,124,62,14};  (** number of droplets **)*)
(*filterLists=MapThread[Complement[Range[#2],#1]&,{badLists,listLengths}];         (** good droplets **)*)
(*filterLists=filterLists[[All,1;;]];*)
(**)
(*windowingQ=True;*)
(*fMax=1.0;*)
(*dt=1.0/30;*)
(*minSeconds=10.0;  (** TODO: calculation? **)*)
(*movieLengths={8344, 7252,8046,9225,5244,2251};*)
(*padFactor=2;*)
(*nPaddedSamples=padFactor Max[movieLengths]; *)
(*paddedMemory=ConstantArray[0.0,nPaddedSamples];*)
(*{imin,imax}={Floor[Min[#],0.05],Ceiling[Max[#],0.05]}&@allIntensities;*)
(*dropletStartIndex=6;   (** should be 1 for usual execution **)*)
(**)


(* ::Input:: *)
(*Length/@filterLists*)


(* ::Input:: *)
(*(** progress indicator **)*)
(*pi=0.0;Print[Overlay[{ProgressIndicator[Dynamic[pi],{0,1}],Dynamic[ToString[DecimalForm[pi*100.0,{4,1}]]<>"\[ThinSpace]%"]},Alignment->"Center"]];*)
(*picounter=0;*)
(**)
(*dayIndices=Range[6];*)
(*(*dayIndices={6};*)*)
(*Print[AbsoluteTiming[*)
(*Do[*)
(*Print["day = ",dayIndex,", number of droplets = ",Length[filterLists[[dayIndex]]]];*)
(**)
(*(** get all video frames  **)*)
(*movieFile=FileNameJoin[{pthRawMovie,"Day "<>ToString[dayIndex]<>".avi"}];*)
(*Print[AbsoluteTiming[*)
(*images=Import[movieFile,{"AVI","ImageList"}];*)
(*dropletImages=ColorConvert[#,"Grayscale"]&/@images;*)
(*][[1]],"\[ThinSpace]s"];*)
(*{nx,ny}=ImageDimensions[dropletImages[[1]]];*)
(*nFrames=Length[dropletImages];*)
(*Print["Number of video frames: ",nFrames];*)
(**)
(*(** sorted droplet trajectories in the same order as imported intensities **)*)
(*trajectories0=Import[FileNameJoin[{pthDropletTrajectory,"trajectories_"<>ToString[dayIndex]<>".hdf5"}],{"Datasets","Dataset1"}];*)
(*{starts0,ends0}=Transpose[*)
(*{FirstPosition[#,x_/;x>0][[1]],Length[trajectories0]-FirstPosition[Reverse@#,x_/;x>0][[1]]+1}&/@(trajectories0\[Transpose][[All,All,1]])];*)
(*cleanTrajectories=MapThread[#1[[#2;;#3]]&,{trajectories0\[Transpose],starts0,ends0}];*)
(*minLength=Round[minSeconds/dt];*)
(*goodTrajsList=(Length[#]>minLength)&/@cleanTrajectories;*)
(*goodTrajectories=Pick[cleanTrajectories,goodTrajsList];*)
(*goodStarts=Pick[starts0,goodTrajsList];*)
(*sortList=Reverse@Ordering[Length/@goodTrajectories];*)
(*trajectories=goodTrajectories[[sortList]];*)
(*starts=goodStarts[[sortList]];*)
(**)
(**)
(*(** get specific droplet and video frames **)*)
(*allDropletIndices=filterLists;*)
(*dropletIndices=allDropletIndices[[dayIndex]];*)
(*intensities=allIntensities[[dayIndex]];*)
(**)
(**)
(*boxLength=16;*)
(*halfBoxLength=Round[0.5boxLength];*)
(*Do[*)
(*Print["droplet index = ",dropletIndex];*)
(*trajectory=trajectories[[dropletIndex]];*)
(*intensity=intensities[[dropletIndex]];*)
(*time=Range[0,Length[intensity]-1]dt;*)
(*timeIntensityData={time,intensity}\[Transpose];*)
(*fullIntensityPlot=ListLinePlot[timeIntensityData,PlotStyle->Directive[AbsoluteThickness[2],LightGray],Frame->True,FrameLabel->{"time \!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\) (s)","intensity \!\(\**)
(*StyleBox[\"I\",\nFontSlant->\"Italic\"]\)"},FrameStyle->Directive[Black,20,AbsoluteThickness[2]],AspectRatio->1,PlotRange->{imin,imax},ImageSize->{Automatic,300},ImagePadding->{{70,10},{60,10}}];*)
(**)
(*psdiFull=calculateTemporalFreqSpectrum[dt,intensity,windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose];*)
(*fullPSDiPlot=ListLinePlot[psdiFull,PlotStyle->Directive[AbsoluteThickness[2],LightGray],Frame->True,FrameLabel->{"frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","PSD[I]"},FrameStyle->Directive[Black,20,AbsoluteThickness[2]],AspectRatio->1,ImageSize->{Automatic,300},PlotRange->{{0,fMax},{0,All}},ImagePadding->{{90,20},{60,10}}];*)
(**)
(*pthFrames=FileNameJoin[{NotebookDirectory[],"droplet_movies","day_"<>ToString[dayIndex],"mmamovie_droplet_"<>IntegerString[dropletIndex,10,3]}];*)
(**)
(*extraStartFrame=0;  (** min: 0 **)*)
(*startFrame=starts[[dropletIndex]]+extraStartFrame;*)
(*counter=extraStartFrame;*)
(**)
(*picounter=0;*)
(*Do[*)
(*(** single droplet image **)*)
(*position=trajectory[[frame]];*)
(*boxCorners=Round[{{Max[#[[1]]-halfBoxLength,1],Min[#[[1]]+halfBoxLength,nx]},{Max[#[[2]]-halfBoxLength,1],Min[#[[2]]+halfBoxLength,ny]}}]&@position;*)
(*singleDropletImage=ImageTake[dropletImages[[frame+startFrame-1]],ny-#[[2]],#[[1]]]&@boxCorners;*)
(*(** remove droplet flickering by going into center of droplet image **)*)
(*(*imageCentroid=ComponentMeasurements[Binarize[singleDropletImage,0.3],{"Medoid"}]\[LeftDoubleBracket]1,2,1\[RightDoubleBracket];*)
(*offsetsXY={halfBoxLength,halfBoxLength}-imageCentroid;*)
(*If[offsetsXY!={0.0,0.0},*)
(*boxCorners\[LeftDoubleBracket]1\[RightDoubleBracket]-offsetsXY\[LeftDoubleBracket]1\[RightDoubleBracket];*)
(*boxCorners\[LeftDoubleBracket]2\[RightDoubleBracket]-offsetsXY\[LeftDoubleBracket]2\[RightDoubleBracket];*)
(*singleDropletImage=ImageTake[dropletImages\[LeftDoubleBracket]frame+startFrame-1\[RightDoubleBracket],ny-#\[LeftDoubleBracket]2\[RightDoubleBracket],#\[LeftDoubleBracket]1\[RightDoubleBracket]]&@boxCorners;*)
(*];*)*)
(**)
(*(** partial intensity plot **)*)
(*intensityPlot=Show[fullIntensityPlot,ListLinePlot[timeIntensityData[[;;frame]],PlotRange->All]];*)
(**)
(*(** partial power spectral density plot **)*)
(*psdiPartial=calculateTemporalFreqSpectrum[dt,intensity[[;;frame]],windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose];*)
(*psdPlot=Show[fullPSDiPlot,ListLinePlot[psdiPartial,PlotRange->All]];*)
(**)
(*(** overview image **)*)
(*titleLabel=Style["day = "<>ToString[dayIndex]<>", droplet = "<>ToString[dropletIndex]<>", time t = "<>ToString[DecimalForm[(frame-2) dt,{6,2}]]<>"\[ThinSpace]s",Black,24,FontFamily->"Helvetica"];*)
(*overviewPlot=Grid[{{titleLabel,SpanFromLeft},{Show[singleDropletImage,ImageSize->{Automatic,300},ImagePadding->{{5,5},{60,10}}],intensityPlot,psdPlot}}];*)
(**)
(*(** export overview image **)*)
(*nDigits=5;*)
(*Export[FileNameJoin[{pthFrames,"frame_"<>IntegerString[counter++,10,nDigits]<>".png"}],overviewPlot];*)
(*pi=N[++picounter/Length[trajectory]];*)
(**)
(*,{frame,2,Length[trajectory]}];*)
(**)
(*(** create droplet overview movie **)*)
(*fps=30;*)
(*name="day_"<>ToString[dayIndex]<>"_droplet_"<>IntegerString[dropletIndex,10,3];*)
(*renderMovie[Length[trajectory],fps,pthFrames,nDigits,name];*)
(**)
(*,{dropletIndex,dropletIndices[[dropletStartIndex;;]]}];*)
(*,{dayIndex,dayIndices}];*)
(*][[1]],"\[ThinSpace]s"];*)


(* ::Chapter::Closed:: *)
(*old*)


(* ::Section::Closed:: *)
(*Figure 2b,e: timseries for days {1,6}*)


(* ::Input:: *)
(*(** options **)*)
(*fMax=1.0;*)
(*tMaxPlot=60;*)
(*padPlotQ=True;*)
(*windowingQ=True;*)
(*paddingChoice=2(*3*);*)
(*colors={colorYoung,colorOld};*)
(*nDroplets=4;*)
(*dropletIndices=ConstantArray[Range[nDroplets],6];*)
(*imax=0.35;*)
(**)
(*(** Fig. 2a **)*)
(*(** timeseries plots **)*)
(*tTicks=Range[0,60,10];*)
(*timeseriesOverviewPlots=Table[*)
(**)
(*(** create time series plots **)*)
(*timeseriesPlots=Table[*)
(*lastPlotQ=dropletIndex==nDroplets;*)
(*intensity=allIntensities[[dayIndex,dropletIndex]]/imax;*)
(*time=Range[0,Length[#]-1]dt&@intensity;*)
(**)
(*plotops={AspectRatio->1/5.5,ImageSize->400,Frame->True,FrameTicks->If[lastPlotQ,{{None,None},{tTicks,tTicks}},{{None,None},{tTicks,tTicks}}],FrameStyle->Directive[Black,20,AbsoluteThickness[2]],ImagePadding->If[lastPlotQ,{{7,11},{55,2}},{{7,11},{2,2}}],PlotRangePadding->{None,Automatic},PlotStyle->colorAges[[dayIndex]]};*)
(*ListLinePlot[{time,intensity}\[Transpose],Evaluate[plotops],PlotRange->{{0,tMaxPlot},{0,1}},FrameLabel->If[lastPlotQ,{"time \!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\) (s)",""},{"",""}]]*)
(*,{dropletIndex,dropletIndices[[dayIndex]]}];*)
(**)
(*(** overview plot **)*)
(*plot=Row[{Rotate[Style["Normalized intensity \!\(\**)
(*StyleBox[\"I\",\nFontSlant->\"Italic\"]\)\!\(\**)
(*StyleBox[\"(\",\nFontSlant->\"Italic\"]\)\!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\)\!\(\**)
(*StyleBox[\")\",\nFontSlant->\"Italic\"]\)",Black,20,FontFamily->"Helvetica"],\[Pi]/2],Grid[{timeseriesPlots}\[Transpose]]}]*)
(*,{dayIndex,nDays}];*)
(**)
(*(plots=timeseriesOverviewPlots[[{1,-1}]])//TableForm*)


(* ::Input:: *)
(*Do[*)
(*MapThread[( *)
(*filename=FileNameJoin[{pthFigs,"figure 2",#1<>"."<>ext}];*)
(*Print[filename];*)
(*Export[filename,#2])&*)
(*,{{"plot2b","plot2e"},plots}];*)
(*,{ext,{"png","pdf"}}];*)


(* ::Subsection::Closed:: *)
(*bad alternative: all trajectories together*)


(* ::Input:: *)
(*dayIndex=1;*)
(*Show[*)
(*Table[*)
(*intensity=allIntensities[[dayIndex,dropletIndex]]/imax;*)
(*time=Range[0,Length[#]-1]dt&@intensity;*)
(*plotops={AspectRatio->1,ImageSize->400,Frame->True,FrameTicks->If[lastPlotQ,{{None,None},{tTicks,tTicks}},{{None,None},{tTicks,tTicks}}],FrameStyle->Directive[Black,20,AbsoluteThickness[2]],ImagePadding->If[lastPlotQ,{{7,11},{55,2}},{{7,11},{2,2}}],PlotRangePadding->{None,Automatic},PlotStyle->ColorData[97,dropletIndex](*Directive[Opacity[0.3],colorAges\[LeftDoubleBracket]dayIndex\[RightDoubleBracket]]*)};*)
(*ListLinePlot[{time,intensity}\[Transpose],Evaluate[plotops],PlotRange->{{0,tMaxPlot},{0,1}},FrameLabel->If[lastPlotQ,{"time \!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\) (s)",""},{"",""}]]*)
(*,{dropletIndex,Range[9](*dropletIndices\[LeftDoubleBracket]dayIndex\[RightDoubleBracket]*)}]*)
(*]*)


(* ::Input:: *)
(*dayIndex=6;*)
(*Show[*)
(*Table[*)
(*intensity=allIntensities[[dayIndex,dropletIndex]]/imax;*)
(*time=Range[0,Length[#]-1]dt&@intensity;*)
(*plotops={AspectRatio->1/5.5,ImageSize->400,Frame->True,FrameTicks->If[lastPlotQ,{{None,None},{tTicks,tTicks}},{{None,None},{tTicks,tTicks}}],FrameStyle->Directive[Black,20,AbsoluteThickness[2]],ImagePadding->If[lastPlotQ,{{7,11},{55,2}},{{7,11},{2,2}}],PlotRangePadding->{None,Automatic},PlotStyle->colorAges[[dayIndex]]};*)
(*ListLinePlot[{time,intensity}\[Transpose],Evaluate[plotops],PlotRange->{{0,tMaxPlot},{0,1}},FrameLabel->If[lastPlotQ,{"time \!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\) (s)",""},{"",""}]]*)
(*,{dropletIndex,dropletIndices[[dayIndex]]}]*)
(*]*)


(* ::Section::Closed:: *)
(*Figure 2 top row: single timeseries for days {1,6}*)


(* ::Input:: *)
(*(** options **)*)
(*tMaxPlot=60;*)
(*padPlotQ=True;*)
(*colors={colorYoung,colorOld};*)
(*dropletIndices={2,1,1,1,1,3};*)
(*imax=0.35;*)
(**)
(*(** Fig. 2 top row **)*)
(*(** timeseries plots **)*)
(*tTicks=Range[0,60,10];*)
(*timeseriesOverviewPlots=Flatten@Table[*)
(**)
(*(** create time series plots **)*)
(*timeseriesPlots=Table[*)
(*intensity=allIntensities[[dayIndex,dropletIndex]]/imax;*)
(*time=Range[0,Length[#]-1]dt&@intensity;*)
(**)
(*plotops={AspectRatio->1/5.5,ImageSize->400,Frame->True,FrameTicks->{{None,None},{tTicks,tTicks}},FrameStyle->Directive[Black,20,AbsoluteThickness[2]],ImagePadding->{{50,11},{55,2}},PlotRangePadding->{None,Automatic},PlotStyle->colorAges[[dayIndex]]};*)
(*ListLinePlot[{time,intensity}\[Transpose],Evaluate[plotops],PlotRange->{{0,tMaxPlot},{0,1}},FrameLabel->{"time \!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\) (s)","\!\(\**)
(*StyleBox[\"I\",\nFontSlant->\"Italic\"]\)\!\(\**)
(*StyleBox[\"(\",\nFontSlant->\"Italic\"]\)\!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\)\!\(\**)
(*StyleBox[\")\",\nFontSlant->\"Italic\"]\)"}]*)
(*,{dropletIndex,{dropletIndices[[dayIndex]]}}]*)
(*,{dayIndex,nDays}];*)
(**)
(*plots=timeseriesOverviewPlots[[{1,-1}]];*)
(*Grid[{plots}]*)


(* ::Input:: *)
(*Do[*)
(*MapThread[( *)
(*filename=FileNameJoin[{pthFigs,"figure 2",#1<>"."<>ext}];*)
(*Print[filename];*)
(*Export[filename,#2])&*)
(*,{{"plot2_young_timeseries","plot2_old_timeseries"},plots}];*)
(*,{ext,{"png","pdf"}}];*)


(* ::Subsubsection::Closed:: *)
(*get single droplet images*)


(* ::Input:: *)
(*(** options **)*)
(*fps=30;*)
(*dt=1.0/fps;*)
(*nSingleDropletImages=12(*6*);*)
(*times=Round[Subdivide[0,60,nSingleDropletImages-1]]; *)
(*frames=times fps+1;   (** frames needs an offset of 1, since mathematica arrays start at 1 **)*)
(*minSeconds=10.0;*)
(**)
(*pthRawMovie="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Videos\\Activity videos";*)
(*pthDropletTrajectory="C:\\Users\\Jan\\Dropbox (MIT)\\Bacteria Droplet Manuscript\\Code\\tracker\\output_droplet_frame_data";*)
(**)
(*singleDropletImagesAll=Table[*)
(*Print[dayIndex];*)
(**)
(*(** get all video frames  **)*)
(*movieFile=FileNameJoin[{pthRawMovie,"Day "<>ToString[dayIndex]<>".avi"}];*)
(*Print[AbsoluteTiming[*)
(*images=Import[movieFile,{"AVI","ImageList"}];*)
(*dropletImages=ColorConvert[#,"Grayscale"]&/@images;*)
(*][[1]],"\[ThinSpace]s"];*)
(*{nx,ny}=ImageDimensions[images[[1]]];*)
(*nFrames=Length[images];*)
(*Print["Number of frames: ",nFrames];*)
(**)
(*(** sorted droplet trajectories in the same order as imported intensities **)*)
(*trajectories0=Import[FileNameJoin[{pthDropletTrajectory,"trajectories_"<>ToString[dayIndex]<>".hdf5"}],{"Datasets","Dataset1"}];*)
(*{starts,ends}=Transpose[*)
(*{FirstPosition[#,x_/;x>0][[1]],*)
(*Length[trajectories0]-FirstPosition[Reverse@#,x_/;x>0][[1]]+1*)
(*}&/@(trajectories0\[Transpose][[All,All,1]])];*)
(*cleanTrajectories=MapThread[#1[[#2;;#3]]&,{trajectories0\[Transpose],starts,ends}];*)
(*minLength=Round[minSeconds/dt];*)
(*goodTrajsList=(Length[#]>minLength)&/@cleanTrajectories;*)
(*goodTrajectories=Pick[cleanTrajectories,goodTrajsList];*)
(*sortList=Reverse@Ordering[Length/@goodTrajectories];*)
(*trajectories=goodTrajectories[[sortList]];*)
(**)
(*(** get specific droplet and video frames **)*)
(*dropletIndex=dropletIndices[[dayIndex]];*)
(*trajectory=trajectories[[dropletIndex]];*)
(**)
(*boxLength=16;*)
(*halfBoxLength=Round[0.5boxLength];*)
(*singleDropletImages=Table[*)
(*position=trajectory[[frame]];*)
(*boxCorners=Round[{{Max[#[[1]]-halfBoxLength,1],Min[#[[1]]+halfBoxLength,nx]},{Max[#[[2]]-halfBoxLength,1],Min[#[[2]]+halfBoxLength,ny]}}]&@position;*)
(*ImageTake[dropletImages[[frame]],ny-#[[2]],#[[1]]]&@boxCorners*)
(*,{frame,frames}];*)
(**)
(*singleDropletImages*)
(*,{dayIndex,{1,6}}];*)


(* ::Input:: *)
(*MapThread[Export[FileNameJoin[{pthFigs,"figure 2",#1<>".png"}],Grid[{#2},Spacings->{0.1,0}]]&,{{"dropletSnapshots_1_12","dropletSnapshots_6_12"},singleDropletImagesAll}]//TableForm*)


(* ::Section::Closed:: *)
(*Figure 2 bottom row: PSD for days {1,6}*)


(* ::Subsubsection::Closed:: *)
(*get intensity time series and average spectrum for each day*)


(* ::Input:: *)
(*windowingQ=True;*)
(*fMax=1.0;*)
(**)
(*movieLengths={8344, 7252,8046,9225,5244,2251};*)
(*padFactor=2;*)
(*nPaddedSamples=padFactor Max[movieLengths]; *)
(*filterQ=True;*)
(*badLists={(*{1,2,11,26,28,31,44,51,70}~Join~*){1}~Join~{3,7,9,10,16,20,23,27,29,41,43,44,46,49,50,54,55,59,64},*)
(*{4,5,17,18,21,22,23,33,36,38,47,49},*)
(*{4,6,7,9,15,16,21,24,36,39,40,42,43,45,59,62,66,71,73},{3,6,7,11,13,14,15,24,30,31,32,33,40,43,44,51,57,65,77,79,80,82,85,92,96,98,103,105,108,114,117,118,124},*)
(*{5,13,21,32,33,34,52,55},*)
(*{}*)
(*};*)
(*listLengths={71,50,83,124,62,14};  (** number of droplets **)*)
(*filterLists=MapThread[Complement[Range[#2],#1]&,{badLists,listLengths}];  (** good droplets **)*)
(**)
(*(** calculate mean spectrum for each day **)*)
(*Print[AbsoluteTiming[*)
(*{allIntensities,meanSpectra,stdSpectra,allSpectra}=Table[*)
(*intensityParts=Import[FileNameJoin[{pthData,"all_intensityParts_"<>ToString[dayIndex]<>".dat"}]];*)
(*If[filterQ,intensityParts=intensityParts[[filterLists[[dayIndex]]]];];*)
(**)
(*(** get mean/std spectrum **)*)
(*times=Range[0,Length[intensityParts[[1]]]-1]dt;*)
(*paddedMemory=ConstantArray[0.0,nPaddedSamples];*)
(*powerSpectralDensities=calculateTemporalFreqSpectrum[dt,#,windowingQ,nPaddedSamples,paddedMemory][[{1,2}]]\[Transpose]&/@intensityParts;*)
(*freqs=powerSpectralDensities[[1,All,1]];*)
(*spectra=powerSpectralDensities[[All,All,2]];*)
(*meanSpectrum=Mean[spectra];*)
(*stdSpectrum=StandardDeviation[spectra];*)
(**)
(*(** output **)*)
(*{intensityParts,meanSpectrum,stdSpectrum,spectra}*)
(*,{dayIndex,Range[nDays]}]\[Transpose];*)
(*][[1]]];*)


(* ::Subsubsection::Closed:: *)
(*plots*)


(* ::Input:: *)
(*Clear[\[Omega],\[Omega]0,aa,bb,cc,i0];*)
(*fMax=1.0;*)
(*fMaxIndex=FirstPosition[freqs,_?(#>=fMax&)][[1]];*)
(*{indexStart,indexEnd}={2,fMaxIndex};*)
(**)
(*(** fitting normalized average spectrum in s,\[Theta],I **)*)
(*iFitsAmp=NonlinearModelFit[{freqs,#/Max[#]}\[Transpose][[indexStart;;indexEnd]],{aa/(1+(\[Omega])^2/bb^2),aa>0,bb>0},{{aa,1},{bb,0.1}},\[Omega],MaxIterations->1000]&/@meanSpectra;*)
(*{ampsExAmp,widthsExAmp}=Transpose[#["BestFitParameters"][[All,2]]&/@iFitsAmp]*)


(* ::Input:: *)
(*(*fTicks=Table[{t,DecimalForm[t,{2,1}]},{t,0,1,0.05}];*)
(*fTicks2={#\[LeftDoubleBracket]1\[RightDoubleBracket],""}&/@fTicks;*)*)
(*{plotStdQ,plotIndiQ}={False,False};*)
(*pTicks=Table[{t,DecimalForm[t,{2,1}]},{t,0,1,0.5}];*)
(*pTicks2={#[[1]],""}&/@pTicks;*)
(*yMin=-0.02;*)
(*yMax=4.5;*)
(*fwhmPoints={#,0.5}&/@widthsExAmp;*)
(*ops={PlotRange->{{-0.01,1.01}fMax,{yMin,yMax}},Frame->True,AspectRatio->1,FrameLabel->{"frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","norm. \!\(\*SubscriptBox[\(PSD\), \(I\)]\)"},FrameStyle->Directive[Black,24,AbsoluteThickness[2],"Arial"],ImageSize->{Automatic,300},FrameTicks->{{pTicks,pTicks2},Automatic(*{fTicks,fTicks2}*)}};*)
(*dayIndices={1,6};*)
(*{plots,stdplots,indiPlots}=Table[*)
(*color=If[plotIndex==1,colorYoung,colorOld];*)
(*meanSpectrum=meanSpectra[[dayIndices[[plotIndex]]]];*)
(*psdMax=Max[meanSpectrum] ampsExAmp[[dayIndices[[plotIndex]]]];*)
(*meanPSD={freqs,#/psdMax}\[Transpose]&@meanSpectrum;*)
(*pMean=ListLinePlot[meanPSD,PlotRange->{{0,1.01}fMax,All},Evaluate[ops],PlotStyle->color,Epilog->{Red,AbsolutePointSize[10],Point[#],AbsoluteThickness[lineThickness],Dashing[0.02],HalfLine[{#,{0,0.5}}],HalfLine[{#,{#[[1]],0}}]}&@fwhmPoints[[dayIndices[[plotIndex]]]]*)
(*];*)
(*If[plotStdQ,*)
(*meanPSDpSTD={freqs,(#[[1]]+#[[2]])/Max[#[[1]]]}\[Transpose]&@{meanSpectrum,stdSpectra[[dayIndices[[plotIndex]]]]};*)
(*meanPSDmSTD={freqs,(#[[1]]-#[[2]])/Max[#[[1]]]}\[Transpose]&@{meanSpectrum,stdSpectra[[dayIndices[[plotIndex]]]]};*)
(*meanPSDmSTD[[All,2]]=Max[#,0]&/@meanPSDmSTD[[All,2]];*)
(*pMeanStd=ListLinePlot[{meanPSD,meanPSDpSTD,meanPSDmSTD},PlotRange->{{-0.01,1.01}fMax,{yMin,yMax}},Evaluate[ops],PlotStyle->{color,None,None},Filling->{2->{3}},FillingStyle->Lighter@color,Epilog->{Red,AbsolutePointSize[10],Point[#],AbsoluteThickness[2],Dashed,Line[{{-0.01,0.5},#}],Line[{#,{#[[1]],yMin}}]}&@fwhmPoints[[plotIndex]]];*)
(*];*)
(*If[plotIndiQ,*)
(*pMeanAndIndividuals=Show[*)
(*ListLinePlot[{freqs,#/psdMax}\[Transpose],PlotRange->{{-0.01,1.01}fMax,{yMin,yMax}},Evaluate[ops],PlotStyle->LightGray]&/@allSpectra[[dayIndices[[plotIndex]]]],*)
(*ListLinePlot[meanPSD,PlotStyle->color,Evaluate[ops]],Epilog->{Red,AbsolutePointSize[10],Point[#],AbsoluteThickness[2],Dashed,Line[{{-0.01,0.5},#}],Line[{#,{#[[1]],yMin}}]}&@fwhmPoints[[plotIndex]]*)
(*]*)
(*];*)
(*{pMean,pMeanStd,pMeanAndIndividuals}*)
(*,{plotIndex,{1,2}}]\[Transpose];*)
(**)
(*Grid[{plots}]*)
(*If[plotStdQ,Grid[{stdplots}]]*)
(*If[plotIndiQ,Grid[{indiPlots}]]*)


(* ::Input:: *)
(*Do[*)
(*MapThread[Export[FileNameJoin[{pthFigs,"figure 2",#2<>"."<>ext}],#1]&,{plots,{"plot2_young_spectrum","plot2_old_spectrum"}}];*)
(*,{ext,{"png","pdf"}}];*)


(* ::Input:: *)
(*Do[*)
(*MapThread[Export[FileNameJoin[{pthFigs,"figure 2",#2<>"."<>ext}],#1]&,{indiPlots,{"plot2_young_spectrum_indi","plot2_old_spectrum_indi"}}];*)
(*,{ext,{"png"}}];*)


(* ::Subsubsection::Closed:: *)
(*view individual trajectories and power spectra*)


(* ::Input:: *)
(*dayIndex=1;*)
(*Manipulate[*)
(*label=Style["day: "<>ToString[IntegerString[dayIndex]]<>", droplet: "<>ToString[IntegerString[dropletIndex]],Black];*)
(*p1=ListLinePlot[allIntensities[[dayIndex,dropletIndex]],(*PlotRange->{{-0.01 fMax,1.01fMax},{-0.01,1.05}},*)Frame->True,AspectRatio->1,FrameLabel->{"time \!\(\**)
(*StyleBox[\"t\",\nFontSlant->\"Italic\"]\) (s)","intensity"},FrameStyle->Directive[Black,18,AbsoluteThickness[2]],ImageSize->{Automatic,300}];*)
(*p2=ListLinePlot[{freqs,#/0.05}\[Transpose](*\[LeftDoubleBracket]2;;\[RightDoubleBracket]*)&@allSpectra[[dayIndex,dropletIndex]],PlotRange->{{-0.01 fMax,1.01fMax},{-0.01,1.05}},Frame->True,AspectRatio->1,FrameLabel->{"frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]],ImageSize->{Automatic,300}];*)
(*Grid[{{label,SpanFromLeft},{p1,p2}}]*)
(*,{dropletIndex,1,Length[allSpectra[[dayIndex]]],1,Appearance->"Open"}]*)


(* ::Subsubsection::Closed:: *)
(*daily mean spectra*)


(* ::Input:: *)
(*plot=ListLinePlot[{freqs,#/Max[#]}\[Transpose](*\[LeftDoubleBracket]2;;\[RightDoubleBracket]*)&/@meanSpectra,PlotRange->{{0,fMax},{0,1}},PlotLegends->Table["day "<>ToString[i],{i,6}],Frame->True,AspectRatio->1,FrameLabel->{"frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","norm. PSD (a.u.)"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&/@Subdivide[Length[meanSpectra]-1]),FrameStyle->Directive[Black,18,AbsoluteThickness[2]],PlotLabel->Style["Individually normalized daily mean spectra",Black]]*)
(*Export[FileNameJoin[{pthFigs,"figure 2","meanSpectraAll"<>If[filterQ,"_filtered",""]<>"."<>#}],plot]&/@{"png","pdf"}//TableForm*)


(* ::Input:: *)
(*Table[*)
(*ListLinePlot[{freqs,#/Max[#]}\[Transpose](*\[LeftDoubleBracket]2;;\[RightDoubleBracket]*)&@meanSpectra[[dayIndex]],PlotRange->{{-0.01,1.01}fMax,{-0.02,1.05}},Frame->True,AspectRatio->1,FrameLabel->{"frequency \!\(\**)
(*StyleBox[\"f\",\nFontSlant->\"Italic\"]\) (Hz)","norm. PSD"},PlotStyle->(ColorData[{"BlueGreenYellow","Reverse"}][#]&@((dayIndex-1)/(nDays-1))),FrameStyle->Directive[Black,18,AbsoluteThickness[2]],ImageSize->{Automatic,300}]*)
(*,{dayIndex,Range[6]}]*)
